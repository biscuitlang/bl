#private
typeinfo_s8 :: fn () #test {
	info := cast(*TypeInfoInt) typeinfo(s8);
	test_eq(info.kind, TypeKind.INT);
	test_eq(info.size_bytes, sizeof(s8));
	test_eq(info.alignment, alignof(s8));
	test_eq(info.bit_count, auto sizeof(s8) * 8);
	test_true(info.is_signed);
}

typeinfo_s16 :: fn () #test {
	info := cast(*TypeInfoInt) typeinfo(s16);
	test_eq(info.kind, TypeKind.INT);
	test_eq(info.size_bytes, sizeof(s16));
	test_eq(info.alignment, alignof(s16));
	test_eq(info.bit_count, auto sizeof(s16) * 8);
	test_true(info.is_signed);
}

typeinfo_s32 :: fn () #test {
	info := cast(*TypeInfoInt) typeinfo(s32);
	test_eq(info.kind, TypeKind.INT);
	test_eq(info.size_bytes, sizeof(s32));
	test_eq(info.alignment, alignof(s32));
	test_eq(info.bit_count, auto sizeof(s32) * 8);
	test_true(info.is_signed);
}

typeinfo_s64 :: fn () #test {
	info := cast(*TypeInfoInt) typeinfo(s64);
	test_eq(info.kind, TypeKind.INT);
	test_eq(info.size_bytes, sizeof(s64));
	test_eq(info.alignment, alignof(s64));
	test_eq(info.bit_count, auto sizeof(s64) * 8);
	test_true(info.is_signed);
}

typeinfo_u8 :: fn () #test {
	info := cast(*TypeInfoInt) typeinfo(u8);
	test_eq(info.kind, TypeKind.INT);
	test_eq(info.size_bytes, sizeof(u8));
	test_eq(info.alignment, alignof(u8));
	test_eq(info.bit_count, auto sizeof(u8) * 8);
	test_false(info.is_signed);
}

typeinfo_u16 :: fn () #test {
	info := cast(*TypeInfoInt) typeinfo(u16);
	test_eq(info.kind, TypeKind.INT);
	test_eq(info.size_bytes, sizeof(u16));
	test_eq(info.alignment, alignof(u16));
	test_eq(info.bit_count, auto sizeof(u16) * 8);
	test_false(info.is_signed);
}

typeinfo_u32 :: fn () #test {
	info := cast(*TypeInfoInt) typeinfo(u32);
	test_eq(info.kind, TypeKind.INT);
	test_eq(info.size_bytes, sizeof(u32));
	test_eq(info.alignment, alignof(u32));
	test_eq(info.bit_count, auto sizeof(u32) * 8);
	test_false(info.is_signed);
}

typeinfo_u64 :: fn () #test {
	info := cast(*TypeInfoInt) typeinfo(u64);
	test_eq(info.kind, TypeKind.INT);
	test_eq(info.size_bytes, sizeof(u64));
	test_eq(info.alignment, alignof(u64));
	test_eq(info.bit_count, auto sizeof(u64) * 8);
	test_false(info.is_signed);
}

typeinfo_f32 :: fn () #test {
	info := cast(*TypeInfoReal) typeinfo(f32);
	test_eq(info.kind, TypeKind.REAL);
	test_eq(info.size_bytes, sizeof(f32));
	test_eq(info.alignment, sizeof(f32));
	test_eq(info.bit_count, auto sizeof(f32) * 8);
}

typeinfo_f64 :: fn () #test {
	info := cast(*TypeInfoReal) typeinfo(f64);
	test_eq(info.kind, TypeKind.REAL);
	test_eq(info.size_bytes, sizeof(f64));
	test_eq(info.alignment, sizeof(f64));
	test_eq(info.bit_count, auto sizeof(f64) * 8);
}

typeinfo_fn1 :: fn () #test {
	T :: fn (i: s32, j: bool) s32 { return 0; };
	info := cast(*TypeInfoFn) typeinfo(T);

	test_eq(info.base.kind, TypeKind.FN);
	test_eq(info.args.len, 2);
	test_eq(info.ret_type, typeinfo(s32));
	test_false(info.is_vargs);

	{ // arg1
		ai :: &info.args[0];
		test_eq(ai.name, "i");
		test_eq(ai.base_type, typeinfo(s32));
	}

	{ // arg2
		ai :: &info.args[1];
		test_eq(ai.name, "j");
		test_eq(ai.base_type, typeinfo(bool));
	}
}

typeinfo_fn2 :: fn () #test {
	T : fn (s32, bool) s32 : fn (i: s32, j: bool) s32 { return 0; };
	info := cast(*TypeInfoFn) typeinfo(T);

	test_eq(info.base.kind, TypeKind.FN);
	test_eq(info.args.len, 2);
	test_eq(info.ret_type, typeinfo(s32));
	test_false(info.is_vargs);

	{ // arg1
		ai :: &info.args[0];
		test_eq(ai.name, "i");
		test_eq(ai.base_type, typeinfo(s32));
	}

	{ // arg2
		ai :: &info.args[1];
		test_eq(ai.name, "j");
		test_eq(ai.base_type, typeinfo(bool));
	}
}

typeinfo_fn3 :: fn () #test {
	ptr := &fn (i: s32, j: bool) s32 { return 0; };
	info_ptr := cast(*TypeInfoPtr) typeinfo(ptr);
	test_eq(info_ptr.base.kind, TypeKind.PTR);
	info := cast(*TypeInfoFn) info_ptr.pointee_type;
	test_eq(info.base.kind, TypeKind.FN);
	test_eq(info.args.len, 2);
	test_eq(info.ret_type, typeinfo(s32));
	test_false(info.is_vargs);

	{ // arg1
		ai :: &info.args[0];
		test_eq(ai.name, "i");
		test_eq(ai.base_type, typeinfo(s32));
	}

	{ // arg2
		ai :: &info.args[1];
		test_eq(ai.name, "j");
		test_eq(ai.base_type, typeinfo(bool));
	}
}

typeinfo_ptr :: fn () #test {
	T :: *s32;
	info := cast(*TypeInfoPtr) typeinfo(T);

	test_eq(info.base.kind, TypeKind.PTR);
	test_eq(info.pointee_type, typeinfo(s32));
}

typeinfo_array :: fn () #test {
	T :: [10]s32;
	info := cast(*TypeInfoArray) typeinfo(T);

	test_eq(info.base.kind, TypeKind.ARRAY);
	test_eq(info.name, "T");
	test_eq(info.base.size_bytes, sizeof(T));
	test_eq(info.elem_type, typeinfo(s32));
	test_eq(info.len, 10);
}

typeinfo_enum_1 :: fn () #test {
	T :: enum s32 { A; B; C };
	info := cast(*TypeInfoEnum) typeinfo(T);

	test_eq(info.base.kind, TypeKind.ENUM);
	test_not_null(info.base_type);
	test_eq(info.variants.len, 3);
	test_eq(info.variants[0].value, 0);
	test_eq(info.variants[1].value, 1);
	test_eq(info.variants[2].value, 2);
}


typeinfo_enum_negative_values :: fn () #test {
	T :: enum { A = -2; B = -1; C = 0; D = 1; E = 2 };
	info := cast(*TypeInfoEnum) typeinfo(T);

	test_eq(info.base.kind, TypeKind.ENUM);
	test_not_null(info.base_type);
	test_eq(info.variants.len, 5);
	test_eq(info.variants[0].value, -2);
	test_eq(info.variants[1].value, -1);
	test_eq(info.variants[2].value,  0);
	test_eq(info.variants[3].value,  1);
	test_eq(info.variants[4].value,  2);
}

typeinfo_enum_s64 :: fn () #test {
	T :: enum s64 { A = -2; B = -1; C = 0; D = 1; E = 2 };
	info := cast(*TypeInfoEnum) typeinfo(T);

	test_eq(info.base.kind, TypeKind.ENUM);
	test_not_null(info.base_type);
	test_eq(info.variants.len, 5);
	test_eq(info.variants[0].value, -2);
	test_eq(info.variants[1].value, -1);
	test_eq(info.variants[2].value,  0);
	test_eq(info.variants[3].value,  1);
	test_eq(info.variants[4].value,  2);
}

typeinfo_enum_s8 :: fn () #test {
	T :: enum s8 { A = -2; B = -1; C = 0; D = 1; E = 2 };
	info := cast(*TypeInfoEnum) typeinfo(T);

	test_eq(info.base.kind, TypeKind.ENUM);
	test_not_null(info.base_type);
	test_eq(info.variants.len, 5);
	test_eq(info.variants[0].value, -2);
	test_eq(info.variants[1].value, -1);
	test_eq(info.variants[2].value,  0);
	test_eq(info.variants[3].value,  1);
	test_eq(info.variants[4].value,  2);
}

typeinfo_enum_u32 :: fn () #test {
	T :: enum u32 { A = -2; B = -1; C = 0; D = 1; E = 2 };
	info := cast(*TypeInfoEnum) typeinfo(T);

	test_eq(info.base.kind, TypeKind.ENUM);
	test_not_null(info.base_type);
	test_eq(info.variants.len, 5);
	test_eq(info.variants[0].value, auto (cast(u32) -2));
	test_eq(info.variants[1].value, auto (cast(u32) -1));
	test_eq(info.variants[2].value,  0);
	test_eq(info.variants[3].value,  1);
	test_eq(info.variants[4].value,  2);
}

typeinfo_struct_1 :: fn () #test {
	T1 :: struct { A: s32; B: bool; C: f32 };
	info := cast(*TypeInfoStruct) typeinfo(T1);

	test_eq(info.base.kind, TypeKind.STRUCT);
	test_eq(info.base.size_bytes, sizeof(T1));
	test_eq(info.members.len, 3);
	test_eq(info.members[0].index, 0);
	test_eq(info.members[1].index, 1);
	test_eq(info.members[2].index, 2);
}

typeinfo_struct_2 :: fn () #test {
	T2 :: struct { A: s32; B: bool; C: f32 };
	Alias :: T2;
	info := cast(*TypeInfoStruct) typeinfo(Alias);

	test_true(info.base.kind == TypeKind.STRUCT);
	test_eq(info.base.size_bytes, sizeof(T2));
	test_eq(info.members.len, 3);
	test_eq(info.members[0].index, 0);
	test_eq(info.members[1].index, 1);
	test_eq(info.members[2].index, 2);
}

typeinfo_group :: fn () #test {
	F1 :: fn (i: s32) {};
	F2 :: fn (j: string) {};
	T :: fn { F1; F2; };
	info := cast(*TypeInfoFnGroup)typeinfo(T);
	test_true(info.base.kind == TypeKind.FN_GROUP);
	test_eq(info.variants.len, 2);
	test_true(info.variants[0] == typeinfo(F1));
	test_true(info.variants[1] == typeinfo(F2));
}

typeinfo_comparison1 :: fn () #test {
	{
		T1 :: struct {
			i: s32;
			j: bool;
		};

		T2 :: T1;

		test_true(typeinfo(T1) == typeinfo(T2));
	}

	{
		T1 :: struct {
			i: s32;
			j: bool;
		};

		T2 :: struct {
			i: s32;
			j: bool;
		};

		test_true(typeinfo(T1) != typeinfo(T2));
	}

	test_true(typeinfo(struct { i: s32 }) == typeinfo(struct { i: s32 }));
}

typeinfo_comparison2 :: fn () #test {
	T1 :: fn () {
	};

	T2 :: fn () {
	};

	test_true(typeinfo(T1) == typeinfo(T2));
}

helpers_enum_count :: fn () #test {
	Enum :: enum {
		A; B; C;
	};

	c :: enum_count(Enum);
	test_eq(c, 3);

	// Should be comptime!
	arr: [enum_count(Enum)]s32;
	test_eq(arr.len, 3);
}

number_type_1 :: fn () #test {
	test_eq(typeinfo(number_type(1, true)), typeinfo(s8));
	test_eq(typeinfo(number_type(2, true)), typeinfo(s16));
	test_eq(typeinfo(number_type(4, true)), typeinfo(s32));
	test_eq(typeinfo(number_type(8, true)), typeinfo(s64));
	test_eq(typeinfo(number_type(1, false)), typeinfo(u8));
	test_eq(typeinfo(number_type(2, false)), typeinfo(u16));
	test_eq(typeinfo(number_type(4, false)), typeinfo(u32));
	test_eq(typeinfo(number_type(8, false)), typeinfo(u64));
}

has_member_1 :: fn () #test {
	Foo :: struct {
		first: s32;
		second: s32;
	};

	test_false(has_member(Foo, "foo"));
	test_true(has_member(Foo, "first"));
	test_true(has_member(Foo, "second"));
}

member_offset :: fn () #test {
	Foo :: struct {
		first: s32;
		second: s32;
		bar: struct {
			first: s32;
			second: s32;
			baz: struct {
				first: s32;
				second: s32;
			}
		};
	};

	test_eq(member_offset_bytes(Foo, "second"), auto sizeof(s32));
	test_eq(member_offset_bytes(Foo, "bar"), auto sizeof(s32) * 2);
	test_eq(member_offset_bytes(Foo, "bar/first"), auto sizeof(s32) * 2);
	test_eq(member_offset_bytes(Foo, "bar/second"), auto sizeof(s32) * 3);
	test_eq(member_offset_bytes(Foo, "bar/baz/first"), auto sizeof(s32) * 4);
	test_eq(member_offset_bytes(Foo, "bar/baz/second"), auto sizeof(s32) * 5);
}
