#private

IS_ENABLED :: true;
called_num: s32;

get_number :: fn () s32 {
	called_num += 1;
	return 10;
}

simple_enabled :: fn () #test {
	foo :: fn () #enable_if true {
		called_num += 1;
	};

	called_num = 0;
	foo();
	test_eq(called_num, 1);
}

simple_disabled :: fn () #test {
	foo :: fn () #enable_if false {
		called_num += 1;
	};

	called_num = 0;
	foo();
	test_eq(called_num, 0);
}

simple_disabled_expr :: fn () #test {
	foo :: fn () #enable_if true && IS_ENABLED {
		called_num += 1;
	};

	called_num = 0;
	foo();
	test_eq(called_num, 1);
}

simple_enabled_ret_val :: fn () #test {
	foo :: fn () s32 #enable_if true {
		called_num += 1;
		return 10;
	};

	called_num = 0;
	i :: foo();
	test_eq(called_num, 1);
	test_eq(i, 10);
}

disabled_with_args :: fn () #test {
	foo :: fn (a: s32, b: string_view) #enable_if false {
		called_num += 1;
	};

	called_num = 0;
	foo(10, "Hello");
	test_eq(called_num, 0);
}

disabled_with_args_fn_call :: fn () #test {
	foo :: fn (a: s32, b: string_view) #enable_if false {
		called_num += 1;
	};

	called_num = 0;
	foo(get_number(), "Hello");
	test_eq(called_num, 0);
}

enabled_with_args_fn_call :: fn () #test {
	foo :: fn (a: s32, b: string_view) #enable_if true {
		called_num += 1;
	};

	called_num = 0;
	foo(get_number(), "Hello");
	test_eq(called_num, 2);
}

disabled_poly :: fn () {
	foo :: fn (a: ?T) #enable_if false {
		called_num += 1;
	};

	called_num = 0;
	foo(10);
	foo(20); // Intentionally call the same function again.
	foo("hello");
	test_eq(called_num, 0);
}