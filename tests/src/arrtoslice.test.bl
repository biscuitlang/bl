#scope_private
array_to_slice_initialization :: fn () #test {
	arr :: [10]s32.{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
	slice : []s32 = arr;
	test_eq(arr.len, slice.len);
	loop i := 0; i < slice.len; i += 1 {
		test_eq(arr[i], slice[i]);
	}
}

array_to_slice_initialization_constants :: fn () #test {
	arr :: [10]s32.{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
	slice :: arr;
	test_eq(arr.len, slice.len);
	loop i := 0; i < slice.len; i += 1 {
		test_eq(arr[i], slice[i]);
	}
}

array_to_slice_argument_cast :: fn () #test {
	arr :: [10]s32.{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
	foo :: fn (data: []s32) {
		test_eq(data.len, 10);
		loop i := 0; i < data.len; i += 1 {
			test_eq(data[i], i);
		}
	};
	foo(arr);
}

str_to_slice_initialization :: fn () #test {
	str: string;
	slice: []u8 = str;
}

str_to_slice_argument :: fn () #test {
	str: string;
	foo :: fn (_: []u8) {};

	foo(str);
}
