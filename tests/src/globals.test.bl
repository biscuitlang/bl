#private
Foo :: struct {
	i: s32;
	j: s32;
}

Bar :: enum {
	A = 1;
	B;
	C;
}

Un :: union {
	i: s32;
	j: s32;
}

G1 := 10;
G2 := 10 + 10; // 20
G3 :: 10;
G4 :: s32;
G5 :: Bar.A;

globals_eplicit_initialize :: fn () #test {
	assert(G1 == 10);
	assert(G2 == 20);
	assert(G3 == 10);

	foo : G4 = 10;
	assert(foo == 10);

	assert(G5 == Bar.A);
};

// Let's try some uninitialized globals
UG1: s8;
UG2: s16;
UG3: s32;
UG4: s64;
UG5: u8;
UG6: u16;
UG7: u32;
UG8: u64;
UG9: usize;
UG10: bool;
UG11: string;
UG12: Foo;
UG13: []s32;
UG14: [2]s32;
UG15: string;
UG16: Bar;
UG17: Un;

fundamental_type_default_init :: fn () #test {
	assert(UG1 == 0);
	assert(UG2 == 0);
	assert(UG3 == 0);
	assert(UG4 == 0);
	assert(UG5 == 0);
	assert(UG6 == 0);
	assert(UG7 == 0);
	assert(UG8 == 0);
	assert(UG9 == 0);
	assert(UG10 == false);
	assert(UG11.len == 0);
	assert(UG11.ptr == null);
	assert(UG15.len == 0);
	assert(UG15.ptr == null);
}

struct_type_default_init :: fn () #test {
	assert(UG12.i == 0);
	assert(UG12.j == 0);
}

array_type_default_init :: fn () #test {
	assert(UG14[0] == 0);
	assert(UG14[1] == 0);
}

slice_type_default_init :: fn () #test {
	assert(UG13.len == 0);
	assert(UG13.ptr == null);
}

union_type_default_init :: fn () #test {
	assert(UG17.i == 0);
}

enum_type_default_init :: fn () #test {
	assert(UG16 == Bar.A);
}

// thread locals
tl1 : s32 = 10 #thread_local;
tl2: Foo #thread_local;
tl3: [10]s32 #thread_local;

thread_local :: fn () #test {
	tl1 = 10;
	tl2 = Foo.{};
	tl3[0] = 10;
}

A, B, C :: 20;

multiple_globals_initialized_at_once :: fn () #test {
	test_eq(A, 20);
	// test_eq(B, 20); // Intentionally not used!
	test_eq(C, 20);
}
