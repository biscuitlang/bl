#private
f1_called := 0;
f2_called := 0;
f3_called := 0;

reset :: fn () #inline {
	f1_called = 0;
	f2_called = 0;
	f3_called = 0;
}
	
f1 :: fn (v: bool) bool { 
	f1_called += 1;
	return v; 
}
	
f2 :: fn (v: bool) bool { 
	f2_called += 1;
	return v; 
}

f3 :: fn (v: bool) bool { 
	f3_called += 1;
	return v; 
}

ifs :: fn () #test {
	b := true;
	if b {
		if !b {
		  unreachable;
		}
	} else {
		unreachable;
	}

	if !b {
		unreachable;
	}
};

logical_op1 :: fn () #test {
	a :: true;
	b :: false;
	test_true(a || b);
	test_true(b || a);
	test_true(a || a);
	test_false(b || b);
}
	
logical_op3 :: fn () #test {
	test_true(f1(true) || f2(false));
	test_eq(f1_called, 1);
	test_eq(f2_called, 0);
	reset();
	
	test_true(f1(false) || f2(true));
	test_eq(f1_called, 1);
	test_eq(f2_called, 1);
	reset();
	
	test_true(f1(true) || f1(true));
	test_eq(f1_called, 1);
	reset();
	  
	test_false(f1(false) || f1(false));
	test_eq(f1_called, 2);
	reset();
}

logical_op4 :: fn () #test {
	test_true(f1(true) || f2(false) || f3(true));
	test_eq(f1_called, 1);
	test_eq(f2_called, 0);
	test_eq(f3_called, 0);
	reset();
	
	test_true(f1(false) || f1(false) || f1(true));
	test_eq(f1_called, 3);
	reset();
}

logical_op5 :: fn () #test {
	a :: true;
	b :: false;
	test_false(a && b);
	test_false(b && a);
	test_true(a && a);
	test_false(b && b);
}

logical_op6 :: fn () #test {
	a := true;
	b := false;
	test_true(a || b);
	test_true(b || a);
	test_true(a || a);
	test_false(b || b);
}

logical_op7 :: fn () #test {
	test_false(f1(true) && f2(false));
	test_eq(f1_called, 1);
	test_eq(f2_called, 1);
	reset();
	
	test_false(f1(false) && f2(true));
	test_eq(f1_called, 1);
	test_eq(f2_called, 0);
	reset();
	
	test_true(f1(true) && f1(true));
	test_eq(f1_called, 2);
	reset();
	  
	test_false(f1(false) && f1(false));
	test_eq(f1_called, 1);
	reset();
}

logical_op8 :: fn () #test {
	test_true(f1(true) && f1(true) && f1(true));
	test_eq(f1_called, 3);
	reset();
	
	test_false(f1(false) && f1(true) && f1(true));
	test_eq(f1_called, 1);
	reset();
	
	test_false(f1(true) && f1(false) && f1(true));
	test_eq(f1_called, 2);
	reset();
	
	test_false(f1(true) && f1(true) && f1(false));
	test_eq(f1_called, 3);
	reset();
}

logical_op9 :: fn () #test {
	test_true(f1(true) || f1(true) && f1(true));
	test_eq(f1_called, 1);
	reset();

	test_true(f1(true) && f1(true) || f1(true));
	test_eq(f1_called, 2);
	reset();
}

static_if_1 :: fn () #test {
	#if false {
		test_true(false);
	} else {        
		test_true(true);
	}
}

static_if_2 :: fn () #test {
	FOO :: true;
	BAR :: false;
	
	#if FOO {
		test_true(true);
		#if !FOO {
			test_true(false);
		} else {
			test_true(true);
			#if !BAR {
				test_true(true);
			}
		}
	}
	
	#if FOO && !BAR {
		test_true(true);
	}
}