#private
f1_called := 0;
f2_called := 0;
f3_called := 0;

reset :: fn () #inline {
	f1_called = 0;
	f2_called = 0;
	f3_called = 0;
}

f1 :: fn (v: bool) bool {
	f1_called += 1;
	return v;
}

f2 :: fn (v: bool) bool {
	f2_called += 1;
	return v;
}

f3 :: fn (v: bool) bool {
	f3_called += 1;
	return v;
}

ifs :: fn () #test {
	b := true;
	if b {
		if !b {
		  unreachable;
		}
	} else {
		unreachable;
	}

	if !b {
		unreachable;
	}
};

logical_op1 :: fn () #test {
	a :: true;
	b :: false;
	test_true(a || b);
	test_true(b || a);
	test_true(a || a);
	test_false(b || b);
}

logical_op3 :: fn () #test {
	test_true(f1(true) || f2(false));
	test_eq(f1_called, 1);
	test_eq(f2_called, 0);
	reset();

	test_true(f1(false) || f2(true));
	test_eq(f1_called, 1);
	test_eq(f2_called, 1);
	reset();

	test_true(f1(true) || f1(true));
	test_eq(f1_called, 1);
	reset();

	test_false(f1(false) || f1(false));
	test_eq(f1_called, 2);
	reset();
}

logical_op4 :: fn () #test {
	test_true(f1(true) || f2(false) || f3(true));
	test_eq(f1_called, 1);
	test_eq(f2_called, 0);
	test_eq(f3_called, 0);
	reset();

	test_true(f1(false) || f1(false) || f1(true));
	test_eq(f1_called, 3);
	reset();
}

logical_op5 :: fn () #test {
	a :: true;
	b :: false;
	test_false(a && b);
	test_false(b && a);
	test_true(a && a);
	test_false(b && b);
}

logical_op6 :: fn () #test {
	a := true;
	b := false;
	test_true(a || b);
	test_true(b || a);
	test_true(a || a);
	test_false(b || b);
}

logical_op7 :: fn () #test {
	test_false(f1(true) && f2(false));
	test_eq(f1_called, 1);
	test_eq(f2_called, 1);
	reset();

	test_false(f1(false) && f2(true));
	test_eq(f1_called, 1);
	test_eq(f2_called, 0);
	reset();

	test_true(f1(true) && f1(true));
	test_eq(f1_called, 2);
	reset();

	test_false(f1(false) && f1(false));
	test_eq(f1_called, 1);
	reset();
}

logical_op8 :: fn () #test {
	test_true(f1(true) && f1(true) && f1(true));
	test_eq(f1_called, 3);
	reset();

	test_false(f1(false) && f1(true) && f1(true));
	test_eq(f1_called, 1);
	reset();

	test_false(f1(true) && f1(false) && f1(true));
	test_eq(f1_called, 2);
	reset();

	test_false(f1(true) && f1(true) && f1(false));
	test_eq(f1_called, 3);
	reset();
}

logical_op9 :: fn () #test {
	test_true(f1(true) || f1(true) && f1(true));
	test_eq(f1_called, 1);
	reset();

	test_true(f1(true) && f1(true) || f1(true));
	test_eq(f1_called, 2);
	reset();
}

logical_op10 :: fn () #test {
	a :: true;
	b :: false;
	c :: false;
	test_false((a || b) && c);
	test_false((b || c) && c);
	test_false(c && (a || b));
	test_false(c && (b || a));
}

logical_comptime :: fn () #test {
	a := true;
	b := false;
	c := false;
	test_false((a || b) && c);
	test_false((b || c) && c);
	test_false(c && (a || b));
	test_false(c && (b || a));
}

static_if_1 :: fn () #test {
	#if false {
		test_true(false);
	} else {
		test_true(true);
	}
}

static_if_2 :: fn () #test {
	FOO :: true;
	BAR :: false;

	#if FOO {
		test_true(true);
		#if !FOO {
			test_true(false);
		} else {
			test_true(true);
			#if !BAR {
				test_true(true);
			}
		}
	}

	#if FOO && !BAR {
		test_true(true);
	}
}

optional_then :: fn () #test {
	v := false;
	expr := true;
	if expr then {
		v = true;
	}
	test_true(v);
}

optional_then_with_else :: fn () #test {
	v := false;
	expr := true;
	if expr then {
		v = true;
	} else {
		v = false;
	}
	test_true(v);
}

inline_if :: fn () #test {
	v := false;
	expr := true;
	if expr then v = true;
	test_true(v);
}

inline_if_with_else_branch :: fn () #test {
	v := false;
	expr := true;
	if expr then v = true else v = false;
	test_true(v);
}

if_mixed_branches :: fn () #test {
	v := 0;
	expr := true;

	if expr then   v = 1;
	test_eq(v, 1);

	if expr then { v = 2; }
	test_eq(v, 2);

	if expr      { v = 3; }
	test_eq(v, 3);

	if !expr then   v = 4     else   v = 5;
	test_eq(v, 5);

	if !expr then   v = 6     else { v = 7;  }
	test_eq(v, 7);

	if !expr then { v = 8;  } else { v = 9;  }
	test_eq(v, 9);

	if !expr      { v = 10; } else { v = 11; }
	test_eq(v, 11);
}

ternary_simple :: fn () #test {
	expr := true;
	test_eq(if expr then 10 else 20, 10);
	test_eq(if !expr then 10 else 20, 20);
}

ternary_simple2 :: fn () #test {
	expr := true;
	a := 10;
	b := 20;
	test_eq(if expr then &a else &b, &a);
}

ternary_nested :: fn () #test {
	expr := true;
	test_eq(if expr then (if !expr then 30 else 40) else 20, 40);
}

