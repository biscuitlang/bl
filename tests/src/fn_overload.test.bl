#scope_private

invoked: *TypeInfo;

group1 :: fn {
	A1;
	B1;
	C1;
	D1;
	E1;
}

A1 :: fn (i: s32, j: s32) {
	test_eq(cast(*u8) invoked, cast(*u8) typeinfo(A1));
}

B1 :: fn (i: f32, j: f32) {
	test_eq(cast(*u8) invoked, cast(*u8) typeinfo(B1));
}

C1 :: fn (i: s32) {
	test_eq(cast(*u8) invoked, cast(*u8) typeinfo(C1));
}

D1 :: fn (i: Any) {
	test_eq(cast(*u8) invoked, cast(*u8) typeinfo(D1));
}

E1 :: fn () {
	test_eq(cast(*u8) invoked, cast(*u8) typeinfo(E1));
}

fn_overload_invoke1 :: fn () #test {
	invoked = typeinfo(A1);
	group1(10, 20);

	invoked = typeinfo(B1);
	group1(1.f, 0.f);

	invoked = typeinfo(C1);
	group1(1);

	invoked = typeinfo(D1);
	group1("hello");

	invoked = typeinfo(E1);
	group1();
}

group2 :: fn {
	A2;
	B2;
	C2;
}

A2 :: fn (b := true) {
	test_eq(cast(*u8) invoked, cast(*u8) typeinfo(A2));
}

B2 :: fn (i: s32, b := true) {
	test_eq(cast(*u8) invoked, cast(*u8) typeinfo(B2));
}

C2 :: fn (i: string_view, b := true) {
	test_eq(cast(*u8) invoked, cast(*u8) typeinfo(C2));
}

fn_overload_invoke2 :: fn () #test {
	invoked = typeinfo(A2);
	group2();

	invoked = typeinfo(B2);
	group2(10);

	invoked = typeinfo(C2);
	group2("hello");
}


group3 :: fn {
	A3;
	B3;
	C3;
}

A3 :: fn (i: s32, b := true) {
	test_eq(cast(*u8) invoked, cast(*u8) typeinfo(A3));
}

B3 :: fn (i: s32, s: bool, b := true) {
	test_eq(cast(*u8) invoked, cast(*u8) typeinfo(B3));
}

C3 :: fn (i: string_view, b := true) {
	test_eq(cast(*u8) invoked, cast(*u8) typeinfo(C3));
}

fn_overload_invoke3 :: fn () #test {
	invoked = typeinfo(A3);
	group3(10);

	invoked = typeinfo(B3);
	group3(10, true, false);

	invoked = typeinfo(C3);
	group3("hello", true);

	invoked = typeinfo(C3);
	group3("hello");
}

inline_group1 :: fn {
	fn (i: s32, b := true) s32 {
		return 1;
	};

	fn (i: s32, s: bool, b := true) s32 {
		return 2;
	};

	fn (i: string_view, b := true) s32 {
		return 3;
	};
}

fn_overload_invoke4 :: fn () #test {
	test_eq(inline_group1(10), 1);
	test_eq(inline_group1(10, true, false), 2);
	test_eq(inline_group1("hello", true), 3);
	test_eq(inline_group1("hello"), 3);
}

inline_group2 :: fn {
	fn (i: s32) s32 {
		return 1;
	};

	fn (i: bool) s32 {
		return 2;
	};

	fn () s32 {
		return 3;
	};

	fn (str: string_view) s32 {
		return 4;
	};
}

fn_overload_invoke5 :: fn () #test {
	test_eq(inline_group2(10), 1);
	test_eq(inline_group2(true), 2);
	test_eq(inline_group2(), 3);
	test_eq(inline_group2("hello"), 4);

	str: string;
	test_eq(inline_group2(str), 4);
}

inline_group3 :: fn {
	fn (i: s32) s32 {
		return 1;
	};

	fn (i: ...) s32 {
		return 2;
	};
}

fn_overload_invoke6 :: fn () #test {
	test_eq(inline_group3(10), 1);
	test_eq(inline_group3(true), 2);
	test_eq(inline_group3("hello"), 2);
}

inline_group4 :: fn {
	fn (i: s32, j: bool) s32 {
		return 1;
	};

	fn (i: ...) s32 {
		return 2;
	};
}

fn_overload_invoke7 :: fn () #test {
	test_eq(inline_group4(10, true), 1);
	test_eq(inline_group4(true), 2);
	test_eq(inline_group4("hello"), 2);
}

inline_group5 :: fn {
	fn (i: s32, j: bool) s32 {
		return 1;
	};

	fn (i: s32, j: ...) s32 {
		return 2;
	};
}

fn_overload_invoke8 :: fn () #test {
	test_eq(inline_group5(10, true), 1);
	test_eq(inline_group5(10), 2);
	test_eq(inline_group5(10, "hello"), 2);
}

inline_group6 :: fn {
	fn (i: string_view) s32 {
		return 1;
	};

	fn (i: string) s32 {
		return 2;
	};

	fn (i: Any) s32 {
		return 3;
	};
}

fn_overload_invoke9 :: fn () #test {
	test_eq(inline_group6("hello"), 1);
	str: string;
	test_eq(inline_group6(str), 2);
}
