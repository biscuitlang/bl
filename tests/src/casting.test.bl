#scope_private
literal_implicit_casting :: fn () #test {
	_u8:    u8    = 10; 
	_u16:   u16   = 10; 
	_u32:   u32   = 10; 
	_u64:   u64   = 10; 
	_usize: usize = 10;
	_s8:    s8    = 10; 
	_s16:   s16   = 10; 
	_s32:   s32   = 10; 
	_s64:   s64   = 10; 

	_s64 = 10 * 2; 

	fn (i: u8) {
	} (10);

	if _u8 == 10 {
	}
};

pointer_casting :: fn () #test {
	i_ptr : *s32;
	j_ptr : *s8;

	i_ptr = cast(*s32) j_ptr;

	num := cast(u64) i_ptr;
	i_ptr = cast(*s32) num;
};

real_casting :: fn () #test {
	float : f32 = 12.5f;
	j := cast(s64) float;
	assert(j == 12);

	double : f64 = 12.5;
	j = cast(s64) double;
	assert(j == 12);

	float = cast(f32) 12.5;
	assert(float == 12.5f);

	double = cast(f64) 12.5f;
	assert(double == 12.5);
};
