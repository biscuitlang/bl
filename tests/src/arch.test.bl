#private
expected_supported_archs :: [4]string_view.{
	"UNKNOWN",
	"X86_64",
	"AARCH64",
	"ARM64",
};

arch_all :: fn () #test {
	T :: cast(*TypeInfoEnum) typeinfo(Arch);
	test_eq(T.base_type, typeinfo(s32));
	test_eq(T.variants.len, expected_supported_archs.len);
	loop i := 0; i < T.variants.len; i += 1 {
		variant :: T.variants[i];
		test_eq(variant.value, i);
		test_eq(expected_supported_archs[i], variant.name);
	}
}

arch_current :: fn () #test {
	test_neq(ARCH, Arch.UNKNOWN);
}

expected_supported_platforms :: [4]string_view.{
	"UNKNOWN",
	"WINDOWS",
	"DARWIN",
	"LINUX",
};

platforms_all :: fn () #test {
	T :: cast(*TypeInfoEnum) typeinfo(Platform);
	test_eq(T.base_type, typeinfo(s32));
	test_eq(T.variants.len, expected_supported_platforms.len);
	loop i := 0; i < T.variants.len; i += 1 {
		variant :: T.variants[i];
		test_eq(variant.value, i);
		test_eq(expected_supported_platforms[i], variant.name);
	}
}

platform_current :: fn () #test {
	test_neq(PLATFORM, Platform.UNKNOWN);
}

expected_supported_env :: [4]string_view.{
	"UNKNOWN",
	"MSVC",
	"GNU",
	"MUSL",
};

env_all :: fn () #test {
	T :: cast(*TypeInfoEnum) typeinfo(Env);
	test_eq(T.base_type, typeinfo(s32));
	test_eq(T.variants.len, expected_supported_env.len);
	loop i := 0; i < T.variants.len; i += 1 {
		variant :: T.variants[i];
		test_eq(variant.value, i);
		test_eq(expected_supported_env[i], variant.name);
	}
}
