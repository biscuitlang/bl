#load "std/utils.bl"

#private
test_random_number_range_1 :: fn () #test {
	random_seed_time();
	loop i := 0; i < 1000; i += 1 {
		r :: random_number();
		test_true(r >= 0);
		test_true(r <= 1);
	}
}

test_random_number_range_2 :: fn () #test {
	random_seed_time();
	loop i := 0; i < 1000; i += 1 {
		r :: random_number(1, 99);
		test_gt(r, 0);
		test_lt(r, 100);
	}
}

flags_1 :: fn () #test {
	F1 : u32 : 1;
	F2 : u32 : 2;
	F3 : u32 : 4;
	f: u32;
	test_false(is_flag(f, F1));
	test_false(is_flag(f, F2));
	test_false(is_flag(f, F3));
	
	set_flag(&f, F1);
	test_true(is_flag(f, F1));
	test_false(is_flag(f, F2));
	test_false(is_flag(f, F3));
	
	set_flag(&f, F2);
	test_true(is_flag(f, F1));
	test_true(is_flag(f, F2));
	test_false(is_flag(f, F3));
	
	set_flag(&f, F3);
	test_true(is_flag(f, F1));
	test_true(is_flag(f, F2));
	test_true(is_flag(f, F3));
	
	clr_flag(&f, F3);
	test_true(is_flag(f, F1));
	test_true(is_flag(f, F2));
	test_false(is_flag(f, F3));

	clr_flag(&f, F2);
	test_true(is_flag(f, F1));
	test_false(is_flag(f, F2));
	test_false(is_flag(f, F3));

	clr_flag(&f, F1);
	test_false(is_flag(f, F1));
	test_false(is_flag(f, F2));
	test_false(is_flag(f, F3));

	set_flag(&f, F1 | F2);
	test_true(is_flag(f, F1));
	test_true(is_flag(f, F2));
	test_false(is_flag(f, F3));

	test_true(is_flag(f, F1 | F2));
	test_true(is_flag(f, F2));

	clr_flag(&f, F1 | F2);
	test_false(is_flag(f, F1));
	test_false(is_flag(f, F2));
	test_false(is_flag(f, F3));
}

flags_enum :: fn () #test {
	F :: enum #flags {
		F0 = 0;
		F1;
		F2;
		F3;
	};
	
	f: F;
	test_false(is_flag(f, F.F1));
	test_false(is_flag(f, F.F2));
	test_false(is_flag(f, F.F3));
	
	set_flag(&f, F.F1);
	test_true(is_flag(f, F.F1));
	test_false(is_flag(f, F.F2));
	test_false(is_flag(f, F.F3));
	
	set_flag(&f, F.F2);
	test_true(is_flag(f, F.F1));
	test_true(is_flag(f, F.F2));
	test_false(is_flag(f, F.F3));
	
	set_flag(&f, F.F3);
	test_true(is_flag(f, F.F1));
	test_true(is_flag(f, F.F2));
	test_true(is_flag(f, F.F3));
	
	clr_flag(&f, F.F3);
	test_true(is_flag(f, F.F1));
	test_true(is_flag(f, F.F2));
	test_false(is_flag(f, F.F3));

	clr_flag(&f, F.F2);
	test_true(is_flag(f, F.F1));
	test_false(is_flag(f, F.F2));
	test_false(is_flag(f, F.F3));

	clr_flag(&f, F.F1);
	test_false(is_flag(f, F.F1));
	test_false(is_flag(f, F.F2));
	test_false(is_flag(f, F.F3));
}

utf8_to_utf32_single_char_1 :: fn () #test {
	utf32, _,  err :: utf8_to_utf32_single_char("a");
	test_ok(err);
	test_eq(utf32, 0x00000061);
}

utf8_to_utf32_single_char_2 :: fn () #test {
	utf32, _,  err :: utf8_to_utf32_single_char("ó");
	test_ok(err);
	test_eq(utf32, 0x000000f3);
}

utf8_to_utf32_single_char_3 :: fn () #test {
	utf32, _,  err :: utf8_to_utf32_single_char("は");
	test_ok(err);
	test_eq(utf32, 0x0000306f);
}

utf8_to_utf32_test_1 :: fn () #test {
	buf: [..]u32;
	defer array_terminate(&buf);

	err :: utf8_to_utf32("Příliš žluťoučký kůň úpěl ďábelské ódy.", &buf);
	test_ok(err);

	UTF32_CHARS :: [39]u32.{
		0x00000050, 0x00000159, 0x000000ed, 0x0000006c, 0x00000069, 0x00000161, 0x00000020,
		0x0000017e, 0x0000006c, 0x00000075, 0x00000165, 0x0000006f, 0x00000075, 0x0000010d,
		0x0000006b, 0x000000fd, 0x00000020, 0x0000006b, 0x0000016f, 0x00000148, 0x00000020,
		0x000000fa, 0x00000070, 0x0000011b, 0x0000006c, 0x00000020, 0x0000010f, 0x000000e1,
		0x00000062, 0x00000065, 0x0000006c, 0x00000073, 0x0000006b, 0x000000e9, 0x00000020,
		0x000000f3, 0x00000064, 0x00000079, 0x0000002e };

	test_eq(buf.len, UTF32_CHARS.len);
	loop i := 0; i < buf.len; i += 1 {
		test_eq(buf[i], UTF32_CHARS[i]);
	}
}

utf32_to_utf8_single_char_1 :: fn () #test {
	buf := std.str_new();
	defer std.str_delete(&buf);

	err :: utf32_to_utf8_single_char(0x00000061, &buf);
	test_ok(err);
	test_eq(buf, "a");
}

utf32_to_utf8_single_char_2 :: fn () #test {
	buf := std.str_new();
	defer std.str_delete(&buf);

	err :: utf32_to_utf8_single_char(0x000000f3, &buf);
	test_ok(err);
	test_eq(buf, "ó");
}

utf32_to_utf8_single_char_3 :: fn () #test {
	buf := std.str_new();
	defer std.str_delete(&buf);

	err :: utf32_to_utf8_single_char(0x0000306f, &buf);
	test_ok(err);
	test_eq(buf, "は");
}

utf32_to_utf8_test_1 :: fn () #test {
	UTF32_CHARS :: [39]u32.{
		0x00000050, 0x00000159, 0x000000ed, 0x0000006c, 0x00000069, 0x00000161, 0x00000020,
		0x0000017e, 0x0000006c, 0x00000075, 0x00000165, 0x0000006f, 0x00000075, 0x0000010d,
		0x0000006b, 0x000000fd, 0x00000020, 0x0000006b, 0x0000016f, 0x00000148, 0x00000020,
		0x000000fa, 0x00000070, 0x0000011b, 0x0000006c, 0x00000020, 0x0000010f, 0x000000e1,
		0x00000062, 0x00000065, 0x0000006c, 0x00000073, 0x0000006b, 0x000000e9, 0x00000020,
		0x000000f3, 0x00000064, 0x00000079, 0x0000002e };

	buf := std.str_new();
	defer std.str_delete(&buf);

	err :: utf32_to_utf8(UTF32_CHARS, &buf);
	test_ok(err);
	test_eq(buf, "Příliš žluťoučký kůň úpěl ďábelské ódy.");
}
