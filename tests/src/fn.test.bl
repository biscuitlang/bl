#private
function_calls :: fn () #test {
	_1 :: fn () {
	};

	_2 :: fn (i: s32) s32 {
		return i;
	};

	_1();
	assert(_2(10) == 10);
};

implicit_functions_direct_call :: fn () #test {
	i := fn (i: s32, j: s32) s32 {
		return i * j;
	} (2, 3);

	assert(i == 6);

	fn () {
	} ();
};

function_pointers :: fn () #test {
	foo :: fn (v: s32) s32 {
		return v;
	};

	bar :: fn (v: s32) s32 {
		return v;
	};

	ptr := &foo;
	assert(ptr(10) == 10);

	ptr = &bar;
	assert(ptr(20) == 20);

	ptr2 := &fn () {};
	ptr2();
};

nested_function_pointers :: fn () #test {
	Foo :: struct {
		v_fn: *fn()
	};

	TestFn :: fn () {};

	foo := Foo.{};
	foo.v_fn = &TestFn;

	foo.v_fn();
};

multiple_return1 :: fn () #test {
	foo :: fn () (s32, s32) {
		return 10, 20;
	};
	a, b :: foo();
	test_eq(a, 10);
	test_eq(b, 20);
}

multiple_return2 :: fn () #test {
	foo :: fn () (s32, s32) {
		return 10, 20;
	};
	a :: foo();
	test_eq(a, 10);
}

multiple_return3 :: fn () #test {
	foo :: &fn () (s32, s32) {
		return 10, 20;
	};
	a, b :: foo();
	test_eq(a, 10);
	test_eq(b, 20);
}

multiple_return4 :: fn () #test {
	foo :: fn () (s32, s32) {
		return 10, 20;
	};

	bar :: fn () (s32, s32) {
		return foo();
	};

	a, b :: bar();
	test_eq(a, 10);
	test_eq(b, 20);
}

get_comptime :: fn () (s32, s32) #comptime {
	return 10, 20;
}

VA, VB :: get_comptime();
VC :: get_comptime();
_, VD :: get_comptime();

multiple_return_global :: fn () #test {
	test_eq(VA, 10);
	test_eq(VB, 20);
	test_eq(VC, 10);
	test_eq(VD, 20);
}

/*
gep_return_value :: fn () #test {
	foo :: fn () (a: s32, b: s32) {
		return 10, 20;
	};

	test_eq(foo().a, 10);
	test_eq(foo().b, 20);
}

gep_return_value2 :: fn () #test {
	foo :: fn () (s32, b: s32) {
		return 10, 20;
	};

	test_eq(foo()._0, 10);
	test_eq(foo().b, 20);
}

gep_return_value3 :: fn () #test {
	foo :: fn () (s32, s32) {
		return 10, 20;
	};

	test_eq(foo()._0, 10);
	test_eq(foo()._1, 20);
}

Foo :: struct {
	a: s32;
	b: s32;
}

DATA :: Foo.{ 10, 20 };

gep_return_value_ptr :: fn () #test {
	foo :: fn () *Foo {
		return &DATA;
	};

	test_eq(foo().a, 10);
	test_eq(foo().b, 20);
}
*/