#private

f1 :: fn (list: *string) {
	defer std.str_append(list, "B");
	std.str_append(list, "A");
}

f2 :: fn (list: *string) {
	defer std.str_append(list, "D");
	defer std.str_append(list, "C");
	defer std.str_append(list, "B");
	std.str_append(list, "A");
}

f3 :: fn (list: *string) {
	defer std.str_append(list, "G");
	defer std.str_append(list, "F");
	defer std.str_append(list, "E");
	std.str_append(list, "A");
	{
		defer std.str_append(list, "C");
		defer std.str_append(list, "B");
	}
	std.str_append(list, "D");
}

f4 :: fn (list: *string) {
	defer std.str_append(list, "H");
	defer std.str_append(list, "G");
	defer std.str_append(list, "F");

	fn (list: *string) {
		defer std.str_append(list, "B");
		defer std.str_append(list, "A");
	} (list);
	{
		defer std.str_append(list, "D");
		defer std.str_append(list, "C");
	}
	std.str_append(list, "E");
}

f5 :: fn (list: *string) {
	expr := true;
	defer std.str_append(list, "B");
	defer std.str_append(list, "A");
	if expr then return;

	defer std.str_append(list, "C");
}

f6 :: fn (list: *string) {
	expr := false;
	defer std.str_append(list, "C");
	defer std.str_append(list, "B");
	if expr then return;

	defer std.str_append(list, "A");
}

f7 :: fn (list: *string) {
	expr :: true;
	defer std.str_append(list, "B");
	defer std.str_append(list, "A");
	if expr then return;

	std.str_append(list, "X");
}

f8 :: fn (list: *string) {
	expr :: false;
	defer std.str_append(list, "C");
	defer std.str_append(list, "B");
	if expr then return;

	std.str_append(list, "A");
}

defer_test_1 :: fn () #test {
	list :: std.str_new();
	f1(&list);
	test_eq(list, "AB");
	std.str_delete(&list);
}

defer_test_2 :: fn () #test {
	list :: std.str_new();
	f2(&list);
	test_eq(list, "ABCD");
	std.str_delete(&list);
}

defer_test_3 :: fn () #test {
	list :: std.str_new();
	f3(&list);
	test_eq(list, "ABCDEFG");
	std.str_delete(&list);
}

defer_test_4 :: fn () #test {
	list :: std.str_new();
	f4(&list);
	test_eq(list, "ABCDEFGH");
	std.str_delete(&list);
}

defer_test_5 :: fn () #test {
	list :: std.str_new();
	f5(&list);
	test_eq(list, "AB");
	std.str_delete(&list);
}

defer_test_6 :: fn () #test {
	list :: std.str_new();
	f6(&list);
	test_eq(list, "ABC");
	std.str_delete(&list);
}

defer_test_7 :: fn () #test {
	list :: std.str_new();
	f7(&list);
	test_eq(list, "AB");
	std.str_delete(&list);
}

defer_test_8 :: fn () #test {
	list :: std.str_new();
	f8(&list);
	test_eq(list, "ABC");
	std.str_delete(&list);
}
