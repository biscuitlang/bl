#scope_private
#import "std/string"

f1 :: fn (list: *string) {
	defer str_append(list, "B");
	str_append(list, "A");
}

f2 :: fn (list: *string) {
	defer str_append(list, "D");
	defer str_append(list, "C");
	defer str_append(list, "B");
	str_append(list, "A");
}

f3 :: fn (list: *string) {
	defer str_append(list, "G");
	defer str_append(list, "F");
	defer str_append(list, "E");
	str_append(list, "A");
	{
		defer str_append(list, "C");
		defer str_append(list, "B");
	}
	str_append(list, "D");
}

f4 :: fn (list: *string) {
	defer str_append(list, "H");
	defer str_append(list, "G");
	defer str_append(list, "F");

	fn (list: *string) {
		defer str_append(list, "B");
		defer str_append(list, "A");
	} (list);
	{
		defer str_append(list, "D");
		defer str_append(list, "C");
	}
	str_append(list, "E");
}

f5 :: fn (list: *string) {
	expr := true;
	defer str_append(list, "B");
	defer str_append(list, "A");
	if expr then return;

	defer str_append(list, "C");
}

f6 :: fn (list: *string) {
	expr := false;
	defer str_append(list, "C");
	defer str_append(list, "B");
	if expr then return;

	defer str_append(list, "A");
}

f7 :: fn (list: *string) {
	expr :: true;
	defer str_append(list, "B");
	defer str_append(list, "A");
	if expr then return;

	str_append(list, "X");
}

f8 :: fn (list: *string) {
	expr :: false;
	defer str_append(list, "C");
	defer str_append(list, "B");
	if expr then return;

	str_append(list, "A");
}

f9 :: fn (list: *string) {
	expr := false;
	defer str_append(list, "C");
	defer str_append(list, "B");
	if expr then return;

	defer str_append(list, "A");
}

f10 :: fn (list: *string) {
	loop i := 0; i < 10; i += 1 {
		defer str_append(list, i);
		defer str_append(list, "A");
	}
}

f11 :: fn (list: *string) s32 {
	defer str_append(list, "B");
	defer str_append(list, "A");
	if true then return 0;

	defer str_append(list, "X");
	return 1;
}

defer_test_1 :: fn () #test {
	list: string;
	f1(&list);
	test_eq(list, "AB");
	str_terminate(&list);
}

defer_test_2 :: fn () #test {
	list: string;
	f2(&list);
	test_eq(list, "ABCD");
	str_terminate(&list);
}

defer_test_3 :: fn () #test {
	list: string;
	f3(&list);
	test_eq(list, "ABCDEFG");
	str_terminate(&list);
}

defer_test_4 :: fn () #test {
	list: string;
	f4(&list);
	test_eq(list, "ABCDEFGH");
	str_terminate(&list);
}

defer_test_5 :: fn () #test {
	list: string;
	f5(&list);
	test_eq(list, "AB");
	str_terminate(&list);
}

defer_test_6 :: fn () #test {
	list: string;
	f6(&list);
	test_eq(list, "ABC");
	str_terminate(&list);
}

defer_test_7 :: fn () #test {
	list: string;
	f7(&list);
	test_eq(list, "AB");
	str_terminate(&list);
}

defer_test_8 :: fn () #test {
	list: string;
	f8(&list);
	test_eq(list, "ABC");
	str_terminate(&list);
}

defer_test_9 :: fn () #test {
	list: string;
	f9(&list);
	test_eq(list, "ABC");
	str_terminate(&list);
}

defer_test_10 :: fn () #test {
	list: string;
	f10(&list);
	test_eq(list, "A0A1A2A3A4A5A6A7A8A9");
	str_terminate(&list);
}

defer_test_11 :: fn () #test {
	list: string;
	f11(&list);
	test_eq(list, "AB");
	str_terminate(&list);
}
