#scope_private
slices :: fn () #test {
	arr : [3]s32;

	arr[0] = 10;
	arr[1] = 20;
	arr[2] = 30;

	slice : []s32;
	slice.ptr = arr.ptr;
	slice.len = arr.len;

	assert(slice.ptr == &arr[0]);
	assert(slice.len == 3);
	assert(slice[0] == 10);
	assert(slice[1] == 20);
	assert(slice[2] == 30);
};

structures :: fn () #test {
	Foo :: struct {
		_1: u8;
		_2: s32;
		_3: *s32;
		_4: [10] s32
	};

	int := 10;

	foo : Foo;
	foo._1 = 10;
	foo._2 = 666;
	foo._3 = &int;
	foo._4[0] = 10;

	assert(foo._1 == 10);
	assert(foo._2 == 666);
	assert(foo._3 != null);
	assert((foo._4)[0] == 10);
};

implicit_struct :: fn () #test {
	foo : struct {
		_1: u8;
		_2: s32;
		_3: *s32;
		_4: [10] s32
	};

	int := 10;

	foo._1 = 10;
	foo._2 = 666;
	foo._3 = &int;
	foo._4[0] = 10;

	assert(foo._1 == 10);
	assert(foo._2 == 666);
	assert(foo._3 != null);
	assert((foo._4)[0] == 10);
};

nested_struct :: fn () #test {
	Foo :: struct {
		i: s32;
		j: s32
	};

	Bar :: struct {
		foo: Foo
	};

	bar : Bar;
	bar.foo.i = 10;
	bar.foo.j = 20;

	assert((bar.foo).i == 10);
	assert((bar.foo).j == 20);
};

structure_initialization :: fn () #test {
	Foo :: struct {
		i: s32;
		j: s32
	};

	{
		foo := Foo.{};
		assert(foo.i == 0); 
		assert(foo.j == 0); 
	}

	{
		i := 10;
		j := 20;
		foo := Foo.{ i, j };
		assert(foo.i == i); 
		assert(foo.j == j); 
	}
};

constant_string :: fn () #test {
	_1 := "hello";
	assert(_1.ptr != null);
	assert(_1.len == 5);
};

Foo :: struct {
	foo: *Foo;
	func: *fn (i: *Foo);
};

pointer_to_self :: fn () #test {
	Bar :: struct {
		bar: *Bar;
		func: *fn (i: *Bar);
	};
	
	foo: Foo;
	foo.foo = &foo;

	bar: Bar;
}

PointerToSelfNestedA :: struct {
	func: PointerToSelfNestedB;
	bar: *PointerToSelfNestedA;
};
	
PointerToSelfNestedB :: *fn(i: *PointerToSelfNestedA);

pointer_to_self_nested :: fn () #test {
	Bar :: struct {
		bar: *Bar;
		func: *fn (i: *Bar);
	};
	
	foo: Foo;
	foo.foo = &foo;

	bar: Bar;
}

tuple1 :: fn () #test {
	Tuple :: struct { s32 };
	v: Tuple;
	test_eq(v._0, 0);
}

tuple2 :: fn () #test {
	Tuple :: struct { s32; s32 };
	v: Tuple;
	test_eq(v._0, 0);
	test_eq(v._1, 0);
}

tuple3 :: fn () #test {
	Tuple :: struct { s32; s32 };
	v: Tuple #noinit;
	v._0 = 10;
	v._1 = 20;
	test_eq(v._0, 10);
	test_eq(v._1, 20);
}

hybrid1 :: fn () #test {
	Tuple :: struct { s32; i: s32 };
	v: Tuple #noinit;
	v._0 = 10;
	v.i = 20;
	test_eq(v._0, 10);
	test_eq(v.i, 20);
}

size :: fn () #test {
	T1 :: struct { _: s32; _: s32 };
	T2 :: struct { a: s32; b: s32 };
	test_eq(sizeof(T1), sizeof(T2));
}
