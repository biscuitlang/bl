#private

swap_test_1 :: fn () #test {
	a := 10;
	b := 20;
	swap(&a, &b);
	test_eq(a, 20);
	test_eq(b, 10);
}

swap_test_2 :: fn () #test {
	Foo :: struct { a: s64; b: s64; c: s64; };
	
	a := Foo.{10, 20, 30};
	b := Foo.{30, 20, 10};
	swap(&a, &b);
	test_eq(a.a, 30);
	test_eq(a.b, 20);
	test_eq(a.c, 10);
	
	test_eq(b.a, 10);
	test_eq(b.b, 20);
	test_eq(b.c, 30);
}

alloc_test_1 :: fn () #test {
	v :: alloc(64);
	defer free(v);
	test_not_null(v);
}

free_test_1 :: fn () #test {
	free(null);
}

range_test_1 :: fn () #test {
	arr: [10]s32;
	r :: slice_range(arr, 0);
	test_eq(r.ptr, arr.ptr);
	test_eq(r.len, arr.len);
}

range_test_2 :: fn () #test {
	arr: [10]s32;
	r :: slice_range(arr, 9);
	test_eq(r.len, 1);
}

range_test_3 :: fn () #test {
	arr :: [3]s32.{1, 2, 3};
	r :: slice_range(arr, 0, 1);
	test_eq(r.len, 1);
	test_eq(r[0], 1);
}

range_test_4 :: fn () #test {
	arr :: [5]s32.{1, 2, 3, 4, 5};
	r :: slice_range(arr, 1, arr.len-1);
	test_eq(r.len, 3);
	test_eq(r[0], 2);
	test_eq(r[1], 3);
	test_eq(r[2], 4);
}

range_test_5 :: fn () #test {
	arr :: [5]s32.{ 1, 2, 3, 4, 5};
	r :: slice_range(arr, 0, arr.len);
	test_eq(r.len, 5);
	test_eq(r[0], 1);
	test_eq(r[1], 2);
	test_eq(r[2], 3);
	test_eq(r[3], 4);
	test_eq(r[4], 5);
}

zeromem_test_1 :: fn () #test {
	i: s32 = 10;
	zeromem(auto &i, sizeof(i));
	test_eq(i, 0);
}


zeromem_test_2 :: fn () #test {
	arr: [100]s32 #noinit;
	arr[0] = 10;
	arr[99] = 20;
	zeromem(auto &arr, sizeof(arr));
	loop i := 0; i < arr.len; i += 1 {
		test_eq(arr[i], 0);
	}
}

zeromem_test_3 :: fn () #test {
	arr: [100]u8 #noinit;
	arr[0] = 10;
	arr[99] = 20;
	zeromem(auto &arr, sizeof(arr));
	loop i := 0; i < arr.len; i += 1 {
		test_eq(arr[i], 0);
	}
}

zeromem_test_4 :: fn () #test {
	Data :: struct {
		arr1: [100]u32;
		i: u8;
		arr2: [100]u16;
	};

	data: Data #noinit;
	data.arr1[0] = 10;
	data.arr2[0] = 20;
	data.i = 100;
	zeromem(auto &data, sizeof(data));
	loop i := 0; i < data.arr1.len; i += 1 {
		test_eq(data.arr1[i], 0);
		test_eq(data.arr2[i], 0);
	}
	test_eq(data.i, 0);
}

slice_on_heap :: fn () #test {
	Data :: struct {
		arr1: [100]u32;
		i: s32;
		arr2: [100]u16;
	};

	slice: []Data;
	alloc_slice(&slice, 10);
	defer free_slice(&slice);
	test_eq(slice.len, 10);
	test_neq(slice.ptr, null);
	loop i := 0; i < slice.len; i += 1 {
		test_eq(slice[i].i, 0);
	}

	loop i := 0; i < slice.len; i += 1 {
		slice[i].i = i;
	}
}

new_test_1 :: fn () #test {
	s32_ptr :: new(s32);
	test_not_null(s32_ptr);
	(@s32_ptr) = 10;
	test_eq(@s32_ptr, 10);
	free(auto s32_ptr);
}

Foo :: struct {
	a: s32;
	b: s32;
}

new_test_2 :: fn () #test {
	foo_ptr :: new(Foo);
	test_not_null(foo_ptr);
	foo_ptr.a = 10;
	foo_ptr.b = 20;
	test_eq(foo_ptr.a, 10);
	test_eq(foo_ptr.b, 20);
	free(auto foo_ptr);
}
