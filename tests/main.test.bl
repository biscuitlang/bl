#import "std/test"
#import "std/print"
#import "std/string"

debug_allocator: DebugAllocator;

main :: fn () s32 {
	debug_allocator = debug_allocator_make(application_context.allocator);
	defer debug_allocator_release(&debug_allocator);
	application_context.allocator = &debug_allocator;
	application_context.print_log_fn = &my_logger;

	//debug_allocator_break(&debug_allocator, 3);

	colors := true;
	if command_line_arguments.len > 1 && str_match(command_line_arguments[1], "--no-color") then colors = false;

	result := test_run(false, colors);

	if dump_memory_leaks(&debug_allocator) > 0 {
		result += 1;
	}
	return result;
}

#scope_private

#import "std/debug_allocator"
#import "std/pool"

io :: #import "std/io";

my_logger :: fn (kind: PrintLogKind, file: string_view, line: s32, format: string_view, args: ...) {
	output_stream := os_stdout();
	buf: [PRINT_MAX_LENGTH]u8 #noinit;
	tag: string_view;
	w: s32;
	switch kind {
		PrintLogKind.MESSAGE { return; }
		PrintLogKind.INFO    { return; }
		PrintLogKind.WARNING { return; }
		PrintLogKind.ERROR   { tag = "error";  output_stream = os_stderr(); }
		PrintLogKind.ASSERT  { tag = "assert"; output_stream = os_stderr(); }
		PrintLogKind.PANIC   { tag = "panic";  output_stream = os_stderr(); }
	}
	if file.len > 0 {
		w = bprint(slice_range(buf, w), "% [%:%]: ", tag, file, line);
	} else {
		w = bprint(buf, "%: ", tag);
	}
	w += bprint(slice_range(buf, w), format, args);
	w += bprint(slice_range(buf, w), "\n");
	io.write(output_stream, buf.ptr, auto w);
};
