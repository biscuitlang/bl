
/* CURRENT TODO
rename:
#scope   -> #scope name

#public  -> #scope_public  - publicly exported
#module  -> #scope_module  - available inside current module
#private -> #scope_private - available inside current file

module :: fn (target: *Target) #module_entry {
    add_unit(target, "test.bl");
}

baz :: #import "std/string";

*/

#load "test2.bl"

main :: fn () s32 {
	ahoj.foo();
	ahoj.imprivate();
	return 0;
}

/* BUG

print_number_or_bool :: fn (v: Any) {
	if v.type_info.kind == TypeKind.INT {
		print_log("Number: %", @(cast(*s32)v.data)); // HERE!!!
	} else if v.type_info.kind == TypeKind.BOOL {
		v_bool :: @(cast(*bool)v.data);
		print_log("Boolean: %", if v_bool then "TRUE" else "FALSE");
	}
};

*/

/*
enum_variants_to_string_list :: fn (TEnum: type #comptime) [enum_count(TEnum)]string_view #comptime {
	assert(is_enum(TEnum));
	tmp: [enum_count(TEnum)]string_view #noinit;
	info :: cast(*TypeInfoEnum) typeinfo(TEnum);
	loop i := 0; i < tmp.len; i += 1 {
		using std;
		name :: str_new(info.variants[i].name);
		str_lower(&name);
		str_replace_all(&name, '_', '-');

		tmp[i] = name;
	}
	return tmp;
}
*/


/*

// =================================================================================================
// x64 TESTING BEGIN
// =================================================================================================

#import "libc"
#import "os/windows"

/// Builtin string slice.
string_view :: []u8;

TypeKind :: enum #compiler {
	TYPE    = 1;
	VOID    = 2;
	INT     = 3;
	REAL    = 4;
	FN      = 5;
	PTR     = 6;
	BOOL    = 7;
	ARRAY   = 8;
	STRUCT  = 9;
	ENUM    = 10;
	NULL    = 11;
	STRING  = 12;
	FN_GROUP = 16;
};

TypeInfo :: struct #compiler {
	kind: TypeKind;
	size_bytes: usize;
	alignment: usize;
};

TypeInfoInt :: struct #base TypeInfo #compiler {
	bit_count: s32;
	is_signed: bool;
};

TypeInfoReal :: struct #base TypeInfo  #compiler {
	bit_count: s32;
}

TypeInfoFn :: struct #base TypeInfo #compiler {
	args: []TypeInfoFnArg;
	ret_type: *TypeInfo;
	is_vargs: bool;
};

TypeInfoFnGroup :: struct #base TypeInfo #compiler {
	variants: []*TypeInfoFn;
}

TypeInfoPtr :: struct #base TypeInfo #compiler {
	pointee_type: *TypeInfo
};

TypeInfoArray :: struct #base TypeInfo #compiler {
	name: string_view;
	elem_type: *TypeInfo;
	len: s64
};

TypeInfoStruct :: struct #base TypeInfo #compiler {
	name: string_view;
	members: []TypeInfoStructMember;
	is_slice: bool;
	is_union: bool;
	is_dynamic_array: bool;
};

TypeInfoEnum :: struct #base TypeInfo #compiler {
	name: string_view;
	base_type: *TypeInfo;
	variants: []TypeInfoEnumVariant;
	is_flags: bool;
};

TypeInfoVoid :: struct #base TypeInfo #compiler {
};

TypeInfoNull :: struct #base TypeInfo #compiler {
};

TypeInfoString :: struct #base TypeInfo #compiler {
};

TypeInfoType :: struct #base TypeInfo  #compiler {
};

TypeInfoBool :: struct #base TypeInfo #compiler {
};

TypeInfoStructMember :: struct #compiler {
	name: string_view;
	base_type: *TypeInfo;
	offset_bytes: s32;
	index: s32;
	tag: u64;
	is_base: bool;
};

TypeInfoEnumVariant :: struct #compiler {
	name: string_view;
	value: s64
};

TypeInfoFnArg :: struct #compiler {
	name: string_view;
	base_type: *TypeInfo
};

Any :: struct #compiler {
	type_info: *TypeInfo;
	data: *u8
};

CodeLocation :: struct #compiler {
	file: string_view;
	line: s32;
	function: string_view;
	hash: u32;
}

_CRT_INIT :: fn () win32.BOOL #extern;
my_function :: fn (a: s32, b: s32, c: s32, d: s32, e: s32, f: s32) #extern;
add_numbers :: fn (a: s32, b: s32) s32 #extern;
print_number :: fn (n: s32) #extern;
print_number2 :: fn (n: s64) #extern;
print_address :: fn (v: u64) #extern;
print_string :: fn (len: s64, ptr: *u8) #extern;
assertion_message :: fn (len: s64, file: *u8, line: s32) #extern;
print_string2 :: fn (s: string_view) #extern;

Foo :: struct {
	i: s32;
	j: s32;
}

Bar :: struct {
	i: s32;
	j: s32;
}

__os_start :: fn () #entry {
	if _CRT_INIT() == 0 {
		C.exit(1);
	}

	test_global_slice();
	test_string();
	test_struct_members();
	test_compounds();
	test_function_calls();
	use_global_number();
	test_looping(10);
	test_array_int();
	test_array_ptr();
	test_casting();
	test_unop();
	test_conditions();
	test_condition_assign();
	test_glob_addrof();
	test_out_arg();
	test_global_ptr_to_global();
	test_global_compound();
	test_fn_ptr();
	test_glob_fn_ptr_in_compound();
	test_pass_string_to_function();
	test_function_calls2();
	test_passing_source_location();
	test_nested_global_compound();
	test_switch();
	test_type_info();
	test_to_any();
	test_vargs();
	test_vargs2();
	test_vargs3();
	test_compound_arg();
	test_call_polymorph();
	test_return_values();
	test_multireturn();
	test_multireturn2();
	test_multireturn3();
	test_return_value_unroll();
	test_local_compound_with_relocation();
	test_global_array();

	print_string2("Hello!\n");

	done :: "------------\n!!! DONE !!!\n------------";
	print_string(done.len, done.ptr);
	C.exit(0);
}

assert :: fn (expr: bool, loc := #call_location) {
	if expr == false {
		assertion_message(loc.file.len, loc.file.ptr, loc.line);
	}
}

MY_ARRAY :: [_]s32.{ 10, 20, 30 };
MY_ARRAY2: [8]u8;

test_global_array :: fn () {
	assert(MY_ARRAY[0] == 10);
	assert(MY_ARRAY[1] == 20);
	assert(MY_ARRAY[2] == 30);
	assert(MY_ARRAY.len == 3);
	assert(MY_ARRAY2.len == 8);
	assert(MY_ARRAY2[0] == 0);
	assert(MY_ARRAY2[1] == 0);
	assert(MY_ARRAY2[2] == 0);
	// assert(MY_ARRAY2.ptr);
}

test_local_compound_with_relocation :: fn () {
	Foo :: struct { a: s32; b: string_view; };
	foo :: Foo.{ 10, "String it is!\n" };
	assert(foo.a == 10);
	assert(foo.b.len == 14);
	print_string2(foo.b);
}

test_return_values :: fn () {
	my_func :: fn () s32 {
		return 10;
	};

	print_number(my_func());
}

test_type_info :: fn () {
	{
		i :: typeinfo(s32);
		print_number(cast(s32)i.kind);
		print_number(cast(s32)i.size_bytes);
		print_number(cast(s32)i.alignment);
	}
	{
		i :: cast(*TypeInfoPtr)typeinfo(*s32);
		print_number(cast(s32)i.kind);
		print_number(cast(s32)i.size_bytes);
		print_number(cast(s32)i.alignment);

		i2 :: i.pointee_type;
		print_number(cast(s32)i2.kind);
		print_number(cast(s32)i2.size_bytes);
		print_number(cast(s32)i2.alignment);
	}
}

test_vargs :: fn () {
	my_func :: fn (args: ...s32) {
		print_number2(args.len);
		print_address(auto args.ptr);
		loop i := 0; i < args.len; i += 1 {
			print_number(args[i]);
		}
	};

	a := 10;
	b := 20;

	my_func(a, b);
}

Data :: struct { a: s32; b: s32 };

test_return_value_unroll :: fn () {
	my_func :: fn () (s32, s32) {
		return 10, 20;
	};

	a, b :: my_func();
	assert(a == 10);
	assert(b == 20);
}

test_multireturn3 :: fn () {
	my_func :: fn (n: s32) Data {
		return Data.{ n, 20 };
	};

	result :: my_func(10);
	assert(result.a == 10);
	assert(result.b == 20);

	my_func2 :: fn (a: s32, b: s32) Data {
		return Data.{ a, b };
	};

	result2 :: my_func2(10, 20);
	assert(result2.a == 10);
	assert(result2.b == 20);

	my_func3 :: fn (a: s32, b: s32, c: s32) Data {
		assert(c == 30);
		return Data.{ a, b };
	};

	result3 :: my_func3(10, 20, 30);
	assert(result3.a == 10);
	assert(result3.b == 20);

	my_func4 :: fn (a: s32, b: s32, c: s32, d: s32) Data {
		assert(c == 30);
		assert(d == 40);
		return Data.{ a, b };
	};

	result4 :: my_func4(10, 20, 30, 40);
	assert(result4.a == 10);
	assert(result4.b == 20);
}

test_multireturn2 :: fn () {
	my_func :: fn () Data {
		return Data.{ 10, 20 };
	};

	result :: my_func();
	assert(result.a == 10);
	assert(result.b == 20);
}

test_multireturn :: fn () {
	my_func :: fn () string_view {
		return "Nice!\n";
	};

	result :: my_func();
	print_string2(result);
}

test_call_polymorph :: fn () {
	my_func :: fn (v: ?T) {
		print_number(v);
	};
	my_func(10);
}

test_compound_arg :: fn () {
	my_func :: fn (v: []s32) {
		loop i := 0; i < v.len; i += 1 {
			print_number(v[i]);
			assert(v[i] == i);
		}
	};

	buf :: [4]s32.{ 0, 1, 2, 3 };
	my_func(buf); // Convert array to slice.
}

test_vargs2 :: fn () {
	my_func :: fn (args: ...) {
		print_number2(args.len);
		print_address(auto args.ptr);
		loop i := 0; i < args.len; i += 1 {
			print_number(auto args[i].type_info.kind);
		}
	};

	a := 10;
	b := 20;

	my_func(a, b);
}

test_vargs3 :: fn () {
	my_func :: fn (args: ...) {
		print_number2(args.len);
	};

	my_func();
}

test_to_any :: fn () {
	my_func :: fn (a: Any) {
		print_number(cast(s32)a.type_info.kind);
	};

	my_func(10);

	n := 10;
	my_func(n);
}

test_switch :: fn () {
	n := 5;
	switch n {
		1 { print_number(n); }
		2 { print_number(n); }
		3 { print_number(n); }
		default {
			print_string2("Default!\n");
		};
	}

	switch n {
		1 { print_number(n); }
		2 { print_number(n); }
		3 { print_number(n); }
	}

	switch n {
		10 { print_number(n); }
		20 { print_number(n); }
		5 { print_number(n); }
		3 { print_number(n); }
		default;
	}

	switch n {
		10 { print_number(n); }
		20 { print_number(n); }
		5 { print_number(n); }
		3 { print_number(n); }
	}
}

Hoo :: struct {
	a: s32;
	b: s32;
}

Woo :: struct {
	hoo: Hoo;
}

WOO := Woo.{ hoo = Hoo.{ 10, 20 } };

test_nested_global_compound :: fn () {
	assert(WOO.hoo.a == 10);
	assert(WOO.hoo.b == 20);
}

test_passing_source_location :: fn (loc := #call_location) {
	my_func :: fn (file: string_view, line: s32) {
		print_string2(file);
		print_number(line);
	};
	my_func(loc.file, loc.line);
}

test_pass_string_to_function :: fn () {
	my_func :: fn (str: string_view) {
		print_string2(str);
	};

	my_func("This is passed string!\n");
}

FOO_DATA :: 10;
FOO_DATA_PTR :: &FOO_DATA;

test_global_ptr_to_global :: fn () {
	assert(FOO_DATA_PTR);
	assert(@FOO_DATA_PTR == 10);
}

Doo :: struct {
	a: *s32;
}

DOO_DATA :: 10;
DOO :: Doo.{ a = &DOO_DATA };

test_global_compound :: fn () {
	assert(DOO.a);
	assert(@DOO.a == 10);
}

test_fn_ptr :: fn () {
	my_func :: fn () {
		good :: "NICE!\n";
		print_string(good.len, good.ptr);
	};

	ptr :: &my_func;
	ptr();
}

Goo :: struct {
	func_1: *fn();
	func_2: *fn();
}

goo_func_1 :: fn () {
	good :: "Hello from the function called from the globaly set pointer!\n";
	print_string(good.len, good.ptr);
}

goo_func_2 :: fn () {
	good :: "Hello from another the function called from the globaly set pointer!\n";
	print_string(good.len, good.ptr);
}

GOO :: Goo.{
	func_1 = &goo_func_1,
	func_2 = &goo_func_2
};

test_glob_fn_ptr_in_compound :: fn () {
	GOO.func_1();
	GOO.func_2();
}

test_out_arg :: fn () {
	update_arg :: fn (n: *s32) {
		@n = 10;
	};

	n := 0;
	update_arg(&n);
	assert(n == 10);

	update_arg2 :: fn (buf: *[]string_view) {
		buf.len = 20;
		buf.ptr = null;
	};

	buf: []string_view;
	update_arg2(&buf);
	assert(buf.len == 20);
	assert(!buf.ptr);
}

GLOBAL := 10;
test_glob_addrof :: fn () {
	addr :: &GLOBAL;
	assert(addr);
	assert(@addr == 10);
}

test_condition_assign :: fn () {
	v := 10;
	j := 20;
	n := v == j;
	assert(!n);
	n = v != j;
	assert(n);
	n = v < j;
	assert(n);
	n = v > j;
	assert(!n);
}

test_conditions :: fn () {
	good :: "OK!\n";
	bad :: "INVALID!\n";

	v := 10;
	j := 20;
	if v == j {
		print_string(bad.len, bad.ptr);
	} else {
		print_string(good.len, good.ptr);
	}

	if v != j {
		print_string(good.len, good.ptr);
	} else {
		print_string(bad.len, bad.ptr);
	}

	if v < j {
		print_string(good.len, good.ptr);
	} else {
		print_string(bad.len, bad.ptr);
	}

	if v > j {
		print_string(bad.len, bad.ptr);
	} else {
		print_string(good.len, good.ptr);
	}
}

test_unop :: fn () {
	good :: "OK!\n";

	{
		n := 10;
		m := -n;
		assert(m == -10);
		print_number(m);
	}

	b := false;
	if !b {
		print_string(good.len, good.ptr);
	} else {
		assert(false);
	}

	b = !b;
	if b {
		print_string(good.len, good.ptr);
	} else {
		assert(false);
	}
}

test_array_int :: fn () {
	arr: [4]s32;
	h : s64 = -100;
	print_number(auto h);

	arr[0] = 10;
	arr[1] = 20;
	arr[2] = 30;
	arr[3] = 40;
	assert(arr[0] == 10);
	assert(arr[1] == 20);
	assert(arr[2] == 30);
	assert(arr[3] == 40);

	n : s64 = 0;

	arr[n] = 100;
	n += 1;
	arr[n] = 200;
	n += 1;
	arr[n] = 300;
	n += 1;
	arr[n] = 400;

	assert(arr[0] == 100);
	assert(arr[1] == 200);
	assert(arr[2] == 300);
	assert(arr[3] == 400);

	print_number(arr[n]);
	print_number(arr[n] + 666);
}

test_array_ptr :: fn () {
	arr: []*s32;

	a, b, c, d, e, f: s32;
	// @Incomplete: Ocupy too much registers!
	arr_data :: [_]*s32.{ &a, &b, &c, &d, &e, &f };

	print_address(auto arr_data[0]);
	print_address(auto arr_data[1]);
	print_address(auto arr_data[2]);
	print_address(auto arr_data[3]);

	arr = arr_data;
	print_address(auto arr[0]);
	print_address(auto arr[1]);
	print_address(auto arr[2]);
	print_address(auto arr[3]);
}

command_line_arguments: []string_view;

test_global_slice :: fn () {
	command_line_arguments.len = 10;
	print_number2(command_line_arguments.len);

	my_len := 10;
	command_line_arguments.len = my_len;
	command_line_arguments.ptr = null;
	print_number2(command_line_arguments.len);
}

test_string :: fn () {
	str :: "Hello!!!\n";
	print_string(str.len, str.ptr);

	str2: string_view;
	str2 = str;
	print_string(str2.len, str2.ptr);
}

test_struct_members :: fn () {
	foo: Foo;
	foo.i = 10;
	foo.j = 20;
	print_number(foo.i + 30);
	print_number(foo.j);
}

test_compounds :: fn () {
	bar := Bar.{ j = 888, i = 999 };
	print_number(bar.i);
	print_number(bar.j);

	a := 10;
	b := 20;
	c := 30;

	bar = Bar.{ i = a, j = b + c };
	print_number(bar.i);
	print_number(bar.j);
}

test_slice :: fn () {
	martin := [_]s32.{ 10, 20, 30 };
	loop i := 0; i < martin.len; i += 1 {
		print_number(martin[i]);
	}
	martin_slice : []s32 = martin;
	print_number(martin_slice[0]);
	print_number(martin_slice[1]);
	print_number(martin_slice[2]);
	loop i := 0; i < martin.len; i += 1 {
		print_number(martin_slice[i]);
	}
}

test_casting :: fn () {
	{
		num :: -10;

		c: s8;
		c = cast(s8) num;
		print_number(auto c);

		w: s16;
		w = cast(s16) num;
		print_number(auto w);

		dw: s32;
		dw = cast(s32) num;
		print_number(auto dw);
	}
	{
		num : u32 = 10;

		c: u8;
		c = cast(u8) num;
		print_number(auto c);

		w: u16;
		w = cast(u16) num;
		print_number(auto w);

		dw: u32;
		dw = cast(u32) num;
		print_number(auto dw);

		qw: u64;
		qw = cast(u64) num;
	}
}

test_function_calls :: fn () {
	a := 10;
	b := 20;
	c := 30;
	d := 40;
	e := 50;
	f := 60;

	my_function(10, 20, 30, 40, 50, 60);
	my_function(10, 20, a + b, d, 50, d + b);
	my_function(a, b, c, d, e, f);

	print_number(add_numbers(10, 20));
	print_number(add_numbers(10, -20));
	print_number(mul_numbers(10, 20));
}

test_function_calls2 :: fn () {
	my_fn :: fn (a: s32, b: s32, c: s32, d: s32, e: s32, f: s32) {
		assert(a == 10);
		assert(b == 20);
		assert(c == 30);
		assert(d == 40);
		assert(e == 50);
		assert(f == 60);
	};
	my_fn(10, 20, 30, 40, 50, 60);

	a := 10;
	b := 20;
	c := 30;
	d := 40;
	e := 50;
	f := 60;
	my_fn(a, b, c, d, e, f);

	my_fn2 :: fn (a: s32, b: s32, c: s32, d: s32, e: s32, str: string_view) {
		assert(a == 10);
		assert(b == 20);
		assert(c == 30);
		assert(d == 40);
		assert(e == 50);
		print_string2(str);
	};
	my_fn2(10, 20, 30, 40, 50, "This is string passed via stack!\n");
}

test_looping :: fn (n: s32) {
	loop i := 0; i < n; i += 1 {
		print_number(i);
	}
}

mul_numbers :: fn (a: s32, b: s32) s32 {
	return a * b;
}

my_number := 666;

use_global_number :: fn () {
	print_number(my_number);
	my_number = 20;
	print_number(my_number);
}

// =================================================================================================
// x64 TESTING END
// =================================================================================================

*/

/*

if !settings.modal_ctrl && (mods & MOD_CONTROL) == MOD_CONTROL {
	control_pressed = true;
}

// To examples!!!
// To examples!!!
// To examples!!!

#import "std/fs"

text_file_to_stack :: fn (filename: string_view) string_view #comptime {
	using std;
	stream, open_err :: open_file(filename);
	defer close_file(&stream);
	if open_err {
		panic(open_err);
	}
	str := str_new();
	read_err :: read_string(&stream, &str);
	if read_err {
		panic(read_err);
	}
	return str;
}

DATA :: text_file_to_heap("data.txt");

main :: fn() s32 {
	print("%\n", DATA);
	return 0;
}

*/
