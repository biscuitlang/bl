#load "std/debug.bl"
#load "std/utils.bl"

GLbitfield :: u32;
GLboolean  :: u8;
GLbyte     :: s8;
GLclampf   :: f32;
GLenum     :: u32;
GLfloat    :: f32;
GLint      :: s32;
GLshort    :: s16;
GLsizei    :: s32;
GLubyte    :: u8;
GLuint     :: u32;
GLushort   :: u16;
GLvoid     :: u8;
GLchar     :: u8;
GLintptr   :: *GLint;
GLsizeiptr   :: *GLsizei;

GL_TRUE  :: 1;
GL_FALSE :: 0;

GL_MAJOR_VERSION : u32 : 0x821B;
GL_MINOR_VERSION : u32 : 0x821C;

GL_VENDOR     : u32 : 0x1F00;
GL_RENDERER   : u32 : 0x1F01;
GL_VERSION    : u32 : 0x1F02;
GL_EXTENSIONS : u32 : 0x1F03;

GL_DONT_CARE                      : u32 : 0x1100;
GL_FASTEST                        : u32 : 0x1101;
GL_NICEST                         : u32 : 0x1102;
GL_TEXTURE_BINDING_3D             : u32 : 0x806A;
GL_TEXTURE_3D                     : u32 : 0x806F;
GL_TEXTURE_2D_ARRAY               : u32 : 0x8C1A;
GL_MAX_3D_TEXTURE_SIZE            : u32 : 0x8073;
GL_NEVER                          : u32 : 0x0200;
GL_LESS                           : u32 : 0x0201;
GL_EQUAL                          : u32 : 0x0202;
GL_LEQUAL                         : u32 : 0x0203;
GL_GREATER                        : u32 : 0x0204;
GL_NOTEQUAL                       : u32 : 0x0205;
GL_GEQUAL                         : u32 : 0x0206;
GL_ALWAYS                         : u32 : 0x0207;
GL_COMPRESSED_ALPHA               : s32 : 0x84E9;
GL_COMPRESSED_LUMINANCE           : s32 : 0x84EA;
GL_COMPRESSED_LUMINANCE_ALPHA     : s32 : 0x84EB;
GL_COMPRESSED_INTENSITY           : s32 : 0x84EC;
GL_COMPRESSED_RGB                 : s32 : 0x84ED;
GL_COMPRESSED_RGBA                : s32 : 0x84EE;
GL_TEXTURE_COMPRESSION_HINT       : s32 : 0x84EF;
GL_TEXTURE_COMPRESSED_IMAGE_SIZE  : s32 : 0x86A0;
GL_TEXTURE_COMPRESSED             : s32 : 0x86A1;
GL_NUM_COMPRESSED_TEXTURE_FORMATS : s32 : 0x86A2;
GL_COMPRESSED_TEXTURE_FORMATS     : s32 : 0x86A3;

GL_NO_ERROR          : u32 : 0;
GL_INVALID_ENUM      : u32 : 0x0500;
GL_INVALID_VALUE     : u32 : 0x0501;
GL_INVALID_OPERATION : u32 : 0x0502;
GL_STACK_OVERFLOW    : u32 : 0x0503;
GL_STACK_UNDERFLOW   : u32 : 0x0504;
GL_OUT_OF_MEMORY     : u32 : 0x0505;

GL_POINT             : u32 : 0x1B00;
GL_LINE              : u32 : 0x1B01;
GL_FILL              : u32 : 0x1B02;

GL_NONE              : u32 : 0;
GL_FRONT_LEFT        : u32 : 0x0400;
GL_FRONT_RIGHT       : u32 : 0x0401;
GL_BACK_LEFT         : u32 : 0x0402;
GL_BACK_RIGHT        : u32 : 0x0403;
GL_FRONT             : u32 : 0x0404;
GL_BACK              : u32 : 0x0405;
GL_LEFT              : u32 : 0x0406;
GL_RIGHT             : u32 : 0x0407;
GL_FRONT_AND_BACK    : u32 : 0x0408;
GL_AUX0              : u32 : 0x0409;
GL_AUX1              : u32 : 0x040A;
GL_AUX2              : u32 : 0x040B;
GL_AUX3              : u32 : 0x040C;

GL_NEAREST : u32 : 0x2600;
GL_LINEAR  : u32 : 0x2601;
GL_NEAREST_MIPMAP_NEAREST :: 0x2700;
GL_NEAREST_MIPMAP_LINEAR  :: 0x2702;
GL_LINEAR_MIPMAP_NEAREST  :: 0x2701;
GL_LINEAR_MIPMAP_LINEAR	  :: 0x2703;

GL_CLAMP_TO_EDGE     : u32 : 0x812F;
GL_CLAMP_TO_BORDER   : u32 : 0x812D;
GL_REPEAT            : u32 : 0x2901;

GL_TEXTURE_MAG_FILTER : u32 : 0x2800;
GL_TEXTURE_MIN_FILTER : u32 : 0x2801;
GL_TEXTURE_WRAP_S     : u32 : 0x2802;
GL_TEXTURE_WRAP_T     : u32 : 0x2803;
GL_TEXTURE_WRAP_R     : u32 : 0x8072;
GL_TEXTURE_MIN_LOD    : u32 : 0x813A;
GL_TEXTURE_MAX_LOD    : u32 : 0x813B;
GL_TEXTURE_BASE_LEVEL : u32 : 0x813C;
GL_TEXTURE_MAX_LEVEL  : u32 : 0x813D;
GL_UNPACK_IMAGE_HEIGHT : u32 : 0x806E;

GL_ZERO                : u32 : 0;
GL_ONE                 : u32 : 1;
GL_SRC_COLOR           : u32 : 0x0300;
GL_ONE_MINUS_SRC_COLOR : u32 : 0x0301;
GL_SRC_ALPHA           : u32 : 0x0302;
GL_ONE_MINUS_SRC_ALPHA : u32 : 0x0303;
GL_DST_ALPHA           : u32 : 0x0304;
GL_ONE_MINUS_DST_ALPHA : u32 : 0x0305;
GL_SRC1_COLOR          : u32 : 0x88F9;
GL_ONE_MINUS_SRC1_COLOR : u32 : 0x88FA;
GL_ONE_MINUS_SRC1_ALPHA : u32 : 0x88FB;

GL_BYTE           : u32 : 0x1400;
GL_UNSIGNED_BYTE  : u32 : 0x1401;
GL_SHORT          : u32 : 0x1402;
GL_UNSIGNED_SHORT : u32 : 0x1403;
GL_INT            : u32 : 0x1404;
GL_UNSIGNED_INT   : u32 : 0x1405;
GL_FLOAT          : u32 : 0x1406;
GL_DOUBLE         : u32 : 0x140A;

GL_POINTS         : u32 : 0x0000;
GL_LINES          : u32 : 0x0001;
GL_LINE_LOOP      : u32 : 0x0002;
GL_LINE_STRIP     : u32 : 0x0003;
GL_TRIANGLES      : u32 : 0x0004;
GL_TRIANGLE_STRIP : u32 : 0x0005;
GL_TRIANGLE_FAN   : u32 : 0x0006;

GL_DEPTH_BUFFER_BIT     : u32 : 0x00000100;
GL_STENCIL_BUF          : u32 : 0x00000400;
GL_COLOR_BUFFER_BIT     : u32 : 0x00004000;
GL_VERTEX_SHADER        : u32 : 0x8B31;
GL_FRAGMENT_SHADER      : u32 : 0x8B30;
GL_COMPILE_STATUS       : u32 : 0x8B81;
GL_INFO_LOG_LENGTH      : u32 : 0x8B84;
GL_LINK_STATUS          : u32 : 0x8B82;

GL_COLOR_INDEX     : u32 : 0x1900;
GL_STENCIL_INDEX   : u32 : 0x1901;
GL_DEPTH_COMPONENT : u32 : 0x1902;
GL_RED             : u32 : 0x1903;
GL_GREEN           : u32 : 0x1904;
GL_BLUE            : u32 : 0x1905;
GL_ALPHA           : u32 : 0x1906;
GL_RGB             : u32 : 0x1907;
GL_RGBA            : u32 : 0x1908;
GL_RGB8            : u32 : 0x8051;
GL_RGBA8           : u32 : 0x8058;
GL_RGBA4           : u32 : 0x8056;
GL_RED_INTEGER     : u32 : 0x8D94;
GL_RGB_INTEGER     : u32 : 0x8D98;
GL_RGBA_INTEGER    : u32 : 0x8D99;
GL_LUMINANCE       : u32 : 0x1909;
GL_LUMINANCE_ALPHA : u32 : 0x190A;
GL_RGBA32F         : u32 : 0x8814;
GL_RGB32F          : u32 : 0x8815;
GL_RGBA16F         : u32 : 0x881A;
GL_RGB16F          : u32 : 0x881B;
GL_RGBA32I         : u32 : 0x8D82;
GL_R8              : u32 : 0x8229;
GL_R16             : u32 : 0x822A;
GL_RG8             : u32 : 0x822B;
GL_RG16            : u32 : 0x822C;
GL_R16F            : u32 : 0x822D;
GL_R32F            : u32 : 0x822E;
GL_RG16F           : u32 : 0x822F;
GL_RG32F           : u32 : 0x8230;
GL_R8I             : u32 : 0x8231;
GL_R8UI            : u32 : 0x8232;
GL_R16I            : u32 : 0x8233;
GL_R16UI           : u32 : 0x8234;
GL_R32I            : u32 : 0x8235;
GL_R32UI           : u32 : 0x8236;
GL_RG8I            : u32 : 0x8237;
GL_RG8UI           : u32 : 0x8238;
GL_RG16I           : u32 : 0x8239;
GL_RG16UI          : u32 : 0x823A;
GL_RG32I           : u32 : 0x823B;
GL_RG32UI          : u32 : 0x823C;
GL_RGB16           : u32 : 0x8054;

GL_TEXTURE0                      : u32 : 0x84C0;
GL_TEXTURE1                      : u32 : 0x84C1;
GL_TEXTURE2                      : u32 : 0x84C2;
GL_TEXTURE3                      : u32 : 0x84C3;
GL_TEXTURE4                      : u32 : 0x84C4;
GL_TEXTURE5                      : u32 : 0x84C5;
GL_TEXTURE6                      : u32 : 0x84C6;
GL_TEXTURE7                      : u32 : 0x84C7;
GL_TEXTURE8                      : u32 : 0x84C8;
GL_TEXTURE9                      : u32 : 0x84C9;
GL_TEXTURE10                     : u32 : 0x84CA;
GL_TEXTURE11                     : u32 : 0x84CB;
GL_TEXTURE12                     : u32 : 0x84CC;
GL_TEXTURE13                     : u32 : 0x84CD;
GL_TEXTURE14                     : u32 : 0x84CE;
GL_TEXTURE15                     : u32 : 0x84CF;
GL_TEXTURE16                     : u32 : 0x84D0;
GL_TEXTURE17                     : u32 : 0x84D1;
GL_TEXTURE18                     : u32 : 0x84D2;
GL_TEXTURE19                     : u32 : 0x84D3;
GL_TEXTURE20                     : u32 : 0x84D4;
GL_TEXTURE21                     : u32 : 0x84D5;
GL_TEXTURE22                     : u32 : 0x84D6;
GL_TEXTURE23                     : u32 : 0x84D7;
GL_TEXTURE24                     : u32 : 0x84D8;
GL_TEXTURE25                     : u32 : 0x84D9;
GL_TEXTURE26                     : u32 : 0x84DA;
GL_TEXTURE27                     : u32 : 0x84DB;
GL_TEXTURE28                     : u32 : 0x84DC;
GL_TEXTURE29                     : u32 : 0x84DD;
GL_TEXTURE30                     : u32 : 0x84DE;
GL_TEXTURE31                     : u32 : 0x84DF;
GL_ACTIVE_TEXTURE                : u32 : 0x84E0;
GL_CLIENT_ACTIVE_TEXTURE         : u32 : 0x84E1;
GL_MAX_TEXTURE_UNITS             : u32 : 0x84E2;
GL_MULTISAMPLE                   : u32 : 0x809D;
GL_SHADER_STORAGE_BUFFER         : u32 : 0x90D2;

GL_ARRAY_BUFFER                         : u32 : 0x8892;
GL_ELEMENT_ARRAY_BUFFER                 : u32 : 0x8893;
GL_ARRAY_BUFFER_BINDING                 : u32 : 0x8894;
GL_ELEMENT_ARRAY_BUFFER_BINDING         : u32 : 0x8895;
GL_VERTEX_ARRAY_BUFFER_BINDING          : u32 : 0x8896;
GL_NORMAL_ARRAY_BUFFER_BINDING          : u32 : 0x8897;
GL_COLOR_ARRAY_BUFFER_BINDING           : u32 : 0x8898;
GL_INDEX_ARRAY_BUFFER_BINDING           : u32 : 0x8899;
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING   : u32 : 0x889A;
GL_EDGE_FLAG_ARRAY_BUFFER_BINDING       : u32 : 0x889B;
GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING : u32 : 0x889C;
GL_FOG_COORD_ARRAY_BUFFER_BINDING       : u32 : 0x889D;
GL_WEIGHT_ARRAY_BUFFER_BINDING          : u32 : 0x889E;
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING   : u32 : 0x889F;
GL_STREAM_DRAW                          : u32 : 0x88E0;
GL_STREAM_READ                          : u32 : 0x88E1;
GL_STREAM_COPY                          : u32 : 0x88E2;
GL_STATIC_DRAW                          : u32 : 0x88E4;
GL_STATIC_READ                          : u32 : 0x88E5;
GL_STATIC_COPY                          : u32 : 0x88E6;
GL_DYNAMIC_DRAW                         : u32 : 0x88E8;
GL_DYNAMIC_READ                         : u32 : 0x88E9;
GL_DYNAMIC_COPY                         : u32 : 0x88EA;
GL_READ_ONLY                            : u32 : 0x88B8;
GL_WRITE_ONLY                           : u32 : 0x88B9;
GL_READ_WRITE                           : u32 : 0x88BA;
GL_BUFFER_SIZE                          : u32 : 0x8764;
GL_BUFFER_USAGE                         : u32 : 0x8765;
GL_BUFFER_ACCESS                        : u32 : 0x88BB;
GL_BUFFER_MAPPED                        : u32 : 0x88BC;
GL_BUFFER_MAP_POINTER                   : u32 : 0x88BD;
GL_UNIFORM_BUFFER                       : u32 : 0x8A11;

GL_CURRENT_COLOR                 : u32 : 0x0B00;
GL_CURRENT_INDEX                 : u32 : 0x0B01;
GL_CURRENT_NORMAL                : u32 : 0x0B02;
GL_CURRENT_TEXTURE_COORDS        : u32 : 0x0B03;
GL_CURRENT_RASTER_COLOR          : u32 : 0x0B04;
GL_CURRENT_RASTER_INDEX          : u32 : 0x0B05;
GL_CURRENT_RASTER_TEXTURE_COORDS : u32 : 0x0B06;
GL_CURRENT_RASTER_POSITION       : u32 : 0x0B07;
GL_CURRENT_RASTER_POSITION_VALID : u32 : 0x0B08;
GL_CURRENT_RASTER_DISTANCE       : u32 : 0x0B09;
GL_POINT_SMOOTH                  : u32 : 0x0B10;
GL_POINT_SIZE                    : u32 : 0x0B11;
GL_POINT_SIZE_RANGE              : u32 : 0x0B12;
GL_POINT_SIZE_GRANULARITY        : u32 : 0x0B13;
GL_LINE_SMOOTH                   : u32 : 0x0B20;
GL_LINE_WIDTH                    : u32 : 0x0B21;
GL_LINE_WIDTH_RANGE              : u32 : 0x0B22;
GL_LINE_WIDTH_GRANULARITY        : u32 : 0x0B23;
GL_LINE_STIPPLE                  : u32 : 0x0B24;
GL_LINE_STIPPLE_PATTERN          : u32 : 0x0B25;
GL_LINE_STIPPLE_REPEAT           : u32 : 0x0B26;
GL_LIST_MODE                     : u32 : 0x0B30;
GL_MAX_LIST_NESTING              : u32 : 0x0B31;
GL_LIST_BASE                     : u32 : 0x0B32;
GL_LIST_INDEX                    : u32 : 0x0B33;
GL_POLYGON_MODE                  : u32 : 0x0B40;
GL_POLYGON_SMOOTH                : u32 : 0x0B41;
GL_POLYGON_STIPPLE               : u32 : 0x0B42;
GL_EDGE_FLAG                     : u32 : 0x0B43;
GL_CULL_FACE                     : u32 : 0x0B44;
GL_CULL_FACE_MODE                : u32 : 0x0B45;
GL_FRONT_FACE                    : u32 : 0x0B46;
GL_LIGHTING                      : u32 : 0x0B50;
GL_LIGHT_MODEL_LOCAL_VIEWER      : u32 : 0x0B51;
GL_LIGHT_MODEL_TWO_SIDE          : u32 : 0x0B52;
GL_LIGHT_MODEL_AMBIENT           : u32 : 0x0B53;
GL_SHADE_MODEL                   : u32 : 0x0B54;
GL_COLOR_MATERIAL_FACE           : u32 : 0x0B55;
GL_COLOR_MATERIAL_PARAMETER      : u32 : 0x0B56;
GL_COLOR_MATERIAL                : u32 : 0x0B57;
GL_FOG                           : u32 : 0x0B60;
GL_FOG_INDEX                     : u32 : 0x0B61;
GL_FOG_DENSITY                   : u32 : 0x0B62;
GL_FOG_START                     : u32 : 0x0B63;
GL_FOG_END                       : u32 : 0x0B64;
GL_FOG_MODE                      : u32 : 0x0B65;
GL_FOG_COLOR                     : u32 : 0x0B66;
GL_DEPTH_RANGE                   : u32 : 0x0B70;
GL_DEPTH_TEST                    : u32 : 0x0B71;
GL_DEPTH_WRITEMASK               : u32 : 0x0B72;
GL_DEPTH_CLEAR_VALUE             : u32 : 0x0B73;
GL_DEPTH_FUNC                    : u32 : 0x0B74;
GL_ACCUM_CLEAR_VALUE             : u32 : 0x0B80;
GL_STENCIL_TEST                  : u32 : 0x0B90;
GL_STENCIL_CLEAR_VALUE           : u32 : 0x0B91;
GL_STENCIL_FUNC                  : u32 : 0x0B92;
GL_STENCIL_VALUE_MASK            : u32 : 0x0B93;
GL_STENCIL_FAIL                  : u32 : 0x0B94;
GL_STENCIL_PASS_DEPTH_FAIL       : u32 : 0x0B95;
GL_STENCIL_PASS_DEPTH_PASS       : u32 : 0x0B96;
GL_STENCIL_REF                   : u32 : 0x0B97;
GL_STENCIL_WRITEMASK             : u32 : 0x0B98;
GL_MATRIX_MODE                   : u32 : 0x0BA0;
GL_NORMALIZE                     : u32 : 0x0BA1;
GL_VIEWPORT                      : u32 : 0x0BA2;
GL_MODELVIEW_STACK_DEPTH         : u32 : 0x0BA3;
GL_PROJECTION_STACK_DEPTH        : u32 : 0x0BA4;
GL_TEXTURE_STACK_DEPTH           : u32 : 0x0BA5;
GL_MODELVIEW_MATRIX              : u32 : 0x0BA6;
GL_PROJECTION_MATRIX             : u32 : 0x0BA7;
GL_TEXTURE_MATRIX                : u32 : 0x0BA8;
GL_ATTRIB_STACK_DEPTH            : u32 : 0x0BB0;
GL_CLIENT_ATTRIB_STACK_DEPTH     : u32 : 0x0BB1;
GL_ALPHA_TEST                    : u32 : 0x0BC0;
GL_ALPHA_TEST_FUNC               : u32 : 0x0BC1;
GL_ALPHA_TEST_REF                : u32 : 0x0BC2;
GL_DITHER                        : u32 : 0x0BD0;
GL_BLEND_DST                     : u32 : 0x0BE0;
GL_BLEND_SRC                     : u32 : 0x0BE1;
GL_BLEND                         : u32 : 0x0BE2;
GL_LOGIC_OP_MODE                 : u32 : 0x0BF0;
GL_INDEX_LOGIC_OP                : u32 : 0x0BF1;
GL_COLOR_LOGIC_OP                : u32 : 0x0BF2;
GL_AUX_BUFFERS                   : u32 : 0x0C00;
GL_DRAW_BUFFER                   : u32 : 0x0C01;
GL_READ_BUFFER                   : u32 : 0x0C02;
GL_SCISSOR_BOX                   : u32 : 0x0C10;
GL_SCISSOR_TEST                  : u32 : 0x0C11;
GL_INDEX_CLEAR_VALUE             : u32 : 0x0C20;
GL_INDEX_WRITEMASK               : u32 : 0x0C21;
GL_COLOR_CLEAR_VALUE             : u32 : 0x0C22;
GL_COLOR_WRITEMASK               : u32 : 0x0C23;
GL_INDEX_MODE                    : u32 : 0x0C30;
GL_RGBA_MODE                     : u32 : 0x0C31;
GL_DOUBLEBUFFER                  : u32 : 0x0C32;
GL_STEREO                        : u32 : 0x0C33;
GL_RENDER_MODE                   : u32 : 0x0C40;
GL_PERSPECTIVE_CORRECTION_HINT   : u32 : 0x0C50;
GL_POINT_SMOOTH_HINT             : u32 : 0x0C51;
GL_LINE_SMOOTH_HINT              : u32 : 0x0C52;
GL_POLYGON_SMOOTH_HINT           : u32 : 0x0C53;
GL_FOG_HINT                      : u32 : 0x0C54;
GL_TEXTURE_GEN_S                 : u32 : 0x0C60;
GL_TEXTURE_GEN_T                 : u32 : 0x0C61;
GL_TEXTURE_GEN_R                 : u32 : 0x0C62;
GL_TEXTURE_GEN_Q                 : u32 : 0x0C63;
GL_PIXEL_MAP_I_TO_I              : u32 : 0x0C70;
GL_PIXEL_MAP_S_TO_S              : u32 : 0x0C71;
GL_PIXEL_MAP_I_TO_R              : u32 : 0x0C72;
GL_PIXEL_MAP_I_TO_G              : u32 : 0x0C73;
GL_PIXEL_MAP_I_TO_B              : u32 : 0x0C74;
GL_PIXEL_MAP_I_TO_A              : u32 : 0x0C75;
GL_PIXEL_MAP_R_TO_R              : u32 : 0x0C76;
GL_PIXEL_MAP_G_TO_G              : u32 : 0x0C77;
GL_PIXEL_MAP_B_TO_B              : u32 : 0x0C78;
GL_PIXEL_MAP_A_TO_A              : u32 : 0x0C79;
GL_PIXEL_MAP_I_TO_I_SIZE         : u32 : 0x0CB0;
GL_PIXEL_MAP_S_TO_S_SIZE         : u32 : 0x0CB1;
GL_PIXEL_MAP_I_TO_R_SIZE         : u32 : 0x0CB2;
GL_PIXEL_MAP_I_TO_G_SIZE         : u32 : 0x0CB3;
GL_PIXEL_MAP_I_TO_B_SIZE         : u32 : 0x0CB4;
GL_PIXEL_MAP_I_TO_A_SIZE         : u32 : 0x0CB5;
GL_PIXEL_MAP_R_TO_R_SIZE         : u32 : 0x0CB6;
GL_PIXEL_MAP_G_TO_G_SIZE         : u32 : 0x0CB7;
GL_PIXEL_MAP_B_TO_B_SIZE         : u32 : 0x0CB8;
GL_PIXEL_MAP_A_TO_A_SIZE         : u32 : 0x0CB9;
GL_UNPACK_SWAP_BYTES             : u32 : 0x0CF0;
GL_UNPACK_LSB_FIRST              : u32 : 0x0CF1;
GL_UNPACK_ROW_LENGTH             : u32 : 0x0CF2;
GL_UNPACK_SKIP_ROWS              : u32 : 0x0CF3;
GL_UNPACK_SKIP_PIXELS            : u32 : 0x0CF4;
GL_UNPACK_ALIGNMENT              : u32 : 0x0CF5;
GL_PACK_SWAP_BYTES               : u32 : 0x0D00;
GL_PACK_LSB_FIRST                : u32 : 0x0D01;
GL_PACK_ROW_LENGTH               : u32 : 0x0D02;
GL_PACK_SKIP_ROWS                : u32 : 0x0D03;
GL_PACK_SKIP_PIXELS              : u32 : 0x0D04;
GL_PACK_ALIGNMENT                : u32 : 0x0D05;
GL_MAP_COLOR                     : u32 : 0x0D10;
GL_MAP_STENCIL                   : u32 : 0x0D11;
GL_INDEX_SHIFT                   : u32 : 0x0D12;
GL_INDEX_OFFSET                  : u32 : 0x0D13;
GL_RED_SCALE                     : u32 : 0x0D14;
GL_RED_BIAS                      : u32 : 0x0D15;
GL_ZOOM_X                        : u32 : 0x0D16;
GL_ZOOM_Y                        : u32 : 0x0D17;
GL_GREEN_SCALE                   : u32 : 0x0D18;
GL_GREEN_BIAS                    : u32 : 0x0D19;
GL_BLUE_SCALE                    : u32 : 0x0D1A;
GL_BLUE_BIAS                     : u32 : 0x0D1B;
GL_ALPHA_SCALE                   : u32 : 0x0D1C;
GL_ALPHA_BIAS                    : u32 : 0x0D1D;
GL_DEPTH_SCALE                   : u32 : 0x0D1E;
GL_DEPTH_BIAS                    : u32 : 0x0D1F;
GL_MAX_EVAL_ORDER                : u32 : 0x0D30;
GL_MAX_LIGHTS                    : u32 : 0x0D31;
GL_MAX_CLIP_PLANES               : u32 : 0x0D32;
GL_MAX_TEXTURE_SIZE              : u32 : 0x0D33;
GL_MAX_PIXEL_MAP_TABLE           : u32 : 0x0D34;
GL_MAX_ATTRIB_STACK_DEPTH        : u32 : 0x0D35;
GL_MAX_MODELVIEW_STACK_DEPTH     : u32 : 0x0D36;
GL_MAX_NAME_STACK_DEPTH          : u32 : 0x0D37;
GL_MAX_PROJECTION_STACK_DEPTH    : u32 : 0x0D38;
GL_MAX_TEXTURE_STACK_DEPTH       : u32 : 0x0D39;
GL_MAX_VIEWPORT_DIMS             : u32 : 0x0D3A;
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH : u32 : 0x0D3B;
GL_SUBPIXEL_BITS                 : u32 : 0x0D50;
GL_INDEX_BITS                    : u32 : 0x0D51;
GL_RED_BITS                      : u32 : 0x0D52;
GL_GREEN_BITS                    : u32 : 0x0D53;
GL_BLUE_BITS                     : u32 : 0x0D54;
GL_ALPHA_BITS                    : u32 : 0x0D55;
GL_DEPTH_BITS                    : u32 : 0x0D56;
GL_STENCIL_BITS                  : u32 : 0x0D57;
GL_ACCUM_RED_BITS                : u32 : 0x0D58;
GL_ACCUM_GREEN_BITS              : u32 : 0x0D59;
GL_ACCUM_BLUE_BITS               : u32 : 0x0D5A;
GL_ACCUM_ALPHA_BITS              : u32 : 0x0D5B;
GL_NAME_STACK_DEPTH              : u32 : 0x0D70;
GL_AUTO_NORMAL                   : u32 : 0x0D80;
GL_MAP1_COLOR_4                  : u32 : 0x0D90;
GL_MAP1_INDEX                    : u32 : 0x0D91;
GL_MAP1_NORMAL                   : u32 : 0x0D92;
GL_MAP1_TEXTURE_COORD_1          : u32 : 0x0D93;
GL_MAP1_TEXTURE_COORD_2          : u32 : 0x0D94;
GL_MAP1_TEXTURE_COORD_3          : u32 : 0x0D95;
GL_MAP1_TEXTURE_COORD_4          : u32 : 0x0D96;
GL_MAP1_VERTEX_3                 : u32 : 0x0D97;
GL_MAP1_VERTEX_4                 : u32 : 0x0D98;
GL_MAP2_COLOR_4                  : u32 : 0x0DB0;
GL_MAP2_INDEX                    : u32 : 0x0DB1;
GL_MAP2_NORMAL                   : u32 : 0x0DB2;
GL_MAP2_TEXTURE_COORD_1          : u32 : 0x0DB3;
GL_MAP2_TEXTURE_COORD_2          : u32 : 0x0DB4;
GL_MAP2_TEXTURE_COORD_3          : u32 : 0x0DB5;
GL_MAP2_TEXTURE_COORD_4          : u32 : 0x0DB6;
GL_MAP2_VERTEX_3                 : u32 : 0x0DB7;
GL_MAP2_VERTEX_4                 : u32 : 0x0DB8;
GL_MAP1_GRID_DOMAIN              : u32 : 0x0DD0;
GL_MAP1_GRID_SEGMENTS            : u32 : 0x0DD1;
GL_MAP2_GRID_DOMAIN              : u32 : 0x0DD2;
GL_MAP2_GRID_SEGMENTS            : u32 : 0x0DD3;
GL_TEXTURE_1D                    : u32 : 0x0DE0;
GL_TEXTURE_2D                    : u32 : 0x0DE1;
GL_FEEDBACK_BUFFER_POINTER       : u32 : 0x0DF0;
GL_FEEDBACK_BUFFER_SIZE          : u32 : 0x0DF1;
GL_FEEDBACK_BUFFER_TYPE          : u32 : 0x0DF2;
GL_SELECTION_BUFFER_POINTER      : u32 : 0x0DF3;
GL_SELECTION_BUFFER_SIZE         : u32 : 0x0DF4;
GL_TEXTURE_WIDTH                 : u32 : 0x1000;
GL_TEXTURE_HEIGHT                : u32 : 0x1001;
GL_TEXTURE_INTERNAL_FORMAT       : u32 : 0x1003;
GL_TEXTURE_BORDER_COLOR          : u32 : 0x1004;
GL_TEXTURE_BORDER                : u32 : 0x1005;
GL_TEXTURE_BUFFER                : u32 : 0x8C2A;
GL_MAX_TEXTURE_BUFFER_SIZE       : u32 : 0x8C2B;
GL_FRAMEBUFFER_SRGB              : u32 : 0x8DB9;
GL_SRGB_ALPHA                    : u32 : 0x8C42;
GL_SRGB                          : u32 : 0x8C40;

GL_FRAMEBUFFER  : u32 : 0x8D40;
GL_RENDERBUFFER : u32 : 0x8D41;
GL_READ_FRAMEBUFFER : u32 : 0x8CA8;
GL_DRAW_FRAMEBUFFER : u32 : 0x8CA9;

GL_COLOR_ATTACHMENT0  : u32 : 0x8CE0;
GL_COLOR_ATTACHMENT1  : u32 : 0x8CE1;
GL_COLOR_ATTACHMENT2  : u32 : 0x8CE2;
GL_COLOR_ATTACHMENT3  : u32 : 0x8CE3;
GL_COLOR_ATTACHMENT4  : u32 : 0x8CE4;
GL_COLOR_ATTACHMENT5  : u32 : 0x8CE5;
GL_COLOR_ATTACHMENT6  : u32 : 0x8CE6;
GL_COLOR_ATTACHMENT7  : u32 : 0x8CE7;
GL_COLOR_ATTACHMENT8  : u32 : 0x8CE8;
GL_COLOR_ATTACHMENT9  : u32 : 0x8CE9;
GL_COLOR_ATTACHMENT10 : u32 : 0x8CEA;
GL_COLOR_ATTACHMENT11 : u32 : 0x8CEB;
GL_COLOR_ATTACHMENT12 : u32 : 0x8CEC;
GL_COLOR_ATTACHMENT13 : u32 : 0x8CED;
GL_COLOR_ATTACHMENT14 : u32 : 0x8CEE;
GL_COLOR_ATTACHMENT15 : u32 : 0x8CEF;
GL_COLOR_ATTACHMENT16 : u32 : 0x8CF0;
GL_COLOR_ATTACHMENT17 : u32 : 0x8CF1;
GL_COLOR_ATTACHMENT18 : u32 : 0x8CF2;
GL_COLOR_ATTACHMENT19 : u32 : 0x8CF3;
GL_COLOR_ATTACHMENT20 : u32 : 0x8CF4;
GL_COLOR_ATTACHMENT21 : u32 : 0x8CF5;
GL_COLOR_ATTACHMENT22 : u32 : 0x8CF6;
GL_COLOR_ATTACHMENT23 : u32 : 0x8CF7;
GL_COLOR_ATTACHMENT24 : u32 : 0x8CF8;
GL_COLOR_ATTACHMENT25 : u32 : 0x8CF9;
GL_COLOR_ATTACHMENT26 : u32 : 0x8CFA;
GL_COLOR_ATTACHMENT27 : u32 : 0x8CFB;
GL_COLOR_ATTACHMENT28 : u32 : 0x8CFC;
GL_COLOR_ATTACHMENT29 : u32 : 0x8CFD;
GL_COLOR_ATTACHMENT30 : u32 : 0x8CFE;
GL_COLOR_ATTACHMENT31 : u32 : 0x8CFF;
GL_DEPTH_ATTACHMENT   : u32 : 0x8D00;
GL_STENCIL_ATTACHMENT : u32 : 0x8D20;

GL_SRC0_RGB   : u32 : 0x8580;
GL_SRC1_RGB   : u32 : 0x8581;
GL_SRC2_RGB   : u32 : 0x8582;
GL_SRC0_ALPHA : u32 : 0x8588;
GL_SRC1_ALPHA : u32 : 0x8589;

GL_FRAMEBUFFER_COMPLETE                      : u32 : 0x8CD5;
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT         : u32 : 0x8CD6;
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT : u32 : 0x8CD7;
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER        : u32 : 0x8CDB;
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER        : u32 : 0x8CDC;
GL_FRAMEBUFFER_UNSUPPORTED                   : u32 : 0x8CDD;

GL_DEPTH_COMPONENT16 : u32 : 0x81A5;
GL_DEPTH_COMPONENT24 : u32 : 0x81A6;
GL_DEPTH_COMPONENT32 : u32 : 0x81A7;

GL_COLOR : u32 : 0x1800;

GL_TEXTURE_MAX_ANISOTROPY_EXT : u32 : 0x84FE;

GL_CONTEXT_COMPATIBILITY_PROFILE_BIT :: 0x00000002;
GL_CONTEXT_CORE_PROFILE_BIT :: 0x00000001;
GL_CONTEXT_FLAGS : u32 : 0x821E;
GL_CONTEXT_FLAG_DEBUG_BIT :: 0x00000002;
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT :: 0x00000001;
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB :: 0x00000004;

GL_DEBUG_CALLBACK_FUNCTION : u32 : 0x8244;
GL_DEBUG_CALLBACK_USER_PARAM: u32 : 0x8245;
GL_DEBUG_GROUP_STACK_DEPTH: u32 : 0x826D;
GL_DEBUG_LOGGED_MESSAGES: u32 : 0x9145;
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: u32 : 0x8243;
GL_DEBUG_OUTPUT: u32 : 0x92E0;
GL_DEBUG_OUTPUT_SYNCHRONOUS: u32 : 0x8242;
GL_DEBUG_SEVERITY_HIGH: u32 : 0x9146;
GL_DEBUG_SEVERITY_LOW: u32 : 0x9148;
GL_DEBUG_SEVERITY_MEDIUM: u32 : 0x9147;
GL_DEBUG_SEVERITY_NOTIFICATION: u32 : 0x826B;
GL_DEBUG_SOURCE_API: u32 : 0x8246;
GL_DEBUG_SOURCE_APPLICATION: u32 : 0x824A;
GL_DEBUG_SOURCE_OTHER: u32 : 0x824B;
GL_DEBUG_SOURCE_SHADER_COMPILER: u32 : 0x8248;
GL_DEBUG_SOURCE_THIRD_PARTY: u32 : 0x8249;
GL_DEBUG_SOURCE_WINDOW_SYSTEM: u32 : 0x8247;
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: u32 : 0x824D;
GL_DEBUG_TYPE_ERROR: u32 : 0x824C;
GL_DEBUG_TYPE_MARKER: u32 : 0x8268;
GL_DEBUG_TYPE_OTHER: u32 : 0x8251;
GL_DEBUG_TYPE_PERFORMANCE: u32 : 0x8250;
GL_DEBUG_TYPE_POP_GROUP: u32 : 0x826A;
GL_DEBUG_TYPE_PORTABILITY: u32 : 0x824F;
GL_DEBUG_TYPE_PUSH_GROUP: u32 : 0x8269;
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR: u32 : 0x824E;

GlDebugFn :: *fn (source: u32, type: u32, id: u32, severity: u32, length: s32, message: *C.char, userParam: *u8);

// OpenGL extensions must be loaded in runtime on Windows so we can do the same even on Unix.
_Gl :: struct {
	ClearColor: *fn (red: f32, green: f32, blue: f32, alpha: f32);
	Clear: *fn (mask: u32);
	TexImage2D: *fn (target: GLenum, level: GLint, internalformat: GLuint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, t: GLenum, data: *u8);
	PixelStorei: *fn (pname: GLenum, param: GLint);
	DrawArrays: *fn (mode: GLenum, first: GLint, count: GLsizei);
	Enable: *fn (cap: GLenum);
	Disable: *fn (cap: GLenum);
	GetError: *fn () GLenum;
	BlendFunc: *fn (sfactor: GLenum, dfactor: GLenum);
	TexParameteri: *fn (target: GLenum, pname: GLenum, param: GLuint);
	TexParameterf: *fn (target: GLenum, pname: GLenum, param: GLfloat);
	TexSubImage2D: *fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, t: GLenum, data: *u8);
	Hint: *fn (target: GLenum, mode: GLenum);
	PolygonMode: *fn (face: GLenum, mode: GLenum);
	DeleteTextures: *fn (n: GLsizei, textures: *GLuint);
	LineWidth: *fn (width: GLfloat);
	ReadBuffer: *fn (mode: 	GLenum);
	ReadPixels: *fn (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, t: GLenum, data: *u8);
	Flush: *fn ();
	Finish: *fn ();
	GenTextures: *fn (n: GLsizei, textures: *GLuint);
	BindTexture: *fn (target: GLenum, texture: GLuint);
	DrawElements: *fn (mode: u32, count: s32, tp: u32, indices: *u8);
	GetIntegerv: *fn (pname: GLenum, data: *GLint);

	// Extensions
	CreateShader: *fn (kind: u32) u32;
	ShaderSource: *fn (shader: u32, count: s32, str: **u8, lenght: s32);
	CompileShader: *fn (shader: u32);
	CreateProgram: *fn () u32;
	AttachShader: *fn (program: u32, shader: u32);
	DetachShader: *fn (program: u32, shader: u32);
	GetShaderiv: *fn (shader: u32, pname: u32, params: *s32);
	GetProgramiv: *fn (program: u32, pname: u32, params: *s32);
	GetShaderInfoLog: *fn (shader: u32, bufSize: s32, length: *s32, infoLog: *u8);
	GetProgramInfoLog: *fn (program: u32, bufSize: s32, length: *s32, infoLog: *u8);
	DeleteProgram: *fn (program: u32);
	DeleteShader: *fn (shader: u32);
	LinkProgram: *fn (program: u32);
	UseProgram: *fn (program: u32);
	GenBuffers: *fn (n: s32, buffers: *u32);
	BindBuffer: *fn (target: u32, buffer: u32);
	BindBufferBase: *fn (target: GLenum, index: GLuint, buffer: GLuint);
	BindBufferRange: *fn (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);
	BufferData: *fn (target: u32, size: usize, data: *u8, usage: u32);
	BindVertexArray: *fn (array: u32);
	DeleteVertexArrays: *fn (n: s32, arrays: *u32);
	GenVertexArrays: *fn (n: s32, arrays: *u32);
	VertexAttribPointer: *fn (index: u32, size: s32, tp: u32, normalized: s32, stride: s32, pointer: *u8);
	VertexAttribIPointer: *fn (index: u32, size: s32, tp: u32, normalized: s32, stride: s32, pointer: *u8);
	EnableVertexAttribArray: *fn (index: u32);
	DisableVertexAttribArray: *fn (index: u32);
	DeleteBuffers: *fn (n: s32, buffers: *u32);
	ActiveTexture: *fn (texture: GLenum);
	Uniform1f: *fn (location: GLint, v0: GLfloat);
	Uniform2f: *fn (location: GLint, v0: GLfloat, v1: GLfloat);
	Uniform3f: *fn (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);
	Uniform4f: *fn (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);
	Uniform1i: *fn (location: GLint, v0: GLint);
	Uniform2i: *fn (location: GLint, v0: GLint, v1: GLint);
	Uniform3i: *fn (location: GLint, v0: GLint, v1: GLint, v2: GLint);
	Uniform4i: *fn (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);
	Uniform1ui: *fn (location: GLint, v0: GLuint);
	Uniform2ui: *fn (location: GLint, v0: GLuint, v1: GLuint);
	Uniform3ui: *fn (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint);
	Uniform4ui: *fn (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint);
	Uniform1fv: *fn (location: GLint, count: GLsizei, value: *GLfloat);
	Uniform2fv: *fn (location: GLint, count: GLsizei, value: *GLfloat);
	Uniform3fv: *fn (location: GLint, count: GLsizei, value: *GLfloat);
	Uniform4fv: *fn (location: GLint, count: GLsizei, value: *GLfloat);
	Uniform1iv: *fn (location: GLint, count: GLsizei, value: *GLint);
	Uniform2iv: *fn (location: GLint, count: GLsizei, value: *GLint);
	Uniform3iv: *fn (location: GLint, count: GLsizei, value: *GLint);
	Uniform4iv: *fn (location: GLint, count: GLsizei, value: *GLint);
	Uniform1uiv: *fn (location: GLint, count: GLsizei, value: *GLuint);
	Uniform2uiv: *fn (location: GLint, count: GLsizei, value: *GLuint);
	Uniform3uiv: *fn (location: GLint, count: GLsizei, value: *GLuint);
	Uniform4uiv: *fn (location: GLint, count: GLsizei, value: *GLuint);
	UniformMatrix2fv: *fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat);
	UniformMatrix3fv: *fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat);
	UniformMatrix4fv: *fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat);
	UniformMatrix2x3fv: *fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat);
	UniformMatrix3x2fv: *fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat);
	UniformMatrix2x4fv: *fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat);
	UniformMatrix4x2fv: *fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat);
	UniformMatrix3x4fv: *fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat);
	UniformMatrix4x3fv: *fn (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat);
	GetUniformLocation: *fn (program: GLuint, name: *GLchar) GLint;
	GetAttribLocation: *fn (program: GLuint, name: *GLchar) GLint;
	GetUniformiv: *fn (program: GLuint, location: GLint, params: *GLint);
	Viewport: *fn (x: GLint, y: GLint, width: GLsizei, height: GLsizei);
	DepthMask: *fn (mask: GLint);
	DepthFunc: *fn (mask: GLenum);
	CullFace: *fn (mode: GLenum);
	TexImage3D: *fn (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, t: GLenum, pixels: *GLvoid);
	TexSubImage3D: *fn (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, t: GLenum, pixels: *GLvoid);
	TexStorage3D: *fn (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei);
	GenerateMipmap: *fn (target: GLenum);
	TexBuffer: *fn (target: GLenum, internalformat: GLenum, buffer: GLuint);
	TexBufferRange: *fn (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);
	TextureBufferRange: *fn (texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizei);
	GenRenderbuffers: *fn (n: GLsizei, renderbuffers: *GLuint);
	DeleteRenderbuffers: *fn (n: GLsizei, renderbuffers: *GLuint);
	BindRenderbuffer: *fn (target: GLenum, renderbuffer: GLuint);
	RenderbufferStorage: *fn (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei);
	FramebufferRenderbuffer: *fn (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint);
	NamedFramebufferRenderbuffer: *fn (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint);
	GenFramebuffers: *fn (n: GLsizei, ids: *GLuint);
	DeleteFramebuffers: *fn (n: GLsizei, framebuffers: *GLuint);
	BindFramebuffer: *fn (target: GLenum, framebuffer: GLuint);
	FramebufferTexture2D: *fn (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);
	FramebufferTexture: *fn (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint);
	CheckFramebufferStatus: *fn (target: GLenum) GLenum;
	DrawBuffers: *fn (n: GLsizei, bufs: *GLenum);
	ClearBufferuiv: *fn (buffer: GLenum, drawBuffer: GLint, value: *GLuint);
	GetString: *fn (name: GLenum) *GLubyte;
	MapBuffer: *fn (target: GLenum, access: GLenum) *u8;
	UnmapBuffer: *fn (target: GLenum) GLboolean;
	Scissor: *fn (x: GLint, y: GLint, width: GLsizei, height: GLsizei);
	BlitFramebuffer: *fn (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum);

	DebugMessageCallback: *fn (callback: GlDebugFn, user_param: *u8);
	DebugMessageControl: *fn (source: u32, type: u32, severity: u32, count: s32, ids: *u32, enabled: bool);
}

gl: *_Gl = null;

/// Initialize OpenGL virtual table and set the `gl` global variable. Custom instance can be optionaly provided to
/// hold the vtable.
gl_init :: fn (custom_instance: *_Gl = null) {
	using std;
	assert(!gl, "OpenGL is already initialized!");

	gl = custom_instance;
	if !gl { gl = &instance_impl; }
	tmp := str_new();
	defer str_delete(&tmp);

	info :: cast(*TypeInfoStruct) typeinfo(_Gl);
	loop i := 0; i < info.members.len; i += 1 {
		member :: info.members[i];
		if member.tag == TAG_SKIP { continue; }
		dest_member_ptr := ptr_shift_bytes(cast(*u8) gl, auto member.offset_bytes);
		str_clear_concat(&tmp, "gl", member.name);
		proc :: __gl_get_proc(tmp);
		memcpy(dest_member_ptr, auto &proc, sizeof(*u8));
	}
}

gl_terminate :: fn () {
	assert(gl, "OpenGL is not initialized, call gl_init first!");
	zeromem(auto gl, sizeof(_Gl));
}

gl_get_uniform :: fn (program: GLuint, name: string_view) GLint #inline {
	assert(gl, "OpenGL is not initialized, call gl_init first!");
	return gl.GetUniformLocation(program, name.ptr);
}

gl_get_attribute :: fn (program: GLuint, name: string_view) GLint #inline {
	assert(gl, "OpenGL is not initialized, call gl_init first!");
	return gl.GetAttribLocation(program, name.ptr);
}

gl_check :: fn (loc := #call_location) bool {
	assert(gl, "OpenGL is not initialized, call gl_init first!");
	status := true;
	err := gl.GetError();
	loop err != auto GL_NO_ERROR {
		serr := "UNKNOWN";

		switch err {
			GL_NO_ERROR          { serr = "GL_NO_ERROR";          };
			GL_INVALID_ENUM      { serr = "GL_INVALID_ENUM";      };
			GL_INVALID_VALUE     { serr = "GL_INVALID_VALUE";     };
			GL_INVALID_OPERATION { serr = "GL_INVALID_OPERATION"; };
			GL_OUT_OF_MEMORY     { serr = "GL_OUT_OF_MEMORY";     };
			default;
		}
		print_err("[GL]: % (%) on (%:%)\n", err, serr, loc.file, loc.line);
		err = gl.GetError();
		status = false;
	}
	return status;
}

gl_get_version :: fn () string_view #inline {
	assert(gl, "OpenGL is not initialized, call gl_init first!");
	return std.ctostr(auto gl.GetString(GL_VERSION));
}

gl_get_vendor :: fn () string_view #inline {
	assert(gl, "OpenGL is not initialized, call gl_init first!");
	return std.ctostr(auto gl.GetString(GL_VENDOR));
}

gl_get_renderer :: fn () string_view #inline {
	assert(gl, "OpenGL is not initialized, call gl_init first!");
	return std.ctostr(auto gl.GetString(GL_RENDERER));
}

gl_get_extensions :: fn () string_view #inline {
	assert(gl, "OpenGL is not initialized, call gl_init first!");
	return std.ctostr(auto gl.GetString(GL_EXTENSIONS));
}

gl_get_version_numbers :: fn () (major: s32, minor: s32) #inline {
	assert(gl, "OpenGL is not initialized, call gl_init first!");
	major: GLint;
	minor: GLint;
	gl.GetIntegerv(GL_MAJOR_VERSION, &major);
	gl.GetIntegerv(GL_MINOR_VERSION, &minor);
	return major, minor;
}

#private
TAG_SKIP : u32 : 1;

instance_impl: _Gl;
