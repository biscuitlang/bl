#load "std/math.bl"

#scope glm

//! # GLM
//!
//! `#import "extra/glm"`
//!
//! 3D math tools.
//!

// =================================================================================================
// Types
// =================================================================================================
v2 :: struct {
	x: f32;
	y: f32;
};

v2_one     :: v2.{ 1.f, 1.f };
v2_zero    :: v2.{};

v3 :: struct {
	x: f32;
	y: f32;
	z: f32;
};

v3_right   :: v3.{ x = 1.f };
v3_up      :: v3.{ y = 1.f };
v3_forward :: v3.{ z = 1.f };
v3_one     :: v3.{ 1.f, 1.f, 1.f};
v3_zero    :: v3.{};

v4 :: struct {
	x: f32;
	y: f32;
	z: f32;
	w: f32;
};

v4_one  :: v4.{ 1.f, 1.f, 1.f, 1.f };
v4_zero :: v4.{};

color_white  :: v4.{ 1.f, 1.f, 1.f, 1.f };
color_black  :: v4.{ 0.f, 0.f, 0.f, 1.f };
color_red    :: v4.{ 1.f, 0.f, 0.f, 1.f };
color_green  :: v4.{ 0.f, 1.f, 0.f, 1.f };
color_blue   :: v4.{ 0.f, 0.f, 1.f, 1.f };
color_yellow :: v4.{ 1.f, 1.f, 0.f, 1.f };

iv2 :: struct {
	x: s32;
	y: s32
};

iv3 :: struct {
	x: s32;
	y: s32;
	z: s32;
};

/**
 * Matrix layout
 * | m[0][0]  m[1][0]  m[2][0]  m[3][0] |
 * | m[0][1]  m[1][1]  m[2][1]  m[3][1] |
 * | m[0][2]  m[1][2]  m[2][2]  m[3][2] |
 * | m[0][3]  m[1][3]  m[2][3]  m[3][3] |
 */
mat4 :: [4][4]f32;

// quaternion
quat :: v4;

QUAT_IDENTITY :: quat.{ w = 1.f};

MAT4_IDENTITY :: mat4.{
	[4]f32.{ 1.f, 0.f, 0.f, 0.f },
	[4]f32.{ 0.f, 1.f, 0.f, 0.f },
	[4]f32.{ 0.f, 0.f, 1.f, 0.f },
	[4]f32.{ 0.f, 0.f, 0.f, 1.f },
};

// =================================================================================================
// Functions
// =================================================================================================

sub :: fn { v2_sub; v2_sub_s; v3_sub; v3_sub_s; v4_sub; v4_sub_s; }
add :: fn { v2_add; v2_add_s; v3_add; v3_add_s; v4_add; v4_add_s; }
mul :: fn { v2_mul; v2_mul_s; v3_mul; v3_mul_s; v4_mul; v4_mul_s; }
div :: fn { v2_div; v2_div_s; v3_div; v3_div_s; v4_div; v4_div_s; }
length :: fn { v2_length; v3_length; v4_length; }
sqr_length :: fn { v2_sqr_length; v3_sqr_length; v4_sqr_length; }
dot :: fn { v2_dot; v3_dot; v4_dot; }
normalize :: fn { v2_normalize; v3_normalize; v4_normalize; }
compare :: fn { v2_compare; v3_compare; v4_compare; }
negate :: fn { v2_negate; v3_negate; v4_negate; }
cross :: fn { v3_cross; }
round :: fn { v2_round; v3_round; v4_round; }
floor :: fn { v2_floor; v3_floor; v4_floor; }
ceil :: fn { v2_ceil; v3_ceil; v4_ceil; }

mat4_init :: fn (
	m: *mat4,
	m00: f32, m10: f32, m20: f32, m30: f32,
	m01: f32, m11: f32, m21: f32, m31: f32,
	m02: f32, m12: f32, m22: f32, m32: f32,
	m03: f32, m13: f32, m23: f32, m33: f32
) #inline {
	(@m)[0][0] = m00; (@m)[1][0] = m10; (@m)[2][0] = m20; (@m)[3][0] = m30;
	(@m)[0][1] = m01; (@m)[1][1] = m11; (@m)[2][1] = m21; (@m)[3][1] = m31;
	(@m)[0][2] = m02; (@m)[1][2] = m12; (@m)[2][2] = m22; (@m)[3][2] = m32;
	(@m)[0][3] = m03; (@m)[1][3] = m13; (@m)[2][3] = m23; (@m)[3][3] = m33;
}

mat4_identity :: fn (m: *mat4) #inline {
	mat4_init(
		m,
		1.f, 0.f, 0.f, 0.f,
		0.f, 1.f, 0.f, 0.f,
		0.f, 0.f, 1.f, 0.f,
		0.f, 0.f, 0.f, 1.f
	);
}

mat4_zero :: fn (m: *mat4) #inline {
	zeromem(auto m, sizeof(@m));
}

mat4_init_perspective :: fn (m: *mat4, fov_rad: f32, aspect: f32, near: f32, far: f32) #inline {
	mat4_zero(m);
	tanHalfFovy :: std.tan(fov_rad / 2.f);
	(@m)[0][0] = 1.f / (aspect * tanHalfFovy);
	(@m)[1][1] = 1.f / tanHalfFovy;
	(@m)[2][2] = - (far + near) / (far - near);
	(@m)[2][3] = - 1.f;
	(@m)[3][2] = - (2.f * far * near) / (far - near);
}

mat4_init_ortho :: fn (m: *mat4, left: f32, right: f32, bottom: f32, top: f32, near: f32, far: f32) {
	mat4_identity(m);

	rl :: 1.0f / (right - left);
	tb :: 1.0f / (top   - bottom);
	f  ::-1.0f / (far   - near);

	(@m)[0][0] = 2.0f * rl;
	(@m)[1][1] = 2.0f * tb;
	(@m)[2][2] = 2.0f * f;
	(@m)[3][0] =-(right + left)   * rl;
	(@m)[3][1] =-(top   + bottom) * tb;
	(@m)[3][2] = (far   + near)   * f;
	(@m)[3][3] = 1.0f;
}

mat4_init_look_at :: fn (m: *mat4, eye: v3, target: v3, up: v3) #inline {
	mat4_init_look(m, eye, sub(target, eye), up);
}

mat4_init_look :: fn (m: *mat4, eye: v3, direction: v3, up: v3) {
	mat4_identity(m);

	f :: normalize(direction);
	s :: normalize(cross(f, up));
	u :: cross(s, f);

	(@m)[0][0] = s.x;
	(@m)[1][0] = s.y;
	(@m)[2][0] = s.z;
	(@m)[0][1] = u.x;
	(@m)[1][1] = u.y;
	(@m)[2][1] = u.z;
	(@m)[0][2] = -f.x;
	(@m)[1][2] = -f.y;
	(@m)[2][2] = -f.z;
	(@m)[3][0] = -dot(s, eye);
	(@m)[3][1] = -dot(u, eye);
	(@m)[3][2] = dot(f, eye);
}

/// Multiply matrix `a` with matrix `b` and writes the result into `result`. `a` or `b` can be used
/// also as the `result`.
mat4_mul :: fn (a: *mat4, b: *mat4, result: *mat4) {
	a00 :: (@a)[0][0]; a01 :: (@a)[0][1]; a02 :: (@a)[0][2]; a03 :: (@a)[0][3];
	a10 :: (@a)[1][0]; a11 :: (@a)[1][1]; a12 :: (@a)[1][2]; a13 :: (@a)[1][3];
	a20 :: (@a)[2][0]; a21 :: (@a)[2][1]; a22 :: (@a)[2][2]; a23 :: (@a)[2][3];
	a30 :: (@a)[3][0]; a31 :: (@a)[3][1]; a32 :: (@a)[3][2]; a33 :: (@a)[3][3];

	b00 :: (@b)[0][0]; b01 :: (@b)[0][1]; b02 :: (@b)[0][2]; b03 :: (@b)[0][3];
	b10 :: (@b)[1][0]; b11 :: (@b)[1][1]; b12 :: (@b)[1][2]; b13 :: (@b)[1][3];
	b20 :: (@b)[2][0]; b21 :: (@b)[2][1]; b22 :: (@b)[2][2]; b23 :: (@b)[2][3];
	b30 :: (@b)[3][0]; b31 :: (@b)[3][1]; b32 :: (@b)[3][2]; b33 :: (@b)[3][3];

	(@result)[0][0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;
	(@result)[0][1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;
	(@result)[0][2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;
	(@result)[0][3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;
	(@result)[1][0] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;
	(@result)[1][1] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;
	(@result)[1][2] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;
	(@result)[1][3] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;
	(@result)[2][0] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;
	(@result)[2][1] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;
	(@result)[2][2] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;
	(@result)[2][3] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;
	(@result)[3][0] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;
	(@result)[3][1] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;
	(@result)[3][2] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;
	(@result)[3][3] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;
};

mat4_inverse :: fn (m: *mat4, result: *mat4) #inline {
	t: [6]f32 #noinit;
	det: f32 #noinit;

	a :: (@m)[0][0]; b :: (@m)[0][1]; c :: (@m)[0][2]; d :: (@m)[0][3];
	e :: (@m)[1][0]; f :: (@m)[1][1]; g :: (@m)[1][2]; h :: (@m)[1][3];
	i :: (@m)[2][0]; j :: (@m)[2][1]; k :: (@m)[2][2]; l :: (@m)[2][3];
	m2 :: (@m)[3][0]; n :: (@m)[3][1]; o :: (@m)[3][2]; p :: (@m)[3][3];

	t[0] = k * p - o * l; t[1] = j * p - n * l; t[2] = j * o - n * k;
	t[3] = i * p - m2 * l; t[4] = i * o - m2 * k; t[5] = i * n - m2 * j;

	(@result)[0][0] =  f * t[0] - g * t[1] + h * t[2];
	(@result)[1][0] =-(e * t[0] - g * t[3] + h * t[4]);
	(@result)[2][0] =  e * t[1] - f * t[3] + h * t[5];
	(@result)[3][0] =-(e * t[2] - f * t[4] + g * t[5]);

	(@result)[0][1] =-(b * t[0] - c * t[1] + d * t[2]);
	(@result)[1][1] =  a * t[0] - c * t[3] + d * t[4];
	(@result)[2][1] =-(a * t[1] - b * t[3] + d * t[5]);
	(@result)[3][1] =  a * t[2] - b * t[4] + c * t[5];

	t[0] = g * p - o * h; t[1] = f * p - n * h; t[2] = f * o - n * g;
	t[3] = e * p - m2 * h; t[4] = e * o - m2 * g; t[5] = e * n - m2 * f;

	(@result)[0][2] =  b * t[0] - c * t[1] + d * t[2];
	(@result)[1][2] =-(a * t[0] - c * t[3] + d * t[4]);
	(@result)[2][2] =  a * t[1] - b * t[3] + d * t[5];
	(@result)[3][2] =-(a * t[2] - b * t[4] + c * t[5]);

	t[0] = g * l - k * h; t[1] = f * l - j * h; t[2] = f * k - j * g;
	t[3] = e * l - i * h; t[4] = e * k - i * g; t[5] = e * j - i * f;

	(@result)[0][3] =-(b * t[0] - c * t[1] + d * t[2]);
	(@result)[1][3] =  a * t[0] - c * t[3] + d * t[4];
	(@result)[2][3] =-(a * t[1] - b * t[3] + d * t[5]);
	(@result)[3][3] =  a * t[2] - b * t[4] + c * t[5];

	det = 1.0f / (a * (@result)[0][0] + b * (@result)[1][0]
				+ c * (@result)[2][0] + d * (@result)[3][0]);

	mat4_scale_s(result, det);
}

mat4_scale_s :: fn (m: *mat4, s: f32) #inline {
	(@m)[0][0] *= s; (@m)[0][1] *= s; (@m)[0][2] *= s; (@m)[0][3] *= s;
	(@m)[1][0] *= s; (@m)[1][1] *= s; (@m)[1][2] *= s; (@m)[1][3] *= s;
	(@m)[2][0] *= s; (@m)[2][1] *= s; (@m)[2][2] *= s; (@m)[2][3] *= s;
	(@m)[3][0] *= s; (@m)[3][1] *= s; (@m)[3][2] *= s; (@m)[3][3] *= s;
}

mat4_mul_v4 :: fn (mat: *mat4, v: v4) v4 #inline {
	out: v4 #noinit;
	out.x = (@mat)[0][0] * v.x + (@mat)[1][0] * v.y + (@mat)[2][0] * v.z + (@mat)[3][0] * v.w;
	out.y = (@mat)[0][1] * v.x + (@mat)[1][1] * v.y + (@mat)[2][1] * v.z + (@mat)[3][1] * v.w;
	out.z = (@mat)[0][2] * v.x + (@mat)[1][2] * v.y + (@mat)[2][2] * v.z + (@mat)[3][2] * v.w;
	out.w = (@mat)[0][3] * v.x + (@mat)[1][3] * v.y + (@mat)[2][3] * v.z + (@mat)[3][3] * v.w;
	return out;
}

mat4_mul_v3 :: fn (mat: *mat4, v: v3) v3 #inline {
	out: v3 #noinit;
	out.x = (@mat)[0][0] * v.x + (@mat)[1][0] * v.y + (@mat)[2][0] * v.z + (@mat)[3][0];
	out.y = (@mat)[0][1] * v.x + (@mat)[1][1] * v.y + (@mat)[2][1] * v.z + (@mat)[3][1];
	out.z = (@mat)[0][2] * v.x + (@mat)[1][2] * v.y + (@mat)[2][2] * v.z + (@mat)[3][2];
	return out;
}

/// Initialize `m` matrix as translation matrix.
mat4_init_translation :: fn (m: *mat4, v: v3) #inline {
	mat4_init(
		m,
		1.f, 0.f, 0.f, v.x,
		0.f, 1.f, 0.f, v.y,
		0.f, 0.f, 1.f, v.z,
		0.f, 0.f, 0.f, 1.f
	);
}

/// Multiplies the `m` matrix with translation matrix for `v` and writes the result into the
/// `m` matrix.
mat4_translate :: fn (m: *mat4, v: v3) #inline {
	tm: mat4 #noinit;
	mat4_init_translation(&tm, v);
	mat4_mul(m, &tm, m);
}

/// Gets the translation vector from the `m` matrix.
mat4_get_translation :: fn (m: *mat4) v3 #inline {
	return v3.{ (@m)[3][0], (@m)[3][1], (@m)[3][2] };
}

/// Initialize `m` matrix as scale matrix.
mat4_init_scale :: fn (m: *mat4, s: v3) #inline {
	mat4_init(
		m,
		s.x, 0.f, 0.f, 0.f,
		0.f, s.y, 0.f, 0.f,
		0.f, 0.f, s.z, 0.f,
		0.f, 0.f, 0.f, 1.f
	);
}

/// Multiplies the `m` matrix with scale matrix for `v` and writes the result into the
/// `m` matrix.
mat4_scale :: fn (m: *mat4, v: v3) #inline {
	sm: mat4 #noinit;
	mat4_init_scale(&sm, v);
	mat4_mul(m, &sm, m);
}

/// Gets the scale from the `m` matrix.
mat4_get_scale :: fn (m: *mat4) v3 {
	ret: v3 #noinit;
	tmp_vec := v3.{ (@m)[0][0], (@m)[1][0], (@m)[2][0] };
	ret.x = length(tmp_vec);

	tmp_vec = v3.{ (@m)[0][1], (@m)[1][1], (@m)[2][1] };
	ret.y = length(tmp_vec);

	tmp_vec = v3.{ (@m)[0][2], (@m)[1][2], (@m)[2][2] };
	ret.z = length(tmp_vec);
	return ret;
}

/// Initialize rotation matrix `m` from quaternion `q`.
mat4_init_rotation_quat :: fn (m: *mat4, q: quat) #inline {
	norm :: length(q);
	s := 0.f;
	if norm > 0.f { s = 2.f / norm; }

	x :: q.x;
	y :: q.y;
	z :: q.z;
	w :: q.w;

	xx :: s * x * x;   xy :: s * x * y;   wx :: s * w * x;
	yy :: s * y * y;   yz :: s * y * z;   wy :: s * w * y;
	zz :: s * z * z;   xz :: s * x * z;   wz :: s * w * z;

	(@m)[0][0] = 1.0f - yy - zz;
	(@m)[1][1] = 1.0f - xx - zz;
	(@m)[2][2] = 1.0f - xx - yy;
	(@m)[0][1] = xy + wz;
	(@m)[1][2] = yz + wx;
	(@m)[2][0] = xz + wy;
	(@m)[1][0] = xy - wz;
	(@m)[2][1] = yz - wx;
	(@m)[0][2] = xz - wy;
	(@m)[0][3] = 0.0f;
	(@m)[1][3] = 0.0f;
	(@m)[2][3] = 0.0f;
	(@m)[3][0] = 0.0f;
	(@m)[3][1] = 0.0f;
	(@m)[3][2] = 0.0f;
	(@m)[3][3] = 1.0f;
}

/// Initialize rotation matrix `m` from euler angles `euler` (in radians).
mat4_init_rotation_euler :: fn (m: *mat4, euler: v3) #inline {
	mat4_init_rotation_quat(m, euler_to_quat(euler));
}

/// Rotate the `m` matrix by quaternion `q`.
mat4_rotate_quat :: fn (m: *mat4, q: quat) #inline {
	rm: mat4 #noinit;
	mat4_init_rotation_quat(&rm, q);
	mat4_mul(m, &rm, m);
}

/// Rotate the `m` matrix by euler angles `euler` (in radians).
mat4_rotate_euler :: fn (mat: *mat4, euler: v3) #inline {
	rm: mat4 #noinit;
	mat4_init_rotation_euler(&rm, euler);
	mat4_mul(mat, &rm, mat);
}

/// Gets quaternion rotation from `m` matrix.
mat4_get_quat :: fn (m: *mat4) quat {
	r: f32 #noinit;
	rinv: f32 #noinit;
	out: quat #noinit;

	trace := (@m)[0][0] + (@m)[1][1] + (@m)[2][2];
	if trace >= 0.0f {
		r       = std.sqrt(1.0f + trace);
		rinv    = 0.5f / r;

		out.x = rinv * ((@m)[1][2] - (@m)[2][1]);
		out.y = rinv * ((@m)[2][0] - (@m)[0][2]);
		out.z = rinv * ((@m)[0][1] - (@m)[1][0]);
		out.w = r    * 0.5f;
	} else if ((@m)[0][0] >= (@m)[1][1] && (@m)[0][0] >= (@m)[2][2]) {
		r       = std.sqrt(1.0f - (@m)[1][1] - (@m)[2][2] + (@m)[0][0]);
		rinv    = 0.5f / r;

		out.x = r    * 0.5f;
		out.y = rinv * ((@m)[0][1] + (@m)[1][0]);
		out.z = rinv * ((@m)[0][2] + (@m)[2][0]);
		out.w = rinv * ((@m)[1][2] - (@m)[2][1]);
	} else if ((@m)[1][1] >= (@m)[2][2]) {
		r       = std.sqrt(1.0f - (@m)[0][0] - (@m)[2][2] + (@m)[1][1]);
		rinv    = 0.5f / r;

		out.x = rinv * ((@m)[0][1] + (@m)[1][0]);
		out.y = r    * 0.5f;
		out.z = rinv * ((@m)[1][2] + (@m)[2][1]);
		out.w = rinv * ((@m)[2][0] - (@m)[0][2]);
	} else {
		r       = std.sqrt(1.0f - (@m)[0][0] - (@m)[1][1] + (@m)[2][2]);
		rinv    = 0.5f / r;

		out.x = rinv * ((@m)[0][2] + (@m)[2][0]);
		out.y = rinv * ((@m)[1][2] + (@m)[2][1]);
		out.z = r    * 0.5f;
		out.w = rinv * ((@m)[0][1] - (@m)[1][0]);
	}

	return out;
};

quat_normalize :: fn (q: quat) quat #inline {
	return normalize(q);
}

quat_axis_angle :: fn (axis: v3, angle_rad: f32) quat {
	a :: angle_rad * 0.5f;
	c :: std.cos(a);
	s :: std.sin(a);

	normalized_axis :: normalize(axis);

	return quat.{
		s * normalized_axis.x,
		s * normalized_axis.y,
		s * normalized_axis.z,
		c
	};
}

quat_to_euler :: fn (q1: quat) v3 {
	using std;

	test := q1.x*q1.y + q1.z*q1.w;
	if test > 0.499f {
		return v3.{
			0.f,
			2.f * atan2(q1.x,q1.w),
			F32_HALF_PI,
		};
	}
	if test < -0.499f {
		return v3. {
			0.f,
			-2.f * atan2(q1.x,q1.w),
			-F32_HALF_PI,
		};
	}
	sqx := q1.x*q1.x;
	sqy := q1.y*q1.y;
	sqz := q1.z*q1.z;
	return v3.{
	atan2(2.f*q1.x*q1.w-2.f*q1.y*q1.z , 1.f - 2.f*sqx - 2.f*sqz),
		atan2(2.f*q1.y*q1.w-2.f*q1.x*q1.z , 1.f - 2.f*sqy - 2.f*sqz),
	asin(2.f*test),
	};
}

euler_to_quat :: fn (euler: v3) quat #inline {
	qx :: quat_axis_angle(v3.{ x = 1.f }, euler.x);
	qy :: quat_axis_angle(v3.{ y = 1.f }, euler.y);
	qz :: quat_axis_angle(v3.{ z = 1.f }, euler.z);

	return quat_mul(quat_mul(qz, qy), qx);
}

quat_imag :: fn (q: quat) v3 #inline {
	return v3.{ q.x, q.y, q.z };
}

quat_real :: fn (q: quat) f32 #inline {
	return q.w;
}

quat_mul :: fn (q1: quat, q2: quat) quat {
	return quat.{
		q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y,
		q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x,
		q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w,
		q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z,
	};
}

quat_rotate_v3 :: fn (q: quat, v: v3) v3 {
	p :: quat_normalize(q);
	u :: quat_imag(p);
	s :: quat_real(p);

	v1 := mul(u, 2.0f * v3_dot(u, v));
	v2 := mul(v, s * s - v3_dot(u, u));
	v1 = add(v1, v2);
	v2 = cross(u, v);
	v2 = mul(v2, 2.f * s);
	return add(v1, v2);
}

quat_forward :: fn (q: quat) v3 {
	x2 :: 2.0f * q.x;
	y2 :: 2.0f * q.y;
	z2 :: 2.0f * q.z;
	x2w :: x2 * q.w;
	y2w :: y2 * q.w;
	x2x :: x2 * q.x;
	z2x :: z2 * q.x;
	y2y :: y2 * q.y;
	z2y :: z2 * q.y;
	return v3.{ z2x + y2w, z2y - x2w, 1.0f - (x2x + y2y) };
}

lerp :: fn (a: ?T, b: T, t: f32) T #inline {
#if T == v2 || T == v3 || T == v4 {
	return add(a, mul(sub(b, a), t));
} else {
	return std.lerp(a, b, t);
}
}

distance :: fn (a: ?T, b: T) f32 #inline {
	return length(sub(b, a));
}

sqr_distance :: fn (a: ?T, b: T) f32 #inline {
	return sqr_length(sub(b, a));
}

#private
// =================================================================================================
// sub
// =================================================================================================
v2_sub :: fn (a: v2, b: v2) v2 #inline {
	return v2.{ a.x - b.x, a.y - b.y };
};

v2_sub_s :: fn (a: v2, v: f32) v2 #inline {
	return v2.{ a.x - v, a.y - v };
};

v3_sub :: fn (a: v3, b: v3) v3 #inline {
	return v3.{ a.x - b.x, a.y - b.y, a.z - b.z };
};

v3_sub_s :: fn (a: v3, b: f32) v3 #inline {
	return v3.{ a.x - b, a.y - b, a.z - b };
};

v4_sub :: fn (a: v4, b: v4) v4 #inline {
	return v4.{ a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w };
};

v4_sub_s :: fn (a: v4, b: f32) v4 #inline {
	return v4.{ a.x - b, a.y - b, a.z - b, a.w - b };
};

// =================================================================================================
// add
// =================================================================================================
v2_add :: fn (a: v2, b: v2) v2 #inline {
	return v2.{ a.x + b.x, a.y + b.y };
};

v2_add_s :: fn (a: v2, v: f32) v2 #inline {
	return v2.{ a.x + v, a.y + v };
};

v3_add :: fn (a: v3, b: v3) v3 #inline
{
	return v3.{ a.x + b.x, a.y + b.y, a.z + b.z };
};

v3_add_s :: fn (a: v3, b: f32) v3 #inline {
	return v3.{ a.x + b, a.y + b, a.z + b };
};

v4_add :: fn (a: v4, b: v4) v4 #inline
{
	return v4.{ a.x + b.x, a.y + b.y, a.z + b.z, a.w - b.w };
};

v4_add_s :: fn (a: v4, b: f32) v4 #inline {
	return v4.{ a.x + b, a.y + b, a.z + b, a.w - b };
};

// =================================================================================================
// mul
// =================================================================================================
v2_mul :: fn (a: v2, b: v2) v2 #inline {
	return v2.{ a.x * b.x, a.y * b.y };
};

v2_mul_s :: fn (a: v2, v: f32) v2 #inline {
	return v2.{ a.x * v, a.y * v };
};

v3_mul :: fn (a: v3, b: v3) v3 #inline {
	return v3.{ a.x * b.x, a.y * b.y, a.z * b.z };
};

v3_mul_s :: fn (a: v3, b: f32) v3 #inline {
	return v3.{ a.x * b, a.y * b, a.z * b };
};

v4_mul :: fn (a: v4, b: v4) v4 #inline {
	return v4.{ a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w };
};

v4_mul_s :: fn (v: v4, b: f32) v4 #inline {
	return v4.{ v.x * b, v.y * b, v.z * b, v.w * b };
}

// =================================================================================================
// length
// =================================================================================================
v2_length :: fn (v: v2) f32 #inline {
	return std.sqrt(v.x * v.x + v.y * v.y);
}

v3_length :: fn (v: v3) f32 #inline {
	return std.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
}

v4_length :: fn (v: v4) f32 #inline {
	return std.sqrt(v.x * v.x + v.y * v.y + v.z * v.z + v.w * v.w);
}

// =================================================================================================
// sqr_length
// =================================================================================================
v2_sqr_length :: fn (v: v2) f32 #inline {
	return v.x * v.x + v.y * v.y;
}

v3_sqr_length :: fn (v: v3) f32 #inline {
	return v.x * v.x + v.y * v.y + v.z * v.z;
}

v4_sqr_length :: fn (v: v4) f32 #inline {
	return v.x * v.x + v.y * v.y + v.z * v.z + v.w * v.w;
}

// =================================================================================================
// dot
// =================================================================================================
v2_dot :: fn (a: v2, b: v2) f32 #inline {
	return a.x * b.x + a.y * b.y;
};

v3_dot :: fn (a: v3, b: v3) f32 #inline {
	return a.x * b.x + a.y * b.y + a.z * b.z;
};

v4_dot :: fn (a: v4, b: v4) f32 #inline {
	return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
};

// =================================================================================================
// normalize
// =================================================================================================
v2_normalize :: fn (a: v2) v2 #inline {
	out: v2;
	l :: v2_length(a);
	if std.compare(l, 0.f, std.F32_EPSILON) { return out; }
	out.x = a.x / l;
	out.y = a.y / l;
	return out;
};

v3_normalize :: fn (a: v3) v3 #inline {
	l :: v3_length(a);
	if std.compare(l, 0.f, std.F32_EPSILON) { return v3_zero; }
	out: v3 #noinit;
	out.x = a.x / l;
	out.y = a.y / l;
	out.z = a.z / l;
	return out;
};

v4_normalize :: fn (v: v4) v4 #inline {
	l :: v4_length(v);
	if std.compare(l, 0.f, std.F32_EPSILON) { return v4_zero; }
	out: v4 #noinit;
	out.x = v.x / l;
	out.y = v.y / l;
	out.z = v.z / l;
	out.w = v.w / l;
	return out;
};

// =================================================================================================
// compare
// =================================================================================================
// @Incomplete: epsilon with default value?
v2_compare :: fn (a: v2, b: v2, epsilon := std.F32_EPSILON) bool #inline {
	return std.compare(a.x, b.x, epsilon) && std.compare(a.y, b.y, epsilon);
}

v3_compare :: fn (a: v3, b: v3, epsilon := std.F32_EPSILON) bool {
	return std.compare(a.x, b.x, epsilon)
		&& std.compare(a.y, b.y, epsilon)
		&& std.compare(a.z, b.z, epsilon);
}

v4_compare :: fn (a: v4, b: v4, epsilon := std.F32_EPSILON) bool {
	return std.compare(a.x, b.x, epsilon)
		&& std.compare(a.y, b.y, epsilon)
		&& std.compare(a.z, b.z, epsilon)
		&& std.compare(a.w, b.w, epsilon);
}

// =================================================================================================
// negate
// =================================================================================================
v2_negate :: fn (v: v2) v2 #inline {
	return v2.{ -v.x, -v.y };
}

v3_negate :: fn (v: v3) v3 #inline {
	return v3.{ -v.x, -v.y, -v.z };
}

v4_negate :: fn (v: v4) v4 #inline {
	return v4.{ -v.x, -v.y, -v.z, -v.w };
}

// =================================================================================================
// cross
// =================================================================================================
v3_cross :: fn (a: v3, b: v3) v3 #inline {
	out: v3 #noinit;
	out.x = a.y * b.z - a.z * b.y;
	out.y = a.z * b.x - a.x * b.z;
	out.z = a.x * b.y - a.y * b.x;
	return out;
}

// =================================================================================================
// cross
// =================================================================================================
v2_div :: fn (a: v2, b: v2) v2 #inline {
	if b.x == 0.f { return v2_zero; }
	if b.y == 0.f { return v2_zero; }
	return v2.{ a.x / b.x, a.y / b.y };
}

v2_div_s :: fn (v: v2, s: f32) v2 #inline {
	if s == 0.f { return v2_zero; }
	return v2.{ v.x / s, v.y / s };
}

v3_div :: fn (a: v3, b: v3) v3 #inline {
	if b.x == 0.f { return v3_zero; }
	if b.y == 0.f { return v3_zero; }
	if b.z == 0.f { return v3_zero; }
	return v3.{ a.x / b.x, a.y / b.y, a.z / b.z };
}

v3_div_s :: fn (v: v3, s: f32) v3 #inline {
	if s == 0.f { return v3_zero; }
	return v3.{ v.x / s, v.y / s, v.z / s };
}

v4_div :: fn (a: v4, b: v4) v4 #inline {
	if b.x == 0.f { return v4_zero; }
	if b.y == 0.f { return v4_zero; }
	if b.z == 0.f { return v4_zero; }
	if b.w == 0.f { return v4_zero; }
	return v4.{ a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w };
}

v4_div_s :: fn (v: v4, s: f32) v4 #inline {
	if s == 0.f { return v4_zero; }
	return v4.{ v.x / s, v.y / s, v.z / s, v.w / s };
}

v2_round :: fn (v: v2) v2 #inline {
	return v2.{ std.round(v.x), std.round(v.y) };
}

v3_round :: fn (v: v3) v3 #inline {
	return v3.{ std.round(v.x), std.round(v.y), std.round(v.z) };
}

v4_round :: fn (v: v4) v4 #inline {
	return v4.{ std.round(v.x), std.round(v.y), std.round(v.z), std.round(v.w) };
}

v2_floor :: fn (v: v2) v2 #inline {
	return v2.{ std.floor(v.x), std.floor(v.y) };
}

v3_floor :: fn (v: v3) v3 #inline {
	return v3.{ std.floor(v.x), std.floor(v.y), std.floor(v.z) };
}

v4_floor :: fn (v: v4) v4 #inline {
	return v4.{ std.floor(v.x), std.floor(v.y), std.floor(v.z), std.floor(v.w) };
}

v2_ceil :: fn (v: v2) v2 #inline {
	return v2.{ std.ceil(v.x), std.ceil(v.y) };
}

v3_ceil :: fn (v: v3) v3 #inline {
	return v3.{ std.ceil(v.x), std.ceil(v.y), std.ceil(v.z) };
}

v4_ceil :: fn (v: v4) v4 #inline {
	return v4.{ std.ceil(v.x), std.ceil(v.y), std.ceil(v.z), std.ceil(v.w) };
}


/*
quat_look :: fn (eye: v3, ori: quat, out_mat: *mat4) {
	quat_to_mat4(ori, out_mat);

	v := v4.{ eye.x, eye.y, eye.z, 1.f };
	v = mat4_mul_v4(out_mat, v);

	(@out_mat)[3][0] = -v.x;
	(@out_mat)[3][1] = -v.y;
	(@out_mat)[3][2] = -v.z;
}

quat_look_for :: fn (dir: v3, fwd: v3, up: v3) quat {
	d :: dot(dir, fwd);
	if std.abs(d+ 1.0f)  < 0.000001f {
		return quat.{ up.x, up.y, up.z, auto std.PI };
	}

	if std.abs(d - 1.0f) < 0.000001f {
		return quat_identity;
	}

	angle :: std.acos(d);
	axis := cross(fwd, dir);
	axis = normalize(axis);
	return quat_axis_angle(axis, angle);
}
*/
