#load "extra/build-lib-common.bl"

build :: fn () #build_entry {
	tmpdir :: get_temporary();
	unzip("SDL3-3.2.8.zip");

	rootdir :: get_cwd();
	create_dir("SDL3-3.2.8/build");

	using Platform;
	switch PLATFORM {
		WINDOWS {
			set_cwd("SDL3-3.2.8/build");
			cmake(
				"..",
				"--fresh",
				"-DSDL_SHARED=ON",
				"-DSDL_STATIC=ON",
				"-DSDL_TEST_LIBRARY=OFF",
				"-DSDL_EXAMPLES=OFF",
				"-DCMAKE_POLICY_VERSION_MINIMUM=3.5",
				tprint("-DCMAKE_INSTALL_PREFIX=%", tmpdir),
			);
			cmake("--build", ".", "--config=Release", "--target=Install");
			set_cwd(rootdir);
			create_dir("win32");
			copy_file(tprint("%/bin/SDL3.dll", tmpdir), "win32/SDL3.dll", true);
			copy_file(tprint("%/lib/SDL3.lib", tmpdir), "win32/SDL3.lib", true);
			copy_file(tprint("%/lib/SDL3-static.lib", tmpdir), "win32/SDL3_static.lib", true);
		}
		LINUX {
			set_cwd("SDL3-3.2.8/build");
			cmake(
				"..",
				"--fresh",
				"-DSDL_SHARED=ON",
				"-DSDL_STATIC=ON",
				"-DSDL_TEST_LIBRARY=OFF",
				"-DSDL_EXAMPLES=OFF",
				"-DCMAKE_POSITION_INDEPENDENT_CODE=ON",
				tprint("-DCMAKE_INSTALL_PREFIX=%", tmpdir),
			);
			make("install");

			set_cwd(rootdir);
			create_dir("linux");
			os_execute(tprint("cp -d %/lib/libSDL* linux/", tmpdir));
		}
		DARWIN {
			set_cwd("SDL3-3.2.8/build");
			cmake(
				"..",
				"--fresh",
				"-DSDL_SHARED=ON",
				"-DSDL_STATIC=ON",
				"-DSDL_TEST_LIBRARY=OFF",
				"-DSDL_EXAMPLES=OFF",
				"-DCMAKE_POSITION_INDEPENDENT_CODE=ON",
				"-DCMAKE_OSX_DEPLOYMENT_TARGET=12.0",
				"-DCMAKE_MACOSX_RPATH=ON",
				tprint("-DCMAKE_INSTALL_PREFIX=%", tmpdir),
			);
			make("install");

			set_cwd(rootdir);
			create_dir("macos");
			os_execute(tprint("cp -P %/lib/libSDL* macos/", tmpdir));
		}
		default;
	}

	set_cwd(rootdir);
	os_execute("rm -rf SDL3-3.2.8");
}