FileWatch :: struct {
	events:      StaticArray(WatchEvent, 512);
	events_lock: Mutex;

	thread: Thread;

	watches:      Table(string, Watch);
	watches_lock: Mutex;

	stop: bool;
}

WatchEvent :: struct {
	kind: enum {
		IGNORE;
		DIR_CHANGED;
		FILE_CHANGED;
		DIR_REMOVED;
		FILE_REMOVED;
	};
	path:      string_view;
	timestamp: u64;
}

new_filewatch :: fn () (*FileWatch, Error) {
	fw :: new(FileWatch) catch return null, $;

	mutex_init(&fw.watches_lock) catch {
		free(auto fw);
		return null, $;
	};

	mutex_init(&fw.events_lock) catch {
		free(auto fw);
		return null, $;
	};

	thread :: thread_create(auto &worker, auto fw) catch {
		free(auto fw);
		mutex_terminate(&fw.watches_lock);
		return null, $;
	};

	fw.thread = thread;

	return fw, OK;
}

delete_filewatch :: fn (fw: *FileWatch) {
	if !fw then return;

	fw.stop = true;
	thread_join(fw.thread);

	paths   : []string : fw.watches.keys;
	watches : []Watch  : fw.watches.values;
	loop i := 0; i < watches.len; i += 1 {
		using Watch.kind;
		switch watches[i].kind {
			DIR {
				terminate_dir_watch(&watches[i]);
			}
			FILE {
				terminate_file_watch(&watches[i]);
			}
		}

		str_terminate(&paths[i]);
	}

	tbl_terminate(&fw.watches);

	mutex_terminate(&fw.watches_lock);
	mutex_terminate(&fw.events_lock);

	free(auto fw);
}

watch_changes :: fn (fw: *FileWatch, path: string_view) Error {
	mutex_lock(&fw.watches_lock);
	defer mutex_unlock(&fw.watches_lock);

	if !file_exist(path) then return error("File '%' not found.", path);
	if tbl_contains(&fw.watches, .{ path.len, path.ptr }) then return error("File '%' is already watched.", path);

	isdir :: is_directory(path) catch {
		return $;
	};

	w: Watch;
	if isdir {
		init_dir_watch(&w, path) catch return $;
	} else {
		init_file_watch(&w, path) catch return $;
	}
	tbl_insert(&fw.watches, str_make(path), w);

	return OK;
}

unwatch_changes :: fn (fw: *FileWatch, path: string_view) Error {
	mutex_lock(&fw.watches_lock);
	defer mutex_unlock(&fw.watches_lock);

	index :: tbl_lookup_index(&fw.watches, .{ path.len, path.ptr });
	if index == -1 then return error("File '%' is not tracked by the file watcher.", path);

	using Watch.kind;
	switch fw.watches.values[index].kind {
		DIR {
			terminate_dir_watch(&fw.watches.values[index]);
		}
		FILE {
			terminate_file_watch(&fw.watches.values[index]);
		}
	}

	key :: fw.watches.keys[index];
	tbl_erase(&fw.watches, key);
	str_terminate(&key);

	return OK;
}

is_watched :: fn (fw: *FileWatch, path: string_view) bool #inline {
	mutex_lock(&fw.watches_lock);
	defer mutex_unlock(&fw.watches_lock);

	return tbl_contains(&fw.watches, .{ path.len, path.ptr });
}

poll_file_changes :: fn (fw: *FileWatch, event: *WatchEvent) bool {
	mutex_lock(&fw.events_lock);
	defer mutex_unlock(&fw.events_lock);

	return sarray_pop(&fw.events, event);
}

#scope_module

#import "std/fs"
#import "std/thread"
#import "std/sync"
#import "std/static_array"
#import "std/table"
#import "std/string"
#import "std/array"

Watch :: struct {
	kind: enum { FILE; DIR; };
	data: union {
		file: struct {
			timestamp: u64;
		};
		dir: WatchDirData;
	};
	is_removed: bool;
}

schedule_dir_event :: fn (w: *Watch, kind: WatchEvent.kind) {
	assert(kind != WatchEvent.kind.IGNORE);
	w.data.dir.event   = kind;
	w.data.dir.timeout = os_tick_ms();
}

process_watch :: fn (fw: *FileWatch, w: *Watch, path: string_view) Error {
	using Watch.kind;
	using WatchEvent.kind;

	event: WatchEvent;

	switch w.kind {
		DIR {
			process_watch_dir(fw, w, path) catch return $;

			if w.data.dir.event != IGNORE {
				if (os_tick_ms() - w.data.dir.timeout) > 1000 {
					event.kind = w.data.dir.event;

					w.data.dir.event   = IGNORE;
					w.data.dir.timeout = 0;
				}
			}
		}

		FILE {
			timestamp, timestamp_err :: get_file_timestamp(path);
			if timestamp_err {
				if !w.is_removed {
					event.kind = FILE_REMOVED;
					w.data.file.timestamp = -1;
					w.is_removed = true;
				}
			} else if timestamp != w.data.file.timestamp {
				event.kind            = FILE_CHANGED;
				event.timestamp       = timestamp;
				w.data.file.timestamp = timestamp;
				w.is_removed          = false;
			}
		}
	}

	if event.kind == IGNORE then return OK;

	{
		mutex_lock(&fw.events_lock);
		defer mutex_unlock(&fw.events_lock);

		loop fw.events.len + 1 > fw.events.data.len {
			if fw.stop then return OK;

			// Give chance to consume events in case the queue is full.
			mutex_unlock(&fw.events_lock);
			os_sleep_ms(200);
			mutex_lock(&fw.events_lock);
		}

		event.path = path;
		sarray_push(&fw.events, event);
	}
	return OK;
}

#scope_private

init_file_watch :: fn (w: *Watch, dirpath: string_view) Error {
	w.kind = Watch.kind.FILE;
	timestamp :: get_file_timestamp(dirpath) catch return $;
	w.data.file.timestamp = timestamp;
	return OK;
}

terminate_file_watch :: fn (_: *Watch) {}

worker :: fn (fw: *FileWatch) s32 {

	loop !fw.stop {

		{
			mutex_lock(&fw.watches_lock);
			defer mutex_unlock(&fw.watches_lock);

			watches : []Watch  : fw.watches.values;
			paths   : []string : fw.watches.keys;

			loop i := 0; i < watches.len && !fw.stop; i += 1 {
				process_watch(fw, &watches[i], paths[i]) catch {
					print_err($);
				};
			}
		}

		temporary_reset();
		os_sleep_ms(200);
	}

	temporary_release();

	return 0;
}
