FileWatch :: FileWatchBase;

#scope_module

WatchDirData :: struct {
	handle:   HANDLE;
	event:    WatchEvent.kind;
	timeout:  u64;
}

init_dir_watch :: fn (_: *FileWatch, w: *Watch, dirpath: string_view) Error {
	w.kind = Watch.kind.DIR;
	return install_dir_recursive(w, dirpath);
}

terminate_dir_watch :: fn (w: *Watch) {
	FindCloseChangeNotification(w.data.dir.handle);
}

get_file_timestamp :: fn (filepath: string_view) (t: u64, err: Error) {
	attributes: WIN32_FILE_ATTRIBUTE_DATA;
	if GetFileAttributesExA(strtoc(filepath), GET_FILEEX_INFO_LEVELS.GetFileExInfoStandard, auto &attributes) == TRUE {
		tmp: union {
			wt: FILETIME;
			t: u64;
		};
		tmp.wt = attributes.ftLastWriteTime;
		return tmp.t, OK;
	}

	return 0, os_get_last_error2();
}

worker_on_init :: fn (_: *FileWatch) {}

worker_on_terminate :: fn (_: *FileWatch) {}

poll_event_loop :: fn (_: *FileWatch) {}

process_watch_dir :: fn (_: *FileWatch, w: *Watch, path: string_view) Error {
	using WatchEvent.kind;

	if !file_exist(path) {
		if !w.is_removed {
			FindCloseChangeNotification(w.data.dir.handle);

			w.is_removed = true;
			schedule_event(w, DIR_REMOVED);
		}
	} else if w.is_removed {
		w.is_removed = false;
		install_dir_recursive(w, path) catch return $;
		schedule_event(w, DIR_CHANGED);
	} else {
		assert(!w.is_removed);

		if WaitForSingleObject(w.data.dir.handle, 0) == auto WAIT_OBJECT_0 {
			schedule_event(w, DIR_CHANGED);
			if FindNextChangeNotification(w.data.dir.handle) == FALSE {
				return os_get_last_error2();
			}
		}
	}
	return OK;
}

#scope_private
#import "os/windows"

WATCH_FLAGS :: FILE_NOTIFY_CHANGE_FILE_NAME | FILE_NOTIFY_CHANGE_DIR_NAME;
install_dir_recursive :: fn (w: *Watch, dirpath: string_view) Error {
	handle :: FindFirstChangeNotificationA(strtoc(dirpath), TRUE, auto WATCH_FLAGS);
	if handle == INVALID_HANDLE {
		return os_get_last_error2();
	}
	w.data.dir.handle = handle;
	return OK;
}
