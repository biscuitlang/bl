// =================================================================================================
// bl
//
// File:   windows.bl
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =================================================================================================

OsStdIoStream :: struct #base io.Stream {
	handle: HANDLE;
}

OS_NAME :: "Windows";

OS_PATH_MAX :: MAX_PATH;

ERR_UNKNOWN        :: -1;
ERR_NOT_FOUND      :: ERROR_FILE_NOT_FOUND;
ERR_ALREADY_EXIST  :: ERROR_FILE_EXISTS;
ERR_ACCESS_DENIED  :: ERROR_ACCESS_DENIED;
ERR_INVALID_HANDLE :: ERROR_INVALID_HANDLE;
ERR_DIRECTORY      :: ERROR_DIRECTORY;

os_stdin :: fn () *OsStdIoStream {
	if !_std_io_initialized { init_std_io(); }
	return &_std_in;
}

os_stdout :: fn () *OsStdIoStream {
	if !_std_io_initialized { init_std_io(); }
	return &_std_out;
}

os_stderr :: fn () *OsStdIoStream {
	if !_std_io_initialized { init_std_io(); }
	return &_std_err;
}

os_sleep_ms :: fn (ms: u32) #inline {
	Sleep(ms);
};

os_tick_ms :: fn () u64 #inline {
	return auto os_ftick_ms();
};

os_ftick_ms :: fn () f64 #inline {
	f: LARGE_INTEGER #noinit;
	t: LARGE_INTEGER #noinit;

	if QueryPerformanceFrequency(&f) == 0 { return 0.; }
	if QueryPerformanceCounter(&t) == 0 { return 0.; }
	return (cast(f64) t / cast(f64) f) * 1000.;
};

os_get_exec_path :: fn () string {
	buf : [OS_PATH_MAX]u8 #noinit;
	if GetModuleFileNameA(null, auto buf.ptr, auto buf.len) > 0 {
		result :: str_new(buf.ptr);
		str_replace_all(&result, '\\', '/');
		return result;
	}

	return str_new();
}

// @Incomplete 2025-02-11: Should take allocator passed to strtoc.
os_execute :: fn (command: string_view) s32 {
	return C.system(strtoc(command));
}

os_get_last_error :: fn () (s32, string_view) #inline {
	ec :: cast(s32) GetLastError();
	if ec == 0 { return 0, "No error."; }

	msg_len :: FormatMessageA(
		FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_MAX_WIDTH_MASK,
		null,
		auto ec,
		0,
		_last_error_msg_buffer.ptr,
		auto _last_error_msg_buffer.len,
		null);

	if msg_len == 0 { return ec, "Unknown error."; }
	return ec, ctostr(_last_error_msg_buffer.ptr, auto msg_len);
}

os_get_last_error2 :: fn () Error #inline {
	ec, estr :: os_get_last_error();
	return error(ec, estr);
}

os_get_backtrace :: fn (skip_frames := 0, max_frame_count := 64) []CodeLocation {
	trace: [..]CodeLocation;
	if max_frame_count < 1 { return trace; }
	allocator :: application_context.temporary_allocator; // In case we change allocator we should call free!
	stack: []C.void_ptr;
	err_slice_alloc :: alloc_slice(&stack, max_frame_count, false, allocator);
	if err_slice_alloc { panic(err_slice_alloc); }

	process :: GetCurrentProcess();
	SymSetOptions(SYMOPT_LOAD_LINES);
	SymInitialize(process, null, TRUE);
	defer SymCleanup(process);
	available_frame_count :: cast(s32) CaptureStackBackTrace(0, auto stack.len, stack.ptr, null);
	symbol_mem, err_symbol_alloc  :: alloc(sizeof(SYMBOL_INFO) + MAX_SYM_NAME * sizeof(WCHAR), DEFAULT_ALIGNMENT, allocator);
	if err_symbol_alloc { panic(err_symbol_alloc); }
	symbol := cast(PSYMBOL_INFO) symbol_mem;
	symbol.MaxNameLen   = auto MAX_SYM_NAME;
	symbol.SizeOfStruct = auto sizeof(SYMBOL_INFO);
	line: IMAGEHLP_LINE64;
	displacementLine: DWORD;

	skip_frames_without_current :: skip_frames + 1; // Ignore this function frame.
	array_init(&trace, 0, allocator);
	loop i := skip_frames_without_current; i < available_frame_count; i += 1 {
		SymFromAddr(process, auto (stack[i]), null, symbol);
		SymGetLineFromAddr64(process, auto (stack[i]), &displacementLine, &line);
		frame := array_push(&trace);
		frame.file = str_new(ctostr(line.FileName), allocator);
		frame.line = auto line.LineNumber;
		frame.function = str_new(ctostr(auto symbol.Name.ptr), allocator);
	}
	return trace;
}

// This is internally called from runtime when `debugbreak` is reached. Basically this when execution
// reach the `debugbreak` builtin expression, compiler will use internal break handling for compile-time
// execution (using interpreter) and replace this expression with call to this function in runtime.
__os_debug_break :: fn () #inline #compiler {
	if IsDebuggerPresent() != 0 {
		DebugBreak();
	}
}

// This is internally called from runtime when execution reach unreachable code path.
// Should not be called from interpreter.
__os_abort :: fn () #compiler {
	#if IS_DEBUG { __os_debug_break(); }
	application_context.abort_fn();
}

__os_abort_default :: fn () #inline {
	if !IS_COMPTIME_RUN { print_backtrace(); }
	C.raise(C.SIGABRT);
}

__os_start :: fn () #entry {
	// Get command-line arguments passed to this executable.
	// We need custom function here to convert UTF16 to UTF8,
	// Windows api does not provide UTF8 version of CommandLineToArgv
	// function.
	// Internal allocation to handle argument strings is done
	// in this method, so we must free memory used by return value
	// by free(args.ptr) call.
	get_command_line_args :: fn (out_args: *[]string_view) #noinline {
		wargs: []*u16;
		cmd_line :: GetCommandLineW();
		wargs.ptr = CommandLineToArgvW(cmd_line, auto &wargs.len);
		defer LocalFree(auto wargs.ptr);

		// Determinate size needed for all argument strings listed in one array including
		// zero terminator for each one.
		tmp_size : usize = 0;
		result_size: usize = sizeof(string_view) * auto wargs.len;

		loop i := 0; i < wargs.len; i += 1 {
			tmp_size += auto WideCharToMultiByte(CP_UTF8, null, wargs[i], -1, null, 0, null, null);
		}

		buffer :: C.malloc(result_size + tmp_size);
		if buffer == null { __os_abort(); }

		out_args.len = wargs.len;
		out_args.ptr = auto buffer;
		tmp := string_view.{ auto tmp_size, ptr_shift_bytes(buffer, auto result_size) };

		tmp_i := 0;
		loop i := 0; i < wargs.len; i += 1 {
			len :: WideCharToMultiByte(CP_UTF8, null, wargs[i], -1, null, 0, null, null);
			WideCharToMultiByte(CP_UTF8, null, wargs[i], auto C.wcslen(wargs[i]), auto &tmp[tmp_i], len, null, null);

			(@out_args)[i].len = len - 1;
			(@out_args)[i].ptr = &tmp[tmp_i];
			tmp_i += len;
			tmp[tmp_i-1] = '\0';
		}
	};

	args: []string_view;
	get_command_line_args(&args);

	command_line_arguments.len = args.len;
	command_line_arguments.ptr = args.ptr;

	if !_std_io_initialized { init_std_io(); }

	
	out :: cast(s32) __assembly_module.main();
	temporary_release();

	C.free(auto args.ptr);
	C.exit(out);
}

#scope_private
#import "os/windows"
#import "std/string"
#import "std/array"

io :: #import "std/io";
C  :: #import "libc";


_last_error_msg_buffer: [256]s8 #thread_local;

STD_IN_STREAM_VTABLE :: io.StreamVTable.{
	read = auto &std_io_read
};

STD_OUT_STREAM_VTABLE :: io.StreamVTable.{
	write = auto &std_io_write,
};

// We use standard file descriptors and related libc functions on UNIX, but here we use winapi functions
// for file stream manipulation, we can eventualy consider use of some other methods like WriteConsole, to
// skip the lazy-initialized streams here.
// Can we get into situation the streams get initialized from multiple threads???

_std_io_initialized := false;
_std_in  := OsStdIoStream.{ io.Stream.{ vtable = &STD_IN_STREAM_VTABLE }  };
_std_out := OsStdIoStream.{ io.Stream.{ vtable = &STD_OUT_STREAM_VTABLE } };
_std_err := OsStdIoStream.{ io.Stream.{ vtable = &STD_OUT_STREAM_VTABLE } };

init_std_io :: fn () {
	assert(!_std_io_initialized);
	_std_in.handle   = GetStdHandle(STD_INPUT_HANDLE);
	_std_out.handle  = GetStdHandle(STD_OUTPUT_HANDLE);
	_std_err.handle  = GetStdHandle(STD_ERROR_HANDLE);
	SetConsoleOutputCP(CP_UTF8);
	_std_io_initialized = true;
}

std_io_write :: fn (stream: *OsStdIoStream, src: *u8, size: s64) (s64, Error) {
	if !stream.handle { return 0, error(ERR_INVALID_HANDLE, "Cannot write into standard output, the stream is closed."); }
	if !src { return 0, error(ERR_INVALID_HANDLE, "Cannot write, source is invalid."); }
	written_bytes: DWORD #noinit;
	if WriteFile(stream.handle, src, auto size, &written_bytes, null) == 0 {
		ec, estr :: os_get_last_error();
		return 0, error(ec, "Cannot write: %", estr);
	}
	return auto written_bytes, OK;
}

std_io_read :: fn (stream: *OsStdIoStream, dest: *u8, size: s64) (s64, Error) {
	if !stream.handle { return 0, error(ERR_INVALID_HANDLE, "Cannot read from standard output, the stream is closed."); }
	if !dest { return 0, error(ERR_INVALID_HANDLE, "Cannot read, destination is invalid."); }
	read_bytes: DWORD #noinit;
	if ReadFile(stream.handle, dest, auto size, &read_bytes, null) == 0 {
		ec, estr :: os_get_last_error();
		return 0, error(ec, "Cannot read: %", estr);
	}
	return auto read_bytes, OK;
}

