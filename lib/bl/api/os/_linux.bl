// =================================================================================================
// bl
//
// File:   linux.bl
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =================================================================================================

OsStdIoStream :: struct #base io.Stream {
	handle: C.int;
}

OS_NAME :: "Linux";

OS_PATH_MAX :: 1024;

ERR_UNKNOWN        :: -1;
ERR_NOT_FOUND      :: C.ENOENT;
ERR_ALREADY_EXIST  :: C.EEXIST;
ERR_ACCESS_DENIED  :: C.EACCES;
ERR_INVALID_HANDLE :: C.EBADF;
ERR_DIRECTORY      :: C.EISDIR;

os_stdin :: fn () *OsStdIoStream {
	return &_std_in;
}

os_stdout :: fn () *OsStdIoStream {
	return &_std_out;
}

os_stderr :: fn () *OsStdIoStream {
	return &_std_err;
}

os_sleep_ms :: fn (ms: u32) {
	C.usleep(ms * 1000);
};

os_tick_ms :: fn () u64 #inline {
	return auto os_ftick_ms();
}

os_ftick_ms :: fn () f64 #inline {
	t: _posix_timespec;
	_posix_clock_gettime(CLOCK_REALTIME, &t);
	s :: cast(f64) t.tv_sec;
	n :: cast(f64) t.tv_nsec;
	return (s*1000.) + (n/1000000.);
}

os_execute :: fn (command: string_view, allocator : *Allocator = null) s32 {
	return C.WEXITSTATUS(C.system(strtoc(command, allocator)));
}

os_get_last_error :: fn () (s32, string_view) #inline {
	ec :: C.errno();
	str := str_view_empty;
	if ec != 0 { str = ctostr(C.strerror(ec)); }
	return ec, str;
}

os_get_last_error2 :: fn () Error #inline {
	ec :: C.errno();
	str := str_view_empty;
	if ec != 0 { str = ctostr(C.strerror(ec)); }
	return error(ec, str);
}

os_get_exec_path :: fn () string {
	buf : [OS_PATH_MAX]u8;
	buf_len := cast(C.size_t) buf.len;
	link :: "/proc/self/exe";
	if C.readlink(auto link.ptr, auto buf.ptr, buf_len) == -1 {
		return str_new();
	}
	return str_new(buf.ptr);
}

os_get_backtrace :: fn (skip_frames := 0 #maybe_unused, max_frame_count := 64 #maybe_unused, _allocator : *Allocator = null #maybe_unused) []CodeLocation {
	// @Incomplete <2022-08-21 Sun>: Here we tried to use 'backtrace' from the C library, but is seems not
	// working correctly. Documentation claims that '-rdynamic' linker flag must be used, but still, the
	// resulting array does not contain any captured frames.
	//
	// We can eventually try to use some 3rd party solution (libunwind) or implement stack tracing internally
	// in the compiler.

	trace: [..]CodeLocation;
	return trace;
}

__os_debug_break :: fn () #inline #compiler {
	C.raise(C.SIGTRAP);
}

__os_write :: fn (fd: s32, buf: *u8, count: usize) s32 {
	return auto C.write(auto fd, auto buf, count);
};

__os_abort :: fn () #compiler {
	#if IS_DEBUG { __os_debug_break(); }
	if application_context.abort_fn {
		application_context.abort_fn();
	} else {
		__os_abort_default();
	}
}

__os_abort_default :: fn () {
	if !IS_COMPTIME_RUN { print_backtrace(); }
	C.raise(C.SIGABRT);
}

__MAX_ARGS_WITHOUT_ALLOC :: 8;

__os_start :: fn (argc: s64, argv: **u8, _: **u8) s32 #entry {
	args :: []*u8.{argc, argv};
	tmp: [__MAX_ARGS_WITHOUT_ALLOC]string_view #noinit;
	is_allocated :: args.len > tmp.len;
	command_line_arguments.len = args.len;
	if is_allocated {
		command_line_arguments.ptr = auto C.malloc(sizeof(string_view) * auto args.len);
		if !command_line_arguments.ptr { __os_abort(); }
	} else {
		command_line_arguments.ptr = tmp.ptr;
	}
	loop i := 0; i < args.len; i += 1 {
		command_line_arguments[i] = string_view.{auto C.strlen(auto args[i]), args[i]};
	}
	out :: cast(s32) __assembly_module.main();
	if is_allocated {
		C.free(auto command_line_arguments.ptr);
	}
	temporary_release();
	return out;
}

#scope_private
#import "std/string"

C  :: #import "libc";
io :: #import "std/io";

STD_IN_STREAM_VTABLE :: io.StreamVTable.{
	read = auto &std_io_read
};

STD_OUT_STREAM_VTABLE :: io.StreamVTable.{
	write = auto &std_io_write,
};

_std_in  :: OsStdIoStream.{ io.Stream.{ vtable = &STD_IN_STREAM_VTABLE },  C.STDIN  };
_std_out :: OsStdIoStream.{ io.Stream.{ vtable = &STD_OUT_STREAM_VTABLE }, C.STDOUT };
_std_err :: OsStdIoStream.{ io.Stream.{ vtable = &STD_OUT_STREAM_VTABLE }, C.STDERR };

// @Duplicate: The same as fs.write, but we want to keep implicitly loaded OS interface small. We
//             can eventually put file stream operations into separate file.
std_io_write :: fn (stream: *OsStdIoStream, src: *u8, size: s64) (s64, Error) {
	if !src { return 0, error(ERR_INVALID_HANDLE, "Cannot write, source is invalid."); }
	written_bytes :: C.write(stream.handle, auto src, auto size);
	if written_bytes < 0 {
		ec, estr :: os_get_last_error();
		return 0, error(ec, "Cannot write to file: %.", estr);
	}
	return auto written_bytes, OK;
}

// @Duplicate: The same as fs.write, but we want to keep implicitly loaded OS interface small. We
//             can eventually put file stream operations into separate file.
std_io_read :: fn (stream: *OsStdIoStream, dest: *u8, size: s64) (s64, Error) {
	if !dest { return 0, error(ERR_INVALID_HANDLE, "Cannot read, destination is invalid."); }
	read_bytes :: C.read(stream.handle, auto dest, auto size);
	if read_bytes < 0 {
		ec, estr :: os_get_last_error();
		return 0, error(ec, "Cannot read file: %", estr);
	}
	return auto read_bytes, OK;
}

// @Cleanup: move to the libc???
CLOCK_REALTIME :: 0;

_posix_clockid_t :: C.int;
_posix_time_t    :: C.long;

_posix_timespec :: struct {
	tv_sec: _posix_time_t;
	tv_nsec: C.long;
}

_posix_clock_gettime :: fn (clk_id: _posix_clockid_t, tp: *_posix_timespec) C.int #extern "clock_gettime";
