/* Structure describing an inotify event.  */
inotify_event :: struct {
	wd: C.int;    /* Watch descriptor.  */
	mask: IDMask;    /* Watch mask.  */
	cookie: u32;  /* Cookie to synchronize two events.  */
	len: u32;     /* Length (including NULs) of name.  */
};

inotify_event_name :: fn (e: *inotify_event) string_view #inline {
	cstr :: ptr_shift_bytes(e, auto sizeof(inotify_event));
	return .{ auto C.strlen(auto cstr), auto cstr };
}

IDMask :: enum u32 #flags {
	/* Supported events suitable for MASK parameter of INOTIFY_ADD_WATCH.  */
	ACCESS = 0x00000001; /* File was accessed.  */
	MODIFY = 0x00000002; /* File was modified.  */
	ATTRIB = 0x00000004; /* Metadata changed.  */
	CLOSE_WRITE = 0x00000008; /* Writtable file was closed.  */
	CLOSE_NOWRITE = 0x00000010; /* ;Unwrittable file closed.  */
	CLOSE = (CLOSE_WRITE | CLOSE_NOWRITE); /* Close.  */
	OPEN = 0x00000020; /* File was opened.  */
	MOVED_FROM = 0x00000040; /* File was moved from X.  */
	MOVED_TO = 0x00000080; /* File was moved to Y.  */
	MOVE = (MOVED_FROM | MOVED_TO); /* Moves.  */
	CREATE = 0x00000100; /* Subfile was created.  */
	DELETE = 0x00000200; /* Subfile was deleted.  */
	DELETE_SELF = 0x00000400; /* Self was deleted.  */
	MOVE_SELF = 0x00000800; /* Self was moved.  */

	/* Events sent by the kernel.  */
	UNMOUNT = 0x00002000; /* Backing fs was unmounted.  */
	Q_OVERFLOW = 0x00004000; /* Event queued overflowed.  */
	IGNORED = 0x00008000; /* File was ignored.  */

	/* Special flags.  */
	ONLYDIR = 0x01000000; /* Only watch the path if it is a directory.  */
	DONT_FOLLOW = 0x02000000; /* Do not follow a sym link.  */
	EXCL_UNLINK = 0x04000000; /* Exclude events on unlinked
	objects.  */
	MASK_CREATE = 0x10000000; /* Only create watches.  */
	MASK_ADD = 0x20000000; /* Add to the mask of an already
	existing watch.  */
	ISDIR = 0x40000000; /* Event occurred against dir.  */
	ONESHOT = 0x80000000; /* Only send event once.  */

	/* All events which a program can wait on.  */
	ALL_EVENTS = (
		ACCESS | MODIFY | ATTRIB | CLOSE_WRITE
		| CLOSE_NOWRITE | OPEN | MOVED_FROM
		| MOVED_TO | CREATE | DELETE
		| DELETE_SELF | MOVE_SELF
	)
}

/* Create and initialize inotify instance.  */
inotify_init :: fn () C.int #extern "inotify_init";

/* Add watch of object NAME to inotify instance FD.  Notify about
   events specified by MASK.  */
inotify_add_watch :: fn (fd: C.int, name: *C.char, mask: IDMask) C.int #extern "inotify_add_watch";

/* Remove the watch specified by WD from the inotify instance FD.  */
inotify_rm_watch :: fn (fd: C.int, wd: C.int) C.int #extern "inotify_rm_watch";

#scope_module
C :: #import "libc";