// =================================================================================================
// bl
//
// File:   _builtin.bl
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =================================================================================================

#load "std/memory.bl"
#load "std/debug.bl"
#load "std/utils.bl"
#load "std/error.bl"

//! # Builtin
//!
//! Compiler builtins are automatically loaded into every assembly.
//!
//! ## Current running platform
//! ```bl
//! Platform :: enum s32 {
//!     UNKNOWN;
//!     WINDOWS;
//!     DARWIN;
//!     LINUX;
//! }
//!
//! PLATFORM :: <SET_BY_COMPILER>;
//! ```
//!
//! ## Current running architecture
//! ```bl
//! Arch :: enum s32 {
//!     UNKNOWN;
//!     X86_64;
//!     AARCH64;
//!     ARM64;
//! }
//!
//! ARCH :: <SET_BY_COMPILER>;
//! ```
//!
//! ## Current running environment
//! ```bl
//! Env :: enum s32 {
//!     UNKNOWN;
//!     MSVC;
//!     GNU;
//!     MUSL;
//! }
//!
//! ENV :: <SET_BY_COMPILER>;
//! ```
//!
//! ## Compiler version
//! ```bl
//! BLC_VER_MAJOR : s32 : <SET_BY_COMPILER>;
//! BLC_VER_MINOR : s32 : <SET_BY_COMPILER>;
//! BLC_VER_PATCH : s32 : <SET_BY_COMPILER>;
//! ```

/// Builtin string slice.
string_view :: []u8;


/// TypeKind describes kind of BL type returned in `TypeInfo` structure. This value can be used for
/// safe casting.
TypeKind :: enum #compiler {
	/// Base type of all types in type system.
	TYPE    = 1;
	/// Void type. (Implicitly used for functions without return value)
	VOID    = 2;
	/// Any integer type: `s8`, `s16`, `s32`, `s64`, `u8`, `u16`, `u32`, `u64`, `usize`.
	INT     = 3;
	/// Any real type: `f32`, `f64`.
	REAL    = 4;
	/// Function type.
	FN      = 5;
	/// Pointer type.
	PTR     = 6;
	/// Boolean type.
	BOOL    = 7;
	/// Array type.
	ARRAY   = 8;
	/// Structure type.
	STRUCT  = 9;
	/// Enumerator type.
	ENUM    = 10;
	/// Null-value type.
	NULL    = 11;
	/// String type. @Cleanup: remove this!
	STRING  = 12;
	/// Function group type.
	FN_GROUP = 16;
};

/// Base `TypeInfo` structure returned by `typeinfo` operator. This structure pointer can be casted to
/// child type to get more descriptive information about the type.
TypeInfo :: struct #compiler {
	/// Type info kind.
	kind: TypeKind;
	/// Size of type in bytes.
	size_bytes: usize;
	/// Alignment of type.
	alignment: usize;
};

/// Detailed information about integer types: `s8`, `s16`, `s32`, `s64`, `u8`, `u16`, `u32`, `u64`, `usize`.
TypeInfoInt :: struct #base TypeInfo #compiler {
	/// Size of type in bits.
	bit_count: s32;
	/// True when type is signed integer type.
	is_signed: bool;
};

/// Detailed information about real types: `f32`, `f64`.
TypeInfoReal :: struct #base TypeInfo  #compiler {
	/// Size of type in bits.
	bit_count: s32;
}

/// Detailed information about function types.
TypeInfoFn :: struct #base TypeInfo #compiler {
	/// Slice of argument type infos.
	args: []TypeInfoFnArg;
	/// Return type info.
	ret_type: *TypeInfo;
	/// True when function has variable argument list.
	is_vargs: bool;
};


/// Detailed information about function group and contained possible overloads.
TypeInfoFnGroup :: struct #base TypeInfo #compiler {
	/// Group content.
	variants: []*TypeInfoFn;
}

/// Detailed information about pointer types.
TypeInfoPtr :: struct #base TypeInfo #compiler {
	/// Underlaying pointed type info.
	pointee_type: *TypeInfo
};

/// Detailed information about array types.
TypeInfoArray :: struct #base TypeInfo #compiler {
	/// Array name.
	name: string_view;
	/// Array element type info.
	elem_type: *TypeInfo;
	/// Array element count.
	len: s64
};

/// Detailed information about structure types.
TypeInfoStruct :: struct #base TypeInfo #compiler {
	/// Structure type name.
	name: string_view;
	/// Slice of structure member infos.
	members: []TypeInfoStructMember;
	/// True when structure is slice.
	is_slice: bool;
	/// True when structure is union.
	is_union: bool;
	/// True when structure is dynamic array.
	is_dynamic_array: bool;

	// @CLEANUP: slice cannot be union, better way will be create separate type
	// kind for struct, slice and union, dynamic array could act like regular
	// array in type info.
};

/// Detailed information about enumerator types.
TypeInfoEnum :: struct #base TypeInfo #compiler {
	/// Enumerator type name.
	name: string_view;
	/// Base type info.
	base_type: *TypeInfo;
	/// Slice of all enumerator variants.
	variants: []TypeInfoEnumVariant;
	/// True when enumerator was defined with #flags directive.
	is_flags: bool;
};

/// Placeholder for information about `void` type.
TypeInfoVoid :: struct #base TypeInfo #compiler {
};

/// Placeholder for information about `null` type.
TypeInfoNull :: struct #base TypeInfo #compiler {
};

/// Placeholder for information about `string` type.
TypeInfoString :: struct #base TypeInfo #compiler {
};

/// Placeholder for information about `type` type.
TypeInfoType :: struct #base TypeInfo  #compiler {
};

/// Placeholder for information about `bool` type.
TypeInfoBool :: struct #base TypeInfo #compiler {
};

/// Detailed information about structure member.
TypeInfoStructMember :: struct #compiler {
	/// Member type name.
	name: string_view;
	/// Member type info.
	base_type: *TypeInfo;
	/// Byte-offset of member inside structure ABI.
	offset_bytes: s32;
	/// Order in structure.
	index: s32;
	/// User defined member tag can be used to store any custom user data up to 8 bytes into the type
	/// info structure when structure member is defined.
	///
	/// ```bl
	/// Foo :: struct {
	///     i: s32 #tag 123;
	///     j: s32 #tag 321;
	/// };
	/// ```
	tag: u64;
	/// True when member is inherrited base of the parent structure type.
	is_base: bool;
};

/// Detailed information about enumerator variant.
TypeInfoEnumVariant :: struct #compiler {
	/// Member type name.
	name: string_view;
	/// Variant value.
	value: s64
};

/// Detailed information about function's argument.
TypeInfoFnArg :: struct #compiler {
	/// Member type name.
	name: string_view;
	/// Argument type info.
	base_type: *TypeInfo
};

/// Any type is special builtin type used for passing value of "any" type as function argument.
Any :: struct #compiler {
	/// Type info associated to data type.
	type_info: *TypeInfo;
	/// Data pointer. (not owner!)
	data: *u8
};

/// Type of test case record found during compilation.
TestCase :: struct #compiler {
	/// Pointer to test case function.
	func: *fn();
	/// Name of the test case.
	name: string_view;
	/// File where the test case is declared.
	file: string_view;
	/// Line in the file where the test case is declared.
	line: s32;
}

/// Type of source code location used by `#call_location` directive.
///
/// ### Example
/// ```bl
/// foo :: fn (loc: *CodeLocation = #call_location) {
///     print("%\n", @loc);
/// }
///
/// main :: fn () s32 {
///     foo();
///     return 0;
/// }
/// ```
CodeLocation :: struct #compiler {
	/// Full source file path.
	file: string_view;
	/// Line in the source file.
	line: s32;
	/// Name of the function.
	function: string_view;
	/// File and line combination hash.
	hash: u32;

	// Internally set to AST node of the call when created with #call_location directive. This value is
	// internal, available only during compile time execution, and should not be directly used.
	_internal: *u8;
}

/// Type of print log function.
///
/// ### Arguments
/// * `kind` Kind of report message.
/// * `format` Format string.
/// * `args` Additional arguments.
/// * `file` Call side filename.
/// * `line` Call side line in source file.
PrintLogFn :: * fn (kind: PrintLogKind, file: string_view, line: s32, format: string_view, args: ...);

AbortFn :: * fn ();
AssertFn :: * fn (message: string_view, loc: *CodeLocation);

/// Global application context. This structure provides possibility to override common operations done on the compiler
/// internal level or on the user code level.
Context :: struct {
	/// Print log callback.
	print_log_fn: PrintLogFn;
	/// Abort handler callback.
	abort_fn: AbortFn;
	/// Assert handler callback.
	assert_fn: AssertFn;
	/// Global memory allocator used across the application.
	allocator: *Allocator;

	/// Global temporary allocator. This allocator is implicitly used i.e. by `tprint` function. The default implementation
	/// is thread save (be careful replacing this allocator with a custom implementation, it may be called from other
	/// threads depending on use case).
	temporary_allocator: *Allocator;

	_assert_handled: bool;
};

/// Default application context. Implicit context is compiler internal global variable
/// containing basic context for the whole assembly. This variable is mutable and can
/// be modified by user code. For example we can replace default memory allocator
/// with custom one, this will affect all memory allocations made after.
application_context := Context.{
	print_log_fn        = &__print_log_default,
	abort_fn            = &__os_abort_default,
	assert_fn           = &__assert_default,
	allocator           = &default_allocator,
	temporary_allocator = &default_temporary_allocator,
};

/// Contains all arguments passed from command line. First argument is executable name.
command_line_arguments: []string_view #compiler;

/// Compile-time helper function resolving count of enumerator variants, passed type 'T' must be an
/// enumerator type (checked by assert).
enum_count :: fn (T: type #comptime) s64 #comptime {
	info :: typeinfo(T);
	static_assert(info.kind == TypeKind.ENUM);
	return (cast(*TypeInfoEnum)info).variants.len;
}

/// Resolve enum variant name.
enum_variant_name :: fn (T: type #comptime, index: s64) string_view #inline {
	info :: cast(*TypeInfoEnum) typeinfo(T);
	static_assert(info.kind == TypeKind.ENUM);
	assert(index < info.variants.len);
	return info.variants[index].name;
}

/// Resolve enum variant value.
enum_variant_value :: fn (T: type #comptime, index: s64) T #inline {
	info :: cast(*TypeInfoEnum) typeinfo(T);
	static_assert(info.kind == TypeKind.ENUM);
	assert(index < info.variants.len);
	return auto info.variants[index].value;
}

/// Returns `true` if the `T` type is an integer type.
is_number :: fn (T: type #comptime) bool #comptime {
	return typeinfo(T).kind == TypeKind.INT;
}

/// Returns `true` if the `T` type is an floating point number type.
is_real :: fn (T: type #comptime) bool #comptime {
	return typeinfo(T).kind == TypeKind.REAL;
}

/// Returns `true` if the `T` type is an integer or floating point number type (f32 or f64).
is_real_or_number :: fn (T: type #comptime) bool #comptime {
	return typeinfo(T).kind == TypeKind.INT || typeinfo(T).kind == TypeKind.REAL;
}

/// Returns true if the `T` type is a signed integer type.
is_signed_number :: fn (T: type #comptime) bool #comptime {
	info :: cast(*TypeInfoInt)typeinfo(T);
	return info.kind == TypeKind.INT && info.is_signed;
}

/// Returns true if the `T` type is a pointer type.
is_pointer :: fn (T: type #comptime) bool #comptime {
	return typeinfo(T).kind == TypeKind.PTR;
}

/// Returns true if the `T` type is a function type.
is_function :: fn (T: type #comptime) bool #comptime {
	return typeinfo(T).kind == TypeKind.FN;
}

/// Returns true if the `T` type is a struct type.
is_struct :: fn (T: type #comptime) bool #comptime {
	return typeinfo(T).kind == TypeKind.STRUCT;
}

/// Returns unique type identificator in compile-time.
typeid :: fn (v: type #comptime) u64 #comptime {
	return cast(u64) typeinfo(v);
}

/// Returns `true` if the `T` type is an enumerator type.
is_enum :: fn (T: type #comptime) bool #comptime {
	return typeinfo(T).kind == TypeKind.ENUM;
}

/// Returns signed or unsigned builtin number type of the requested size.
/// The `size_bytes` must be 1, 2, 4 or 8 Bytes.
number_type :: fn (size_bytes: usize, is_signed: bool) type #comptime {
	switch size_bytes {
		1 { if is_signed { return s8;  } return u8;  }
		2 { if is_signed { return s16; } return u16; }
		4 { if is_signed { return s32; } return u32; }
		8 { if is_signed { return s64; } return u64; }
		default;
	}
	panic("Unsupported number type!");
	return s32;
}

// !!!
// @Incomplete: Following functions might be comptime, but we may use them also with runtime known arguments,
// change this after #comptime semantic will be "optional" based on arguments + #run directive will be supported
// by the compiler.
// !!!

/// Check in compile-time whether structure type `TStruct` contains member called `member_name`.
has_member :: fn (TStruct: type #comptime, member_name: string_view) bool {
	info :: cast(*TypeInfoStruct) typeinfo(TStruct);
	static_assert(info.kind == TypeKind.STRUCT);
	loop i := 0; i < info.members.len; i += 1 {
		if str_match(info.members[i].name, member_name) {
			return true;
		}
	}
	return false;
}

// @Cleanup
has_member2 :: fn (TStruct: type #comptime, member_name: string_view) bool #comptime {
	info :: cast(*TypeInfoStruct) typeinfo(TStruct);
	static_assert(info.kind == TypeKind.STRUCT);
	loop i := 0; i < info.members.len; i += 1 {
		if str_match(info.members[i].name, member_name) {
			return true;
		}
	}
	return false;
}

// Returns count of structure members resolved in compile time.
struct_count :: fn (TStruct: type #comptime) s32 #comptime {
	info :: cast(*TypeInfoStruct) typeinfo(TStruct);
	static_assert(info.kind == TypeKind.STRUCT);
	return auto info.members.len;
}

/// Calculate offset of member ad `path` starting from `TStruct` root. Each member in the pash is supposed to
/// be separated by '/'.
///
/// ### Example
/// ```
/// number
/// foo/number
/// foo/bar/number
/// ```
member_offset_bytes :: fn (TStruct: type #comptime, path: string_view) s64 {
	static_assert(typeinfo(TStruct).kind == TypeKind.STRUCT);
	assert(path.len > 0);

	return member_offset_bytes2(auto typeinfo(TStruct), path);
}

member_offset_bytes_comptime :: fn (TStruct: type #comptime, path: string_view) s64 #comptime {
	static_assert(typeinfo(TStruct).kind == TypeKind.STRUCT);
	assert(path.len > 0);

	return member_offset_bytes2(auto typeinfo(TStruct), path);
}

member_offset_bytes2 :: fn (type_info: *TypeInfoStruct, path: string_view) s64 {
	assert(path.len > 0);

	offset: s64;
	info := type_info;
	assert(info.kind == TypeKind.STRUCT);

	lhs: string_view;
	rhs := path;
	traverse := true;
	loop traverse {
		if !str_split_by_first(rhs, '/', &lhs, &rhs) {
			lhs = rhs;
			traverse = false;
		}
		found := false;
		loop i := 0; i < info.members.len; i += 1 {
			member :: &info.members[i];
			if str_match(member.name, lhs) {
				offset += member.offset_bytes;
				info    = auto member.base_type;
				found   = true;
				break;
			}
		}
		if !found {
			panic("No such member '%' in the structure '%' on path '%'.", lhs, info, path);
		}
		if traverse && info.kind != TypeKind.STRUCT {
			panic("Member '%' in the structure '%' is supposed to be struct type.", lhs, type_info.name);
		}
	}
	return offset;
}

// Resolve pointer to a structure member relative to the structure `base_ptr`.
member_ptr :: fn {
	fn (base_ptr: *u8, member: *TypeInfoStructMember) *u8 #inline {
		return ptr_shift_bytes(base_ptr, member.offset_bytes);
	};

	fn (TMember: type #comptime, base_ptr: *?T, member_name: string_view) *TMember #inline {
		if !has_member(T, member_name) { return null; }
		offset :: member_offset_bytes(T, member_name);
		return auto ptr_shift_bytes(base_ptr, offset);
	};
}

#scope_private

#import "std/string"
