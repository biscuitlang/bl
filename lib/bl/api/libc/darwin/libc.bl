SEEK_SET : fd_t : 0;
SEEK_CUR : fd_t : 1;
SEEK_END : fd_t : 2;

FIONREAD :: 0x4004667F;

POLLIN   : short : 0x0001;
POLLPRI  : short : 0x0002;
POLLOUT  : short : 0x0004;
POLLERR  : short : 0x0008;
POLLHUP  : short : 0x0010;
POLLNVAL : short : 0x0020;

F_DUPFD  :: 0;
F_GETFD  :: 1;
F_SETFD  :: 2;
F_GETFL  :: 3;
F_SETFL  :: 4;
F_GETOWN :: 5;
F_SETOWN :: 6;
F_GETLK  :: 7;
F_SETLK  :: 8;

O_NONBLOCK :: 0x00000004;

F_OK :: 0;
X_OK :: (1<<0);
W_OK :: (1<<1);
R_OK :: (1<<2);

char      :: s8;
uchar     :: u8;
short     :: s16;
ushort    :: u16;
int       :: s32;
uint      :: u32;
long      :: s64;
ulong     :: u64;
longlong  :: s64;
ulonglong :: u64;
void_ptr  :: *u8;
size_t    :: u64;
ssize_t   :: s64;

blkcnt_t :: s64;
blksize_t :: s32;
dev_t :: s32;
fsblkcnt_t :: uint;
fsfilcnt_t :: uint;
gid_t :: u32;
id_t :: u32;
ino64_t :: u64;
ino_t :: ino64_t;
mach_port_name_t :: uint;
mach_port_t :: mach_port_name_t;
mode_t :: u16;
pid_t :: s32;
sigset_t :: u32;
suseconds_t :: s32;
uid_t :: u32;
useconds_t :: u32;
uuid_t :: [16]uchar;
uuid_string_t :: [37]char;
nlink_t :: u16;
time_t :: long;
timezone :: long;
off_t :: longlong;
fd_t :: s32;

pollfd :: struct {
	fd: int;
	events: short;
	revents: short;
}

nfds_t :: u32;

tm :: struct {
	tm_sec: int;
	tm_min: int;
	tm_hour: int;
	tm_mday: int;
	tm_mon: int;
	tm_year: int;
	tm_wday: int;
	tm_yday: int;
	tm_isdst: int;
	tm_gmtoff: long;
	tm_zone: *char;
}

stat_t :: struct {
	st_dev: dev_t;
	st_mode: mode_t;
	st_nlink: nlink_t;
	st_ino: ino64_t;
	st_uid: uid_t;
	st_gid: gid_t;
	st_rdev: dev_t;
	st_atimespec: timespec;
	st_mtimespec: timespec;
	st_ctimespec: timespec;
	st_birthtimespec: timespec;
	st_size: off_t;
	st_blocks: blkcnt_t;
	st_blksize: blksize_t;
	st_flags: u32;
	st_gen: u32;
	st_lspare: s32;
	st_qspare: [2]s64;
}

dirent_t :: struct {
	d_ino: u64;
	d_seekoff: u64;
	d_reclen: u16;
	d_namlen: u16;
	d_type: u8;
	d_name: [DARWIN_MAXPATHLEN]char;
}

timespec :: struct {
	tv_sec: time_t;
	tv_nsec: long;
}

timeval :: struct {
	tv_sec: time_t;
	tv_usec: suseconds_t;
}

STDIN  :: 0;
STDOUT :: 1;
STDERR :: 2;

SIGINT  :: 2;
SIGILL  :: 4;
SIGABRT :: 6;
SIGFPE  :: 8;
SIGSEGV :: 11;
SIGTERM :: 15;
SIGHUP  :: 1;
SIGQUIT :: 3;
SIGTRAP :: 5;
SIGKILL :: 9;
SIGPIPE :: 13;
SIGALRM :: 14;

DARWIN_MAXPATHLEN :: 1024;

DT_UNKNOWN ::  0;
DT_FIFO    ::  1;
DT_CHR     ::  2;
DT_DIR     ::  4;
DT_BLK     ::  6;
DT_REG     ::  8;
DT_LNK     :: 10;
DT_SOCK    :: 12;
DT_WHT     :: 14;

O_RDONLY :: 0x0;
O_WRONLY :: 0x1;
O_RDWR   :: 0x2;
O_CREAT  :: 0x0200;
O_TRUNC  :: 0x0400;
O_EXCL   :: 0x0800;
O_APPEND :: 0x0008;

DIR :: u8;
FILE :: u8;

EPERM           :: 1;      /* Operation not permitted */
ENOENT          :: 2;      /* No such file or directory */
ESRCH           :: 3;      /* No such process */
EINTR           :: 4;      /* Interrupted system call */
EIO             :: 5;      /* Input/output error */
ENXIO           :: 6;      /* Device not configured */
E2BIG           :: 7;      /* Argument list too long */
ENOEXEC         :: 8;      /* Exec format error */
EBADF           :: 9;      /* Bad file descriptor */
ECHILD          :: 10;     /* No child processes */
EDEADLK         :: 11;     /* Resource deadlock avoided */
ENOMEM          :: 12;     /* Cannot allocate memory */
EACCES          :: 13;     /* Permission denied */
EFAULT          :: 14;     /* Bad address */
ENOTBLK         :: 15;     /* Block device required */
EBUSY           :: 16;     /* Device / Resource busy */
EEXIST          :: 17;     /* File exists */
EXDEV           :: 18;     /* Cross-device link */
ENODEV          :: 19;     /* Operation not supported by device */
ENOTDIR         :: 20;     /* Not a directory */
EISDIR          :: 21;     /* Is a directory */
EINVAL          :: 22;     /* Invalid argument */
ENFILE          :: 23;     /* Too many open files in system */
EMFILE          :: 24;     /* Too many open files */
ENOTTY          :: 25;     /* Inappropriate ioctl for device */
ETXTBSY         :: 26;     /* Text file busy */
EFBIG           :: 27;     /* File too large */
ENOSPC          :: 28;     /* No space left on device */
ESPIPE          :: 29;     /* Illegal seek */
EROFS           :: 30;     /* Read-only file system */
EMLINK          :: 31;     /* Too many links */
EPIPE           :: 32;     /* Broken pipe */
EDOM            :: 33;     /* Numerical argument out of domain */
ERANGE          :: 34;     /* Result too large */
EAGAIN          :: 35;     /* Resource temporarily unavailable */
EWOULDBLOCK     :: EAGAIN; /* Operation would block */
EINPROGRESS     :: 36;     /* Operation now in progress */
EALREADY        :: 37;     /* Operation already in progress */
ENOTSOCK        :: 38;     /* Socket operation on non-socket */
EDESTADDRREQ    :: 39;     /* Destination address required */
EMSGSIZE        :: 40;     /* Message too long */
EPROTOTYPE      :: 41;     /* Protocol wrong type for socket */
ENOPROTOOPT     :: 42;     /* Protocol not available */
EPROTONOSUPPORT :: 43;     /* Protocol not supported */
ESOCKTNOSUPPORT :: 44;     /* Socket type not supported */
ENOTSUP         :: 45;     /* Operation not supported */
EOPNOTSUPP 	 :: ENOTSUP;
EPFNOSUPPORT    :: 46;     /* Protocol family not supported */
EAFNOSUPPORT    :: 47;     /* Address family not supported by protocol family */
EADDRINUSE      :: 48;     /* Address already in use */
EADDRNOTAVAIL   :: 49;     /* Can't assign requested address */
ENETDOWN        :: 50;     /* Network is down */
ENETUNREACH     :: 51;     /* Network is unreachable */
ENETRESET       :: 52;     /* Network dropped connection on reset */
ECONNABORTED    :: 53;     /* Software caused connection abort */
ECONNRESET      :: 54;     /* Connection reset by peer */
ENOBUFS         :: 55;     /* No buffer space available */
EISCONN         :: 56;     /* Socket is already connected */
ENOTCONN        :: 57;     /* Socket is not connected */
ESHUTDOWN       :: 58;     /* Can't send after socket shutdown */
ETOOMANYREFS    :: 59;     /* Too many references: can't splice */
ETIMEDOUT       :: 60;     /* Operation timed out */
ECONNREFUSED    :: 61;     /* Connection refused */
ELOOP           :: 62;     /* Too many levels of symbolic links */
ENAMETOOLONG    :: 63;     /* File name too long */
EHOSTDOWN       :: 64;     /* Host is down */
EHOSTUNREACH    :: 65;     /* No route to host */
ENOTEMPTY       :: 66;     /* Directory not empty */
EPROCLIM        :: 67;     /* Too many processes */
EUSERS          :: 68;     /* Too many users */
EDQUOT          :: 69;     /* Disc quota exceeded */
ESTALE          :: 70;     /* Stale NFS file handle */
EREMOTE         :: 71;     /* Too many levels of remote in path */
EBADRPC         :: 72;     /* RPC struct is bad */
ERPCMISMATCH    :: 73;     /* RPC version wrong */
EPROGUNAVAIL    :: 74;     /* RPC prog. not avail */
EPROGMISMATCH   :: 75;     /* Program version wrong */
EPROCUNAVAIL    :: 76;     /* Bad procedure for program */
ENOLCK          :: 77;     /* No locks available */
ENOSYS          :: 78;     /* Function not implemented */
EFTYPE          :: 79;     /* Inappropriate file type or format */
EAUTH           :: 80;     /* Authentication error */
ENEEDAUTH       :: 81;     /* Need authenticator */
EPWROFF         :: 82;     /* Device power is off */
EDEVERR         :: 83;     /* Device error, e.g. paper out */
EOVERFLOW       :: 84;     /* Value too large to be stored in data type */
EBADEXEC        :: 85;     /* Bad executable */
EBADARCH        :: 86;     /* Bad CPU type in executable */
ESHLIBVERS      :: 87;     /* Shared library version mismatch */
EBADMACHO       :: 88;     /* Malformed Macho file */
ECANCELED       :: 89;     /* Operation canceled */
EIDRM           :: 90;     /* Identifier removed */
ENOMSG          :: 91;     /* No message of desired type */
EILSEQ          :: 92;     /* Illegal byte sequence */
ENOATTR         :: 93;     /* Attribute not found */
EBADMSG         :: 94;     /* Bad message */
EMULTIHOP       :: 95;     /* Reserved */
ENODATA         :: 96;     /* No message available on STREAM */
ENOLINK         :: 97;     /* Reserved */
ENOSR           :: 98;     /* No STREAM resources */
ENOSTR          :: 99;     /* Not a STREAM */
EPROTO          :: 100;    /* Protocol error */
ETIME           :: 101;    /* STREAM ioctl timeout */
ENOPOLICY       :: 103;    /* No such policy registered */
ENOTRECOVERABLE :: 104;    /* State not recoverable */
EOWNERDEAD      :: 105;    /* Previous owner died */
EQFULL          :: 106;    /* Interface output queue is full */
ELAST           :: 106;    /* Must be equal largest errno */

S_IRWXU : mode_t : 0x1C0;
S_IRUSR : mode_t : 0x100;
S_IWUSR : mode_t : 0x80;
S_IXUSR : mode_t : 0x40;
S_IRWXG : mode_t : 0x38;
S_IRGRP : mode_t : 0x20;
S_IWGRP : mode_t : 0x10;
S_IXGRP : mode_t : 0x8;
S_IRWXO : mode_t : 0x7;
S_IROTH : mode_t : 0x4;
S_IWOTH : mode_t : 0x2;
S_IXOTH : mode_t : 0x1;
S_ISUID : mode_t : 0x800;
S_ISGID : mode_t : 0x400;
S_ISVTX : mode_t : 0x200;

_S_IFMT   : u32 : 0xf000;
_S_IFDIR  : u32 : 0x4000;
_S_IFCHR  : u32 : 0x2000;
_S_IFBLK  : u32 : 0x6000;
_S_IFREG  : u32 : 0x8000;
_S_IFIFO  : u32 : 0x1000;
_S_IFLNK  : u32 : 0xA000;
_S_IFSOCK : u32 : 0xC000;

S_ISDIR :: fn (mode: u32) bool #inline {
	return (mode & _S_IFMT) == _S_IFDIR;
}

S_ISREG :: fn (mode: u32) bool #inline {
	return (mode & _S_IFMT) == _S_IFREG;
}

mkdir :: fn (path: *char, mode: mode_t) int #extern "mkdir";
fchmod :: fn (fd: int, mode: mode_t) int #extern "fchmod";
closedir :: fn (dirp: *DIR) int #extern "closedir";
open :: fn (path: *char, oflag: int, mode: mode_t) int #extern "open";
exit :: fn (v: int) #extern "exit";
realpath :: fn (path: *char, resolved_path: *char) *char #extern "realpath";
raise :: fn (sig: int) int #extern "raise";
signal :: fn (signum: int, handler: *fn (v: int)) *fn (v: int) #extern "signal";
malloc :: fn (size: size_t) void_ptr #extern "malloc";
realloc :: fn (ptr: void_ptr, new_size: size_t) void_ptr #extern "realloc";
free :: fn (ptr: void_ptr) #extern "free";
getenv :: fn (name: *char) *char #extern "getenv";
putenv :: fn (s: *char) int #extern "putenv";
system :: fn (command: *char) int #extern "system";
strlen :: fn (str: *char) size_t #extern "strlen";
strcmp :: fn (first: *char, second: *char) int #extern "strcmp";
wcslen :: fn (str: *u16) usize #extern "wcslen";
strerror :: fn (errnum: int) *char #extern "strerror";
popen :: fn (f: *char, m: *char) void_ptr #extern "popen";
pclose :: fn (f: void_ptr) #extern "pclose";
fgets :: fn (buf: void_ptr, size: int, f: void_ptr) void_ptr #extern "fgets";
getchar :: fn () int #extern "getchar";
rand  :: fn () s32 #extern "rand";
srand :: fn (seed: u32) #extern "srand";
qsort :: fn (base: void_ptr, nitems: size_t, size: size_t, compar: *fn (void_ptr, void_ptr) int) #extern "qsort";
asinf :: fn (arg: f32) f32 #extern "asinf";
asin :: fn (arg: f64) f64 #extern "asin";
acosf :: fn (n: f32) f32 #extern "acosf";
acos :: fn (n: f64) f64 #extern "acos";
tanf :: fn (x: f32) f32 #extern "tanf";
tan :: fn (x: f64) f64 #extern "tan";
atan2f :: fn (y: f32, x: f32) f32 #extern "atan2f";
atan2 :: fn (y: f64, x: f64) f64 #extern "atan2";
atanf :: fn (y: f32) f32 #extern "atanf";
atan :: fn (y: f64) f64 #extern "atan";
copysignf :: fn (x: f32, y: f32) f32 #extern "copysingf";
copysign :: fn (x: f64, y: f64) f64 #extern "copysing";
tolower :: fn (c: int) int #extern "tolower";
toupper :: fn (c: int) int #extern "toupper";
getcwd :: fn (buf: *char, size: size_t) *char #extern "getcwd";
unlink :: fn (pathname: *char) int #extern "unlink";
read :: fn (fd: int, buf: *char, count: size_t) ssize_t #extern "read";
readlink :: fn (pathname: *char, buf: *char, bufsiz: size_t) ssize_t #extern "readlink";
close :: fn (fd: int) int #extern "close";
write :: fn (fd: int, buf: *char, count: size_t) ssize_t #extern "write";
usleep :: fn (us: uint) int #extern "usleep";
rmdir :: fn (path: *char) int #extern "rmdir";
chdir :: fn (path: *char) int #extern "chdir";
gettimeofday :: fn (tv: *timeval, tz: *timezone) int #extern "gettimeofday";
ftell :: fn (stream: void_ptr) long #extern "ftell";
fseek :: fn (stream: void_ptr, offset: long, whence: int) int #extern "fseek";
lseek :: fn (fd: int, offset: off_t, whence: int) off_t #extern "lseek";
backtrace :: fn (array: *void_ptr, size: int) int #extern "backtrace";
backtrace_symbols :: fn (array: *void_ptr, size: int) **char #extern "backtrace_symbols";
errno :: fn () s32 #inline {
	_errno_location :: fn () *int #extern "__error";
	return @_errno_location();
}
pipe :: fn (p: *int /* pointer to 2 element array */) int #extern "pipe";
fork :: fn () pid_t #extern "fork";
dup :: fn (oldfd: int) int #extern "dup";
dup2 :: fn (oldfd: int, newfd: int) int #extern "dup2";
execv :: fn (file: *char, args: **char) int #extern "execv";
execvp :: fn (file: *char, args: **char) int #extern "execvp";
poll :: fn (fds: *pollfd, nfds: nfds_t, timeout: int) int #extern "poll";
access :: fn (path: *char, mode: int) int #extern "access";

kill :: fn (pid: pid_t, sig: s32) s32 #inline {
	return auto syscall(SYS_kill, auto pid, auto sig);
}

ioctl :: fn (fd: fd_t, request: s32, arg: s64) s32 #inline {
	return auto syscall(SYS_ioctl, fd, request, arg);
}

fcntl :: fn (fd: fd_t, request: int, flags: int = 0) int #extern "__fcntl";
time :: fn (tloc: *time_t) time_t #extern "time";
localtime :: fn (timep: *time_t) *tm #extern "localtime";
strftime :: fn (buf: *char, buf_size: size_t, fmt: *char, t: *tm) size_t #extern "strftime";
waitpid :: fn (pid: pid_t, status: *int, options: int) pid_t #extern "waitpid";

setenv :: fn (name: *char, value: *char, overwrite: int) int #extern "setenv";
unsetenv :: fn (name: *char) int #extern "unsetenv";

WEXITSTATUS :: fn (x: s32) s32 #inline {
	return (x >> 8) & 0x000000ff;
}

#scope_private
#import "os/posix/syscall"
