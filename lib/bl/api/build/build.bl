// =================================================================================================
// bl
//
// File:   build.bl
// Author: Martin Dorazil
// Date:   8/1/20
//
// Copyright 2020 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =================================================================================================

//! # Build System
//!
//! `#load "build/build.bl"`
//!
//! Compiler integrated build pipeline. Build pipline can be used to manage whole project compilation
//! process directly in BL. All you need is to create the build file called `build.bl` and specify the
//! `build_entry` function inside. When `-b` flag is used without need of specifying any files, the
//! compiler will lookup `build.bl` file in the current directory and execute it in compile time. All
//! compilation steps, target input and output can be specified here.
//!
//! Example of minimal build.bl:
//! ```
//! build :: fn () #build_entry {
//!     // create new executable target
//!     exe :: add_executable("MyProgram");
//!
//!     // add 'main.bl' file into the target 'exe'
//!     add_unit(exe, "main.bl");
//!
//!     // Start compilation
//!     compile(exe);
//! }
//! ```
//!
//! Start build pipeline using our build.bl file:
//! ```
//! $ blc -build
//! ```
//!
//! Compiler will automatically use build.bl file as build script and execute build function in compile time.
//! SDK file build/build.bl containing compiler API for build pipeline manipulation is loaded implicitly.
//!
//! **warning**: Build API is available only in compile-time.
//!
//! ## Basics
//!
//! ### Create new executable target
//!
//! Target is a single build target defined as consisting of build Units representing source files
//! needed for compilation. It`s basically a target compiled into an executable or binary file. Use
//! [add_executable](#add_executable) function to specify your target. There are several options
//! related to target, described later  in this documentation.
//!
//! ```
//! exe :: add_executable("MyProgram");
//! ```
//!
//! ### Add file into target
//!
//! Use [add_unit](#add_unit) function to add source files into the target. There is no need to add
//! all files you want to use, general `load` and `import` will do so automatically. Only `main` or
//! entry files must be included.
//!
//! ```
//! add_unit(exe, "main.bl");
//! ```
//!
//! ### Specify output directory
//!
//! Output directory is a directory where all compiler-produced files will be written (i.e. native
//! executables). Use [set_output_dir](#set_output_dir) function to specify this directory, current
//! directory is used by default.
//!
//! ```
//! set_output_dir(exe, "bin");
//! ```
//!
//! ### Compile target
//! ```
//! compile(exe);
//! ```
//!
//! ### Command line argumets
//! All argumets passed after ``-build`` compiler flag are automatically forwarded into
//! `command_line_arguments` global variable.
//!

/// Global builder options.
BuilderOptions :: struct {
	/// Toggle verbose mode. (Off by default.)
	verbose: bool;
	/// Toggle coloring the terminal output. (Off by default.)
	no_color: bool;
	/// Silent mode reduces amount of stuff printed to the standard output to minimum. (Off by default.)
	silent: bool;
	/// Toggle multithreading. (On by default.)
	no_jobs: bool;
	/// Disable all compiler warnings. (Off by default.)
	no_warning: bool;
	/// Use full (absolute) paths in compiler reports. (Off by default.)
	full_path_reports: bool;
	/// Toggle check of unused symbols. (Off by default.)
	no_usage_check: bool;
	/// Toggle printing of some compilation statistics. (Off by default.)
	stats: bool;
	/// Toggle experimantal targets. (Off by default.)
	enable_experimental_targets: bool;
	/// Release memory after compilation. When compiler is executed as a single-shot application (start -> compile -> end)
	/// all the time, we can leave releasing of allocated memory to the operating system to get some compilation speed boost.
	/// (Off by default.)
	do_cleanup_when_done: bool;
	/// Maximum count of error reported by the compiler.
	error_limit: s32;

	_doc_out_dir: *C.char; // private for now
}

/// Returns copy of current builder options. These are by default initializad from command line
/// arguments passed to the compiler.
get_builder_options :: fn () BuilderOptions {
	static_assert(sizeof(BuilderOptions) == 24);
	opt: BuilderOptions;
	__builder_get_options(&opt);
	return opt;
}

/// Overrides current builder options previously set from the command line or by calling this function.
set_builder_options :: fn (opt: BuilderOptions) {
	static_assert(sizeof(BuilderOptions) == 24);
	__builder_set_options(&opt);
}

/// Target is representation of whole program workspace, it's a consist of Units, every unit
/// represents one source file.
Target :: struct { // !!! ABI sync TargetOptions !!!
	/// See :ref:`TargetKind`.
	kind: TargetKind;
	/// Specify build mode of the target. See [BuildMode](#buildmode)
	build_mode: BuildMode;
	/// Specify debug information format used for target in debug mode. See [DebugInfo](#debuginfo).
	debug_info_kind: DebugInfo;
	/// Enable split of function arguments and return value into registers.
	register_split: bool;
	/// Verify LLVM module.
	verify_llvm: bool;
	/// Execute compile time tests.
	run_tests: bool;
	/// Reduce compile-time tests output (remove results section).
	tests_minimal_output: bool;
	/// Disable default API import.
	no_api: bool;
	/// Copy all known dependencies into output folder.
	copy_dependencies: bool;
	/// Execute main function in compile time.
	run: bool;
	/// Print out lexer output.
	print_tokens: bool;
	/// Print out AST.
	print_ast: bool;
	/// Emit LLVM IR code into file.
	emit_llvm: bool;
	/// Emit asm code into file.
	emit_asm: bool;
	/// Emit MIR code into file.
	emit_mir: bool;
	/// Disable generation of native binary.
	no_bin: bool;
	/// Disable LLVM backend.
	no_llvm: bool;
	/// Disable analyze pass of code generation.
	no_analyze: bool;
	/// Experimental x64 backend for debug only.
	x64: bool;
	/// See :ref:`AssertMode`.
	assert_mode: AssertMode;
	/// Check only code syntax.
	syntax_only: bool;
	/// Enable virtual machine debugger.
	vmdbg_enabled: bool;
	/// Specify MIR instruction ID to break on if virtual machine debugger is attached.
	vmdbg_break_on: s32;
	/// Enable experimental build targets.
	enable_experimental_targets: bool;
	/// Target triple according to LLVM.
	triple: TargetTriple;
}

/// Specification of compiler output binary kind.
TargetKind :: enum {
	EXECUTABLE    = 0;
	SHARED_LIBRARY = 1;
}

TargetArch :: enum s32 {
	UNKNOWN = 0;
	X86_64  = 1;
	AARCH64 = 2;
	ARM64   = 3;
}

TargetVendor :: enum s32 {
	UNKNOWN = 0;
	PC      = 1;
	APPLE   = 2;
}

TargetSystem :: enum s32 {
	UNKNOWN = 0;
	WINDOWS = 1;
	DARWIN  = 2;
	LINUX   = 3;
}

TargetEnvironment :: enum s32 {
	UNKNOWN = 0;
	MSVC    = 1;
	GNU     = 2;
	MUSL    = 3;
}

TargetTriple :: struct {
	arch: TargetArch;
	vendor: TargetVendor;
	os: TargetSystem;
	env: TargetEnvironment;
}

/// Specify target build mode. Every [Target](#target) can be compiled with various configuration
/// options. The `BuildMode` can specify which set of options compiler should use.
BuildMode :: enum s32 {
	/// Generates debug symbols and produce binary without any optimizations. `IS_DEBUG` global variable is
	/// set to `true` in this mode. (`false` in all other modes)
	DEBUG = 0;
	/// Fast release mode; no debug symbols are produced, all possible optimizations
	/// are applied to produce binary as fast as possible.
	/// The `assert` is disabled unless `Target.assert_mode` is `ALWAYS_ENABLED`.
	RELEASE_FAST = 1;
	/// Small release mode; no debug symbols are produced, optimizations are applied
	/// to produce binary reasonably fast and as small as possible.
	/// The `assert` is disabled unless `Target.assert_mode` is `ALWAYS_ENABLED`.
	RELEASE_SMALL = 2;
	/// Small release mode; with debug symbols produced, optimizations are applied
	/// to produce binary reasonably fast and as small as possible.
	/// The `assert` is disabled unless `Target.assert_mode` is `ALWAYS_ENABLED`.
	RELEASE_WITH_DEBUG_INFO = 3;
}

/// Debug information format.
DebugInfo :: enum s32 {
	DWARF = 0;
	CODE_VIEW = 1;
}

/// Specification of `assert` mode used for `Target`.
AssertMode :: enum s32 {
	/// By default compiler emits  all assertions in [BuildMode](#buildmode). Debug and skips all
	/// assertions in all optimized release modes.
	DEFAULT = 0;
	/// Force-enable assertion in all build modes.
	ALWAYS_ENABLED = 1;
	/// Force-disable assertion in all build modes.
	ALWAYS_DISABLED = 2;
}

/// Add new executable target into the current compilation queue. Target with specified name is
/// compiled into binary or it can be just executed in compile-time without any output created.
/// Assemblies are compiled after `build_entry` function execution in order they are added.
///
/// ### Example
/// ```
/// build :: fn () #build_entry {
///     exe :: add_executable("MyProgram");
///     add_unit(exe, "src/main.bl");
///
///     mode :: get_build_mode(exe);
///     switch mode {
///         BuildMode.DEBUG {
///             set_output_dir(exe, "build/debug");
///         }
///
///         BuildMode.RELEASE_SMALL,
///         BuildMode.RELEASE_FAST {
///             set_output_dir(exe, "build/release");
///         }
///     }
///     compile(exe);
/// }
/// ```
add_executable :: fn (name: string_view) *Target {
	if name.len == 0 { panic("Invalid executable name!"); }
	return __add_target(std.strtoc(name), cast(s32) TargetKind.EXECUTABLE);
}

/// Add new shared library target target into the current compilation queue.
add_library :: fn (name: string_view) *Target {
	if name.len == 0 { panic("Invalid library name!"); }
	return __add_target(std.strtoc(name), cast(s32) TargetKind.SHARED_LIBRARY);
}

/// Add new source file into the `target`. Function does nothing when `filepath` is already present
/// in the `target` assembly.
add_unit :: fn (target: *Target, filepath: string_view) {
	if !target { panic("Invalid target!"); }
	if filepath.len == 0 { panic("Invalid unit path!"); }
	__add_unit(target, std.strtoc(filepath));
}

/// Start compilation of the `target` assembly and return `ok` or `error` in case compilation failed.
compile :: fn (target: *Target) Error {
	if !target { panic("Invalid target!"); }
	state :: __compile(target);
	if state == 0 { return OK; }
	return error("Compilation failed!", state);
}

/// Compile all created targets one by one in order they were created. See also [compile](#compile).
/// All targets are released after the compilation is done.
compile_all :: fn () Error {
	state :: __compile_all();
	if state == 0 { return OK; }
	return error("Compilation failed!", state);
}

/// Add path for linker library lookup.
add_lib_path :: fn (target: *Target, path: string_view) {
	if !target { panic("Invalid target!"); }
	if path.len == 0 { panic("Invalid library path!"); }

	__add_lib_path(target, std.strtoc(path));
}

/// Add system library. Only name is required (without extension and prefix). Compiler will lookup
/// for this library in working directory, system `PATH` and `LINKER_LIB_PATH` variable specified
/// in `bl.conf` file. Linked library can be used also during compile-time execution, in such case
/// all needed symbols are loaded in compile-time.
///
/// In general there is no need to link libraries manually, all needed dependencies should be
/// handled by module import mechanism, however there is still an option do it manually.
///
/// Library name platform specific rules:
///
/// * On Linux name will be extended by 'lib' prefix and '.so' extension.
/// * On MacOS name will be extended by 'lib' prefix and '.dylib' extension.
/// * On Windows name will be extended only by '.dll' extension.
///
/// ### Example
/// ```
/// build :: fn () #build_entry {
///     exe :: add_executable("MyGame");
///     add_unit(exe, "src/main.bl");
///
///     switch PLATFORM {
///         Platform.WINDOWS { target_windows(exe); }
///         default          { panic("Unknown build target!"); }
///     }
///     compile(exe);
/// }
///
/// target_windows :: fn (exe: *Target) {
///     link_library(exe, "freetype");
///     link_library(exe, "zlib");
///     link_library(exe, "png");
/// }
/// ```
link_library :: fn (target: *Target, name: string_view) {
	if !target { panic("Invalid target!"); }
	if name.len == 0 { panic("Invalid library name!"); }

	__link_library(target, std.strtoc(name));
}

/// Appends raw string data directly to linker command. Passed option is added without any
/// processing and compatibility validation.
append_linker_options :: fn (target: *Target, option: string_view) {
	if !target { panic("Invalid target!"); }
	if option.len == 0 { return; }
	__append_linker_options(target, std.strtoc(option));
}

/// Set build output directory. This is directory where all output files will be written. For
/// example different output directory can be set for any build mode.
///
/// Directory path `dir`. This can contain non-existing directories separated by `/`, compiler will
/// create all missing directories in passed path.
///
/// Specified directory will be used also for build temporary files.
set_output_dir :: fn (target: *Target, dir: string_view) {
	if !target { panic("Invalid target!"); }
	if std.str_is_empty(dir) { return; }
	__set_output_dir(target, std.strtoc(dir));
}

/// Get output directory specified by [set_output_dir](#set_output_dir) or empty string.
get_output_dir :: fn (target: *Target) string_view {
	if !target { panic("Invalid target!"); }
	cdir :: __get_output_dir(target);
	if !cdir { return std.str_view_empty; }
	return std.ctostr(cdir);
}

/// Specify import module policy in [set_module_dir](#set_module_dir) function call. Module
/// dependencies of any target can be treated in different ways depending on use case and needs of
/// programmer. Sometimes program stability and maintainability is more important than use of
/// latest versions of modules. These flags can specify how local modules should be updated.
ModuleImportPolicy :: enum s32 {
	/// Use system modules but prefer local ones in module directory. This option disables any
	/// copying and version check. Local module directory can contain custom project related
	/// modules you don't want to expose to the whole system. This is the **default** option.
	SYSTEM = 0;

	/// Bundle only missing modules from system into the local module folder and ignore if there is
	/// newer version available. Individual module updates can be done by renaming old one and
	/// re-run compilation. Custom modules (not coming from main API folder are kept untouched.)
	BUNDLE = 1;

	/// Bundle all missing modules from system into the local module folder and update old ones
	/// also. Custom modules (not coming from main API folder are kept untouched.) Compiler will
	/// create `.bak` backup directory for every module before any updates.
	BUNDLE_LATEST = 2;
}

/// Sets module directory `dir` for `target`. All imported modules will be copied into this
/// directory according to chosen [ModuleImportPolicy](#moduleimportpolicy). Module policy is set
/// to `SYSTEM` by default even if this function has not been called.
set_module_dir :: fn (target: *Target, dir: string_view, policy := ModuleImportPolicy.SYSTEM) {
	if !target { panic("Invalid target!"); }
	if std.str_is_empty(dir) { return; }
	__set_module_dir(target, std.strtoc(dir), auto policy);
}

/// Get module directory specified by [set_module_dir](#set_module_dir) or default one.
get_module_dir :: fn (target: *Target) string_view {
	if !target { panic("Invalid target!"); }
	cdir :: __get_module_dir(target);
	if !cdir { return std.str_view_empty; }
	return std.ctostr(cdir);
}

/// Get module import policy specified by [set_module_dir](#set_module_dir) or default one.
get_module_import_policy :: fn (target: *Target) ModuleImportPolicy {
	if !target { panic("Invalid target!"); }
	return auto __get_module_import_policy(target);
}

/// Returns target triple of the current host machine.
get_default_triple :: fn () TargetTriple {
	result: TargetTriple;
	__get_default_triple(&result);
	return result;
}

/// Converts target triple to string.
///
/// !!! note
///     The result string is allocated using current temporary allocator.
triple_to_string :: fn (triple: TargetTriple) string_view {
	buf: [128]C.char #noinit;
	len :: __triple_to_string(&triple, buf.ptr, auto buf.len);
	return tprint("%", std.ctostr(buf.ptr, len));
}

#private
__add_target :: fn (name: *C.char, kind: C.int) *Target #extern;
__add_unit :: fn (target: *Target, filepath: *C.char) #extern;
__compile :: fn (target: *Target) C.int #extern;
__compile_all :: fn () C.int #extern;
__add_lib_path :: fn (target: *Target, path: *C.char) #extern;
__link_library :: fn (target: *Target, name: *C.char) #extern;
__append_linker_options :: fn (target: *Target, option: *C.char) #extern;
__set_output_dir :: fn (target: *Target, dir: *C.char) #extern;
__get_output_dir :: fn (target: *Target) *C.char #extern;
__set_module_dir :: fn (target: *Target, dir: *C.char, policy: C.int) #extern;
__get_module_dir :: fn (target: *Target) *C.char #extern;
__get_module_import_policy :: fn (target: *Target) C.int #extern;
__get_default_triple :: fn (triple: *TargetTriple) #extern;
__triple_to_string :: fn (triple: *TargetTriple, buf: *C.char, buf_len: C.int) C.int #extern;
__builder_get_options :: fn (opt: *BuilderOptions) #extern;
__builder_set_options :: fn (opt: *BuilderOptions) #extern;