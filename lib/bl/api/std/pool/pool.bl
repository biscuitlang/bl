//! # Pool Allocator
//!
//! `#import "std/pool"`
//!
//! Pool allocator is simple growing allocator grouping all allocated memory into memory blocks
//! of `POOL_DEFAULT_SIZE` bytes by default.
//!
//! ### Supported Operations
//!
//!     - [x] Allocate
//!     - [-] Reallocate (Always allocates and copy data into a new block.)
//!     - [-] Free (Keeps memory for later use.)
//!     - [x] Release
//!     - [x] Reset
//!
//! - In case there is no space left in the current block new one is allocated.
//! - Allocated data remains valid until the `reset` or `release` is called.
//! - If required allocation size is greater then the current block size, the new block is allocated
//!   with size `N * current_block_size` where `N` is the minimum multiplier needed to store the required
//!   data size.
//! - The pool allocator never frees data when `free` is called, you should call `reset` instead
//!   when all previously allocated data can be freed.
//! - All preallocated blocks are kept (even after the `reset` is called) for later use.
//!
//! !!! note
//!     This allocator is used as a default temporary allocator in the application context.
//!
POOL_DEFAULT_SIZE : usize : 65536; // 64kB

/// Pool allocator type.
PoolAllocator :: struct #base Allocator {
	/// Size of the current block.
	block_size: usize;
	/// Base allocator used to allocate block memory.
	allocator: *Allocator;

	used_blocks: [..]*u8;
	unused_blocks: [..]*u8;
	obsolete_blocks: [..]*u8;

	current_block: *u8;
	top: *u8;
	space: usize;
}

/// Default pool allocator instance using the current allocator in application context and `POOL_DEFAULT_SIZE`.
pool_default :: PoolAllocator.{
	base = Allocator.{ handler = auto &handler },
	block_size = POOL_DEFAULT_SIZE
};

/// Make new pool allocator instance. The `allocator` is the allocator used internally to allocate
/// block memory. The `block_size` is size of each preallocated block in Bytes (note that the block
/// size can grow over time when bigger continuous memory allocations are required).
pool_make :: fn (allocator: *Allocator = null, block_size := POOL_DEFAULT_SIZE) PoolAllocator #inline {
	pool: PoolAllocator;
	pool.handler = auto &handler;
	pool.block_size = block_size;
	pool.allocator = allocator;

	array_init(&pool.used_blocks, 0, pool.allocator);
	array_init(&pool.unused_blocks, 0, pool.allocator);
	array_init(&pool.obsolete_blocks, 0, pool.allocator);
	return pool;
}

/// Release all allocated memory used by `pool` (allocated in `pool.allocator`).
pool_release :: fn (pool: *PoolAllocator) #obsolete "Use release_allocator instead" {
	release(pool);
}

/// Invalidate all allocations but keep preallocated memory block for later use.
pool_reset :: fn (pool: *PoolAllocator) #inline #obsolete "Use reset_allocator instead" {
	reset(pool);
}

#scope_private
#import "std/math"
#import "std/array"

handler :: fn (
	pool: *PoolAllocator,
	operation: AllocOp,
	ptr: *u8,
	size: usize,
	alignment: usize,
	_: string_view,
	_: s32
) (mem: *u8, err: Error) {
	using AllocOp;
	switch operation {
		ALLOCATE {
			return allocate(pool, size, alignment);
		}
		REALLOCATE {
			mem, err :: allocate(pool, size, alignment);
			if err { return mem, err; }
			if !ptr { return mem, OK; }
			// Copy old data if we have the old pointer.
			previously_allocated_size :: get_usable_allocation_size(ptr);
			memcpy(mem, ptr, min(previously_allocated_size, size));
			return mem, OK;
		}
		RESET {
			reset(pool);
		}
		RELEASE {
			release(pool);
		}
		FREE;

		default { panic("Unknown operation."); }
	}
	return null, OK;
}

allocate :: fn (pool: *PoolAllocator, size: usize, alignment: usize) (mem: *u8, err: Error) {
	assert(size > 0);

	adjusted_alignment :: max(alignof(usize), alignment);
	mask :: ~(adjusted_alignment - 1);
	allocation_size := sizeof(usize) + size + adjusted_alignment - 1;

	if pool.space < allocation_size {
		err :: ensure_space(pool, allocation_size);
		if err { return null, err; }
	}
	mem := pool.top;
	mem = auto ((cast(usize) mem) + sizeof(usize) + adjusted_alignment - 1 & mask);

	// We should have enough space to store meta data.
	assert(ptr_diff(mem, pool.top) >= auto sizeof(usize));

	// Adjust next top pointer.
	pool.top = auto (cast(usize) pool.top + allocation_size);
	pool.space -= allocation_size;

	// We should have enough space to store user data.
	assert(ptr_diff(pool.top, mem) >= auto size);

	// Store usable data size before the actual allocation.
	set_usable_allocation_size(mem, size);
	return mem, OK;
}

get_usable_allocation_size :: fn (ptr: *u8) usize #inline {
	usable_size_ptr :: cast(*usize) ((cast(usize) ptr) - sizeof(usize));
	return @usable_size_ptr;
}

set_usable_allocation_size :: fn (ptr: *u8, size: usize) #inline {
	usable_size_ptr :: cast(*usize) ((cast(usize) ptr) - sizeof(usize));
	assert(is_aligned(usable_size_ptr, alignof(usize)));
	(@usable_size_ptr) = size;
}

reset :: fn (pool: *PoolAllocator) {
	if pool.current_block {
		array_push(&pool.unused_blocks, pool.current_block);
	}
	loop i := 0; i < pool.used_blocks.len; i += 1 {
		array_push(&pool.unused_blocks, pool.used_blocks[i]);
	}
	pool.used_blocks.len = 0;
	loop i := 0; i < pool.obsolete_blocks.len; i += 1 {
		free(pool.obsolete_blocks[i], pool.allocator);
	}
	pool.obsolete_blocks.len = 0;
	pool.current_block = null;
	pool.space = 0;
	pool.top = null;
}

release :: fn (pool: *PoolAllocator) {
	reset(pool);
	loop i := 0; i < pool.unused_blocks.len; i += 1 {
		free(pool.unused_blocks[i], pool.allocator);
	}
	pool.unused_blocks.len = 0;
	array_terminate(&pool.used_blocks);
	array_terminate(&pool.unused_blocks);
	array_terminate(&pool.obsolete_blocks);
}

ensure_space :: fn (pool: *PoolAllocator, size: usize) Error {
	if pool.block_size == 0 { pool.block_size = POOL_DEFAULT_SIZE; }
	block_size := pool.block_size;
	loop (block_size < size) {
		block_size *= 2;
	}
	if pool.current_block {
		// The current block has not enough space.
		array_push(&pool.used_blocks, pool.current_block);
		pool.current_block = null;
	}
	if block_size > pool.block_size { resize(pool, block_size); }

	if !array_pop(&pool.unused_blocks, &pool.current_block) {
		mem, err :: alloc(pool.block_size, DEFAULT_ALIGNMENT, pool.allocator);
		if err { return err; }
		pool.current_block = mem;
	}

	pool.space = pool.block_size;
	pool.top = pool.current_block;
	return OK;
}

resize :: fn (pool: *PoolAllocator, new_block_size: usize) {
	pool.block_size = new_block_size;
	loop i := 0; i < pool.used_blocks.len; i += 1 {
		array_push(&pool.obsolete_blocks, pool.used_blocks[i]);
	}
	pool.used_blocks.len = 0;
	loop i := 0; i < pool.unused_blocks.len; i += 1 {
		array_push(&pool.obsolete_blocks, pool.unused_blocks[i]);
	}
	pool.unused_blocks.len = 0;
}
