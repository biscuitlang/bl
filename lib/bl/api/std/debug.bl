// =================================================================================================
// bl
//
// File:   debug.bl
// Author: Martin Dorazil
// Date:   3/15/18
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =================================================================================================

//! # Debug
//!
//! `#load "std/debug.bl"`
//!
//! Set of common debugging tools.

/// Print debug log using current application_context `print_log_fn` function.
print_log :: fn (format: string_view, args: ...) #inline {
	application_context.print_log_fn(PrintLogKind.MESSAGE, "", 0, format, args);
}

/// Print debug info using current application_context `print_log_fn` function.
print_info :: fn (format: string_view, args: ...) #inline {
	application_context.print_log_fn(PrintLogKind.INFO, "", 0, format, args);
}

/// Print debug warning using current application_context `print_log_fn` function.
print_warn :: fn (format: string_view, args: ...) #inline {
	application_context.print_log_fn(PrintLogKind.WARNING, "", 0, format, args);
}

/// Print debug error using current application_context.print_log_fn function.
print_err :: fn { print_err_e; print_err_msg; }

/// Invoke assert handler from the application context in case the `condition` is `false`.
///
/// !!! important
///     All calls to the assert function are removed from release builds by default.
///
/// !!! warning
///     There is no argument validation in case the assert call is removed from compilation.
assert :: fn (condition: bool, message := "", loc := #call_location) #compiler {
	if condition { return; }
	if application_context._assert_handled { return; }
	application_context._assert_handled = true;
	application_context.assert_fn(message, loc);
}

/// Assertion check evaluated in compile time.
static_assert :: fn (expr: bool) #comptime {
	if expr { return; }
	unreachable;
}

__assert_default :: fn (message: string_view, loc: *CodeLocation) {
	// @Incomplete: Use _wassert dialog on windows???
	application_context.print_log_fn(PrintLogKind.ASSERT, loc.file, loc.line, message);
	unreachable;
}

/// Abort execution and eventually print panic message if there is one specified. First passed
/// argument in 'args' will act like format string and can be eventually followed by any additional
/// values required.
///
/// ### Example
///
/// ```bl
/// panic(); // abort without any messages
/// panic(error); // abort with [Error](#error).
/// panic("oops!"); // abort with message printed out.
/// panic("Failed with error: %", errn); // first argument passed acts like formatting string
/// ```
panic :: fn { panic_empty; panic_error; panic_msg; }

/// Kinds of log messages.
PrintLogKind :: enum u8 {
	/// Debug log message.
	MESSAGE;
	/// Informative log message.
	INFO;
	/// Warning log message.
	WARNING;
	/// Error log message.
	ERROR;
	/// Assert log message.
	ASSERT;
	/// Panic log message.
	PANIC;
};

/// Print current stack trace into stdout. Does nothing in release modes (stack trace information is
/// available only when the debug info is in place).
print_backtrace :: fn (skip_frames := 0) #inline {
	trace: []CodeLocation;
#if IS_DEBUG {
	trace = os_get_backtrace(skip_frames+1);
} else {
	skip_frames; // To silent usage warning.
}
	if trace.len == 0 { return; }
	print("Backtrace: \n");
	loop i := 0; i < trace.len; i += 1 {
		frame :: &trace[i];
		print("  %:%: %\n", frame.file, frame.line, frame.function);
	}
}

__print_log_default :: fn (kind: PrintLogKind, file: string_view, line: s32, format: string_view, args: ...) {
	output_stream := os_stdout();
	buf: [PRINT_MAX_LENGTH]u8 #noinit;
	tag: string_view;
	w: s32;
	switch kind {
		PrintLogKind.MESSAGE { tag = "log"; }
		PrintLogKind.INFO    { tag = "info"; }
		PrintLogKind.WARNING { tag = "warning"; }
		PrintLogKind.ERROR   { tag = "error";  output_stream = os_stderr(); }
		PrintLogKind.ASSERT  { tag = "assert"; output_stream = os_stderr(); }
		PrintLogKind.PANIC   { tag = "panic";  output_stream = os_stderr(); }
	}
	if file.len > 0 {
		w = bprint(buf, "% [%:%]: ", tag, file, line);
	} else {
		w = bprint(buf, "%: ", tag);
	}
	w += bprint(slice_range(buf, w), format, args);
	w += bprint(slice_range(buf, w), "\n");
	io.write(output_stream, buf.ptr, auto w);
};

/// Start measure elapsed milliseconds in the current scope. This function call will push the current
/// time into the thread-local queue. Measurement must be ended by [measure_elapsed_ms_end](#measure_elapsed_ms_end) call.
///
/// ### Example
///
/// ```bl
/// measure_elapsed_ms_begin();
/// defer measure_elapsed_ms_end("Name");
/// ```
///
/// !!! warning
///     Every `measure_elapsed_ms_begin` must have corresponding
///     [measure_elapsed_ms_end](#measure_elapsed_ms_end) call.
measure_elapsed_ms_begin :: fn () #inline {
	array_push(&_elapsed_ms_stack, os_ftick_ms());
}

/// Pop the last start time from the runtime measurement queue and log the result time difference when
/// the name is not '-'. The name may be empty, in such case parent function name is used implicitly for
/// debug log.
///
/// Returns time difference between the current time and last start time.
measure_elapsed_ms_end :: fn (_name : string_view = "", loc := #call_location) f64 #inline {
	if _elapsed_ms_stack.len == 0 { return 0.; }
	index :: _elapsed_ms_stack.len - 1;
	start_ms :: _elapsed_ms_stack[index];
	_elapsed_ms_stack.len -= 1;
	elapsed_ms :: os_ftick_ms() - start_ms;

	name := _name;
	if name.len == 0 {
		name = loc.function;
	} else if name.len == 1 && name[0] == '-' {
		name = "";
	}

	if name.len > 0 {
		print_log("% took % ms.", name, elapsed_ms);
	}
	if index == 0 { array_terminate(&_elapsed_ms_stack); }
	return elapsed_ms;
}

#scope_private
#import "std/print"
#import "std/array"

io :: #import "std/io";

_elapsed_ms_stack: [..]f64 #thread_local;

panic_empty :: fn () {
	unreachable;
}

panic_error :: fn (err: Error) {
	application_context.print_log_fn(PrintLogKind.PANIC, "", 0, "%", err);
	unreachable;
}

panic_msg :: fn (format: string_view, args: ...) {
	application_context.print_log_fn(PrintLogKind.PANIC, "", 0, format, args);
	unreachable;
}

print_err_e :: fn (err: Error) #inline {
	application_context.print_log_fn(PrintLogKind.ERROR, "", 0, "%", err);
};

print_err_msg :: fn (format: string_view, args: ...) #inline {
	application_context.print_log_fn(PrintLogKind.ERROR, "", 0, format, args);
};
