#scope_module

_File :: *u8;
_FILE_INVALID : _File : null;

_exist :: fn (filepath: string_view) bool #inline {
	if filepath.len == 0 { return false; }
	return PathFileExistsA(strtoc(filepath)) > 0;
}

_open :: fn (filepath: string_view, mode: OpenFileMode) (_File, Error) {
	if str_is_empty(filepath) { return null, error(ERR_INVALID_HANDLE, "File path is empty!"); }
	access, create :: modes_to_flags(mode);
	handle :: CreateFile(strtoc(filepath), access, 0, null, create, FILE_ATTRIBUTE_NORMAL, null);
	if handle == INVALID_HANDLE_VALUE {
		ec, estr :: os_get_last_error();
		return null, error(ec, "Cannot open file '%': %", filepath, estr);
	}
	if is_flag(access, FILE_APPEND_DATA) {
		SetFilePointer(handle, 0, null, FILE_END);
	} else if is_flag(access, GENERIC_WRITE) {
		SetEndOfFile(handle);
	}
	return handle, OK;
}

_remove :: fn (filepath: string_view) Error #inline {
	if str_is_empty(filepath) { return error(ERR_INVALID_HANDLE, "File path is empty!"); }
	tmp :: DeleteFileA(strtoc(filepath));
	if tmp == 0 {
		ec, estr :: os_get_last_error();
		return error(ec, "Cannot remove file '%': %", filepath, estr);
	}
	return OK;
}

_copy :: fn (src: string_view, dest: string_view, override: bool) Error {
	if str_is_empty(src) { return error(ERR_INVALID_HANDLE, "File path is empty!"); }
	if str_is_empty(dest) { return error(ERR_INVALID_HANDLE, "File path is empty!"); }
	fail_if_exist := 1;
	if  override { fail_if_exist = 0; }
	if CopyFileA(strtoc(src), strtoc(dest), fail_if_exist) == 0 {
		ec, estr :: os_get_last_error();
		return error(ec, "Cannot copy file '%' to '%': %", src, dest, estr);
	}
	return OK;
}

_close :: fn (handle: _File) #inline {
	if !handle { return; }
	CloseHandle(handle);
}

_get_uid :: fn (handle: _File) (u64, Error) {
	tmp: BY_HANDLE_FILE_INFORMATION;
	if GetFileInformationByHandle(auto handle, &tmp) == 0 {
		ec, estr :: os_get_last_error();
		return 0, error(ec, "Cannot get file information: %", estr);
	}
	uid :: ((cast(u64) tmp.nFileIndexHigh) << 32) + (cast(u64) tmp.nFileIndexLow);
	return uid, OK;
}

_get_uid_by_name :: fn (filepath: string_view) (u64, Error) {
	file, err1 :: _open(filepath, OpenFileMode.READ);
	defer _close(file);
	if err1 { return 0, err1; }
	return _get_uid(file);
}

_create_dir :: fn (dirpath: string_view) Error {
	if str_is_empty(dirpath) { return error(ERR_INVALID_HANDLE, "Cannot create directory, dirpath is empty."); }
	if CreateDirectoryA(strtoc(dirpath), null) == 0 {
		ec, estr :: os_get_last_error();
		return error(ec, "Cannot create directory '%': %", dirpath, estr);
	}
	return OK;
}

_remove_dir :: fn (dirpath: string_view) Error {
	if str_is_empty(dirpath) { return error(ERR_INVALID_HANDLE, "Cannot remove directory, dirpath is empty."); }
	if RemoveDirectoryA(strtoc(dirpath)) == 0 {
		ec, estr :: os_get_last_error();
		return error(ec, "Cannot remove directory '%': %", dirpath, estr);
	}
	return OK;
}

_is_directory :: fn (path: string_view) (bool, Error) #inline {
	if str_is_empty(path) { return false, error(ERR_INVALID_HANDLE, "Path is empty."); }
	attributes :: GetFileAttributesA(strtoc(path));
	if attributes == INVALID_FILE_ATTRIBUTES {
		ec, estr :: os_get_last_error();
		return false, error(ec, "Cannot check directory '%': %", path, estr);
	}
	return is_flag(attributes, auto FILE_ATTRIBUTE_DIRECTORY), OK;
}

_visit_files :: fn (dirpath: string_view, is_recursive: bool, leaf_first: bool, visitor: *fn(info: *FileVisitInfo, ctx: *u8) Error, ctx: *u8 = null) Error #inline {
	if dirpath.len > (MAX_PATH-3) { return error("Path too long!"); }
	directory :: str_make(dirpath);
	defer str_terminate(&directory);
	err :: _normalize(&directory);
	if err { return err; }

	tmp :: str_make(directory);
	defer str_terminate(&tmp);
	str_append(&tmp, "\\*");

	find_data: FIND_DATA;
	handle :: FindFirstFile(strtoc(tmp), &find_data);
	if handle == INVALID_HANDLE_VALUE {
		ec, estr :: os_get_last_error();
		return error(ec, "Cannot list directory '%': %", dirpath, estr);
	}
	defer FindClose(handle);

	filepath: string;
	defer str_terminate(&filepath);

	loop {
		info: FileVisitInfo;
		if is_flag(find_data.dwFileAttributes, auto FILE_ATTRIBUTE_DIRECTORY) {
			info.is_directory = true;
			info.step_into_directory = is_recursive;
		}
		filename :: ctostr(auto find_data.cFileName.ptr);
		// We skip these, but maybe in some cases we need them???
		if (!str_match(filename, ".")) && (!str_match(filename, "..")) {
			str_clear_concat(&filepath, directory, "/", filename);
			info.filename = filename;
			info.filepath = filepath;

			if !leaf_first {
				visit_err :: visitor(&info, ctx);
				if visit_err { return visit_err; }
			}

			may_step_into :: info.step_into_directory || leaf_first;
			if is_recursive && info.is_directory && may_step_into {
				err :: _visit_files(filepath, is_recursive, leaf_first, visitor, ctx);
				if err { return err; }
			}

			if leaf_first {
				visit_err :: visitor(&info, ctx);
				if visit_err { return visit_err; }
			}
		}
		if FindNextFile(handle, &find_data) == 0 { break; }
	}
	return OK;
}

_validate_filename :: fn (name: string_view) bool {
	if name.len == 0 { return false; }
	invalid :: "<>:\"/\\|?*\t";
	loop i := 0; i < invalid.len; i += 1 {
		if str_count_of(name, invalid[i]) > 0 { return false; }
	}
	return true;
}

_get_cwd :: fn () string #inline {
	result: string;
	required_buffer_size :: GetCurrentDirectoryA(0, null);
	if required_buffer_size == 0 then panic("Unable to resolve current working directory.");

	str_resize(&result, auto required_buffer_size);
	written :: GetCurrentDirectoryA(auto result.len, auto result.ptr);
	if written == 0 then panic("Unable to resolve current working directory, read path incomplete.");
	// Shrink zero-terminator.
	result.len -= 1;
	if written != auto result.len then panic("Unable to resolve current working directory, read path incomplete.");

	str_replace_all(&result, '\\', '/');
	remove_last_separator(&result);

	return result;
}

_set_cwd :: fn (path: string_view) Error #inline {
	if str_is_empty(path) { return error(ERR_INVALID_HANDLE, "Path is empty!"); }
	if SetCurrentDirectoryA(strtoc(path)) == 0 {
		ec, estr :: os_get_last_error();
		return error(ec, "Cannot set current directory to '%': %", path, estr);
	}
	return OK;
}

_get_home :: fn () string #inline {
	tmp :: "USERPROFILE";
	cdir :: cast(*u8) C.getenv(auto tmp.ptr);
	if !cdir { return str_new(); }
	out :: str_new(cdir);
	str_replace_all(&out, '\\', '/');
	remove_last_separator(&out);
	return out;
}

_get_tmp :: fn () string #inline {
	buf: [OS_PATH_MAX]u8 #noinit;
	written :: GetTempPathA(auto buf.len, auto buf.ptr);
	if written == 0 { return str_new(); }
	out :: str_new(buf.ptr);
	str_replace_all(&out, '\\', '/');
	remove_last_separator(&out);
	return out;
}

_normalize :: fn (filepath: *string) Error {
	if !filepath { return error(ERR_INVALID_HANDLE, "File path is null!"); }
	if str_is_empty(@filepath) { return error(ERR_INVALID_HANDLE, "File path is empty!"); }
	buf : [OS_PATH_MAX]s8 #noinit;
	if GetFullPathNameA(strtoc(@filepath), auto buf.len, buf.ptr, null) == 0 {
		ec, estr :: os_get_last_error();
		return error(ec, "Cannot normalize '%': %", @filepath, estr);
	}
	if PathFileExistsA(strtoc(@filepath)) == 0 {
		ec, estr :: os_get_last_error();
		return error(ec, "Cannot normalize '%': %", @filepath, estr);
	}
	str_clear(filepath);
	str_append(filepath, ctostr(buf.ptr));
	str_replace_all(filepath, '\\', '/'); // Fix to unix
	return OK;
}

_read :: fn (stream: *FileStream, dest: *u8, size: s64) (s64, Error) {
	if !dest { return 0, error(ERR_INVALID_HANDLE, "Cannot read, destination is invalid."); }
	read_bytes: DWORD #noinit;
	if ReadFile(stream.handle, dest, auto size, &read_bytes, null) == 0 {
		ec, estr :: os_get_last_error();
		return 0, error(ec, "Cannot read file: %", estr);
	}
	return auto read_bytes, OK;
}

_write :: fn (stream: *FileStream, src: *u8, size: s64) (s64, Error) {
	if !src { return 0, error(ERR_INVALID_HANDLE, "Cannot write, source is invalid."); }
	written_bytes: DWORD #noinit;
	if WriteFile(stream.handle, src, auto size, &written_bytes, null) == 0 {
		ec, estr :: os_get_last_error();
		return 0, error(ec, "Cannot write: %", estr);
	}
	return auto written_bytes, OK;
}

_seek :: fn (stream: *FileStream, locator: io.StreamLocator, offset: s64) (s64, Error) {
	move_method := FILE_CURRENT;
	using io.StreamLocator;
	switch locator {
		CURRENT;
		BEGIN { move_method = FILE_BEGIN; }
		END { move_method = FILE_END; }
	}
	of: union { part: struct { low: s32; high: s32; }; offset: s64 };
	of.offset = offset;
	result :: SetFilePointer(stream.handle, of.part.low, &of.part.high, move_method);
	if result == INVALID_SET_FILE_POINTER {
		ec, estr :: os_get_last_error();
		return 0, error(ec, "Cannot get file pointer: %", estr);
	}
	of.part.low = auto result;
	return of.offset, OK;
}

#scope_private
#import "os/windows"

C :: #import "libc";

modes_to_flags :: fn (modes: OpenFileMode) (access: u32, create: u32) #inline {
	access: u32;
	create: u32;
	if is_flag(modes, OpenFileMode.READ) { access = access | GENERIC_READ; }
	if is_flag(modes, OpenFileMode.WRITE) { access = access | GENERIC_WRITE; }
	if is_flag(modes, OpenFileMode.APPEND) { access = access | FILE_APPEND_DATA; }
	if is_flag(modes, OpenFileMode.CREATE) { create = OPEN_ALWAYS; }
	if access == 0 { access = GENERIC_READ; }
	if create == 0 { create = OPEN_EXISTING; }
	return access, create;
}

remove_last_separator :: fn (path: *string) #inline {
	if str_is_empty(@path) { return; }
	if (@path)[path.len-1] == '/' {
		(@path)[path.len-1] = '\0';
		path.len -= 1;
	}
}
