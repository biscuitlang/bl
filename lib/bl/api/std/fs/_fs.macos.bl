#scope_module

/// File handle type.
_File :: C.int;
_FILE_INVALID : _File : -1;

_exist :: fn (filepath: string_view) bool #inline {
	if filepath.len == 0 { return false; }
	tmp: C.stat_t;
	return C.stat(strtoc(filepath), &tmp) == 0;
}

_open :: fn (filepath: string_view, mode: OpenFileMode) (_File, Error) {
	if filepath.len < 1 { return 0, error(ERR_INVALID_HANDLE, "File path is empty!"); }
	flags :: modes_to_flags(mode);
	mode_flags : C.mode_t : 0x1A4; // 0644
	handle :: C.open(strtoc(filepath), flags, 0);
	if handle < 0 { // error
		ec, estr :: os_get_last_error();
		return 0, error(ec, "Cannot open file '%': %.", filepath, estr);
	}
	// This is for some reason required on some versions on macOS.
	if C.fchmod(handle, mode_flags) < 0 {
		ec, estr :: os_get_last_error();
		return 0, error(ec, "Cannot set file permissions '%': %.", filepath, estr);
	}
	return handle, OK;
}

_remove :: fn (filepath: string_view) Error #inline {
	if filepath.len < 1 { return error(ERR_INVALID_HANDLE, "File path is empty!"); }
	if C.unlink(strtoc(filepath)) != 0 {
		ec, estr :: os_get_last_error();
		return error(ec, "Cannot remove file '%': %.", filepath, estr);
	}
	return OK;
}

_get_uid :: fn (handle: _File) (u64, Error) {
	tmp: C.stat_t;
	if C.fstat(auto handle, &tmp) != 0 {
		ec, estr :: os_get_last_error();
		return 0, error(ec, "Cannot get file information.", estr);
	}
	return auto tmp.st_ino, OK;
}

_get_uid_by_name :: fn (filepath: string_view) (u64, Error) {
	file, err1 :: _open(filepath, OpenFileMode.READ);
	defer _close(file);
	if err1 { return 0, err1; }
	return _get_uid(file);
}

_copy :: fn (src: string_view, dest: string_view, override: bool) Error {
	if src.len  < 1 then return error(ERR_INVALID_HANDLE, "Source file path is empty!");
	if dest.len < 1 then return error(ERR_INVALID_HANDLE, "Destination file path is empty!");
	if _exist(dest) && !override { return error(ERR_ALREADY_EXIST, "Destination already exist '%'", dest); }

	src_stream, err_src :: open_file(src, OpenFileMode.READ);
	defer close_file(&src_stream);
	if err_src { return err_src; }

	dest_stream, err_dest :: open_file(dest, OpenFileMode.WRITE | OpenFileMode.CREATE);
	defer close_file(&dest_stream);
	if err_dest { return err_dest; }

	tmp: [1024 * 4]u8 #noinit;
	loop {
		read_bytes, read_err :: io.read(&src_stream, tmp.ptr, tmp.len);
		if read_err { return read_err; }
		if read_bytes == 0 { break; }
		write_bytes, write_err :: io.write(&dest_stream, tmp.ptr, read_bytes);
		if write_err { return write_err; }
		if read_bytes != write_bytes { return error("Failed to copy '%' to '%'", src, dest); }
	}
	return OK;
}

_close :: fn (handle: _File) #inline {
	C.close(auto handle);
}

_create_dir :: fn (dirpath: string_view) Error {
	if dirpath.len < 1 { return error(ERR_INVALID_HANDLE, "Cannot create directory, dirpath is empty."); }
	mode : C.mode_t : 0x1ED; // 0755
	if C.mkdir(strtoc(dirpath), mode) != 0 {
		ec, estr :: os_get_last_error();
		return error(ec, "Cannot create directory '%': %.", dirpath, estr);
	}
	return OK;
}

_remove_dir :: fn (dirpath: string_view) Error {
	if dirpath.len < 1 { return error(ERR_INVALID_HANDLE, "Cannot remove directory, dirpath is empty."); }
	if C.rmdir(auto dirpath.ptr)!= 0 {
		ec, estr :: os_get_last_error();
		return error(ec, "Cannot remove directory '%': %.", dirpath, estr);
	}
	return OK;
}

_visit_files :: fn (dirpath: string_view, is_recursive: bool, leaf_first: bool, visitor: *fn(info: *FileVisitInfo, ctx: *u8) Error, ctx: *u8 = null) Error #inline {
	directory := str_make(dirpath);
	defer str_terminate(&directory);
	err :: _normalize(&directory);
	if err { return err; }

	dir := C.opendir(strtoc(directory));
	if !dir {
		ec, estr :: os_get_last_error();
		return error(ec, "Cannot list directory '%': %.", dirpath, estr);
	}
	defer C.closedir(dir);

	filepath: string;
	defer str_terminate(&filepath);

	loop {
		stat :: C.readdir(dir);
		if stat == null { break; }
		info: FileVisitInfo;
		info.is_directory = stat.d_type == auto C.DT_DIR;
		info.filename = ctostr(stat.d_name.ptr);
		info.step_into_directory = is_recursive && info.is_directory;

		if (!str_match(info.filename, ".")) && (!str_match(info.filename, "..")) {
			str_clear_concat(&filepath, directory, "/", info.filename);
			info.filepath = filepath;
			if !leaf_first {
				visit_err :: visitor(&info, ctx);
				if visit_err { return visit_err; }
			}
			may_step_into :: info.step_into_directory || leaf_first;
			if is_recursive && info.is_directory && may_step_into {
				err :: _visit_files(filepath, is_recursive, leaf_first, visitor, ctx);
				if err { return err; }
			}
			if leaf_first {
				visit_err :: visitor(&info, ctx);
				if visit_err { return visit_err; }
			}
		}
	}
	return OK;
}

_is_directory :: fn (path: string_view) (bool, Error) #inline {
	if path.len < 1 { return false, error(ERR_INVALID_HANDLE, "Path is empty."); }
	stat: C.stat_t #noinit;
	if C.stat(strtoc(path), &stat) != 0 {
		ec, estr :: os_get_last_error();
		return false, error(ec, "Cannot check directory '%': %.", path, estr);
	}
	return C.S_ISDIR(stat.st_mode), OK;
}

_validate_filename :: fn (name: string_view) bool {
	if name.len == 0 { return false; }
	invalid :: "/";
	loop i := 0; i < invalid.len; i += 1 {
		if str_count_of(name, invalid[i]) > 0 { return false; }
	}
	return true;
}

_get_cwd :: fn () string #inline {
	result: string;
	buf: [OS_PATH_MAX]u8;
	if !C.getcwd(auto buf.ptr, auto buf.len) { return result; }
	str_init(&result, cast(*C.char) buf.ptr);
	remove_last_separator(&result);
	return result;
}

_set_cwd :: fn (path: string_view) Error #inline {
	if path.len < 1 then return error(ERR_INVALID_HANDLE, "Path is empty!");
	if C.chdir(strtoc(path)) != 0 {
		ec, estr :: os_get_last_error();
		return error(ec, "Cannot set current directory to '%': %.", path, estr);
	}
	return OK;
}

_get_home :: fn () string #inline {
	result: string;
	tmp :: "HOME";
	cdir :: cast(*u8) C.getenv(auto tmp.ptr);
	if !cdir then return result;
	str_init(&result, cast(*C.char) cdir);
	remove_last_separator(&result);
	return result;
}

// @Incomplete 2025-02-14: Defaults to '/tmp', I'm not sure if this is correct on macos.
_get_tmp :: fn () string #inline {
	tmp :: "TMPDIR";
	cdir :: cast(*u8) C.getenv(auto tmp.ptr);
	if !cdir { return str_make("/tmp"); }
	result: string;
	str_init(&result, cast(*C.char) cdir);
	remove_last_separator(&result);
	return result;
}

_normalize :: fn (filepath: *string) Error {
	if !filepath { return error(ERR_INVALID_HANDLE, "File path is null!"); }
	if filepath.len < 0 { return error(ERR_INVALID_HANDLE, "File path is empty!"); }
	buf : [OS_PATH_MAX]u8;
	in_buf : [OS_PATH_MAX]u8;

	if !is_path_absolute(@filepath) {
		cwd :: get_cwd();
		defer str_terminate(&cwd);
		bprint(in_buf, "%/%", cwd, @filepath);
	} else {
		bprint(in_buf, "%", @filepath);
	}
	if !C.realpath(auto in_buf.ptr, auto buf.ptr) {
		ec, estr :: os_get_last_error();
		return error(ec, "Cannot resolve '%': %.", @filepath, estr);
	}
	filepath.len = 0;
	str_append(filepath, ctostr(auto buf.ptr));
	return OK;
}

_read :: fn (stream: *FileStream, dest: *u8, bytes_to_read: s64) (s64, Error) {
	if !dest { return 0, error(ERR_INVALID_HANDLE, "Cannot read, destination is invalid."); }
	read :: C.read(auto stream.handle, auto dest, auto bytes_to_read);
	if read < 0 {
		ec, estr :: os_get_last_error();
		return 0, error(ec, "Cannot read file: %", estr);
	}
	return auto read, OK;
}

_write :: fn (stream: *FileStream, src: *u8, bytes_to_write: s64) (s64, Error) {
	if !src { return 0, error(ERR_INVALID_HANDLE, "Cannot write, source is invalid."); }
	written :: C.write(auto stream.handle, auto src, auto bytes_to_write);
	if written < 0 {
		ec, estr :: os_get_last_error();
		return 0, error(ec, "Cannot write to file: %.", estr);
	}
	return auto written, OK;
}

_seek :: fn (stream: *FileStream, locator: io.StreamLocator, offset: s64) (s64, Error) {
	move_method := C.SEEK_CUR;
	using io.StreamLocator;
	switch locator {
		CURRENT;
		BEGIN { move_method = C.SEEK_SET; }
		END { move_method = C.SEEK_END; }
	}
	position :: C.lseek(auto stream.handle, offset, move_method);
	if position < 0 {
		ec, estr :: os_get_last_error();
		return 0, error(ec, "Cannot get file pointer: %", estr);
	}
	return position, OK;
}

#scope_private
#import "std/print"

C :: #import "libc";

modes_to_flags :: fn (modes: OpenFileMode) s32 #inline {
	r, w, create, append := false;
	if is_flag(modes, OpenFileMode.READ) { r = true; }
	if is_flag(modes, OpenFileMode.WRITE) { w = true; }
	if is_flag(modes, OpenFileMode.APPEND) { w = true; append = true; }
	if is_flag(modes, OpenFileMode.CREATE) { create = true; }
	flags: s32;
	if ((!w) && (!r)) { flags = C.O_RDONLY; }
	else if (w && r) { flags = C.O_RDWR; }
	else if w { flags = C.O_WRONLY; }
	else if r { flags = C.O_RDONLY; }
	if create { flags = flags | C.O_CREAT; }
	if append { flags = flags | C.O_APPEND; }
	if w && !append { flags = flags | C.O_TRUNC; }
	return flags;
}

remove_last_separator :: fn (path: *string) {
	if path.len < 1 { return; }
	if (@path)[path.len-1] == '/' {
		path.len -= 1;
	}
}

is_path_absolute :: fn (path: string) bool #inline {
	return path.len > 0 && path[0] == '/';
}
