#scope_private
#import "std/fs"
#import "std/io"
#import "std/string"
#import "std/array"
#import "std/math"

make_test_files :: fn (root_name: string_view) string {
	root :: get_cwd();
	str_concat(&root, "/", root_name);

	tmp: string;
	defer str_terminate(&tmp);

	remove_all_dir(root);
	create_all_dir(root);

	create_all_dir(str_clear_concat(&tmp, root, "/A"));
	create_all_dir(str_clear_concat(&tmp, root, "/B"));
	create_all_dir(str_clear_concat(&tmp, root, "/C"));
	create_all_dir(str_clear_concat(&tmp, root, "/A/A"));
	create_all_dir(str_clear_concat(&tmp, root, "/A/B"));

	create_file(str_clear_concat(&tmp, root, "/a.txt"));
	create_file(str_clear_concat(&tmp, root, "/b.jpg"));
	create_file(str_clear_concat(&tmp, root, "/c.txt"));
	create_file(str_clear_concat(&tmp, root, "/A/a.txt"));
	create_file(str_clear_concat(&tmp, root, "/A/b.jpg"));
	create_file(str_clear_concat(&tmp, root, "/A/c.txt"));
	create_file(str_clear_concat(&tmp, root, "/B/a.txt"));
	create_file(str_clear_concat(&tmp, root, "/B/b.jpg"));
	create_file(str_clear_concat(&tmp, root, "/B/c.txt"));
	create_file(str_clear_concat(&tmp, root, "/C/a.txt"));
	create_file(str_clear_concat(&tmp, root, "/C/b.jpg"));
	create_file(str_clear_concat(&tmp, root, "/C/c.txt"));
	create_file(str_clear_concat(&tmp, root, "/A/A/a.txt"));
	create_file(str_clear_concat(&tmp, root, "/A/B/b.jpg"));
	create_file(str_clear_concat(&tmp, root, "/A/B/c.txt"));
	return root;
}

get_dummy_filepath :: fn (i := 0) string {
	tmp :: get_cwd();
	str_concat(&tmp, "/deleteme_", i);
	return tmp;
}

fs_exist_test :: fn () #test {
	test_true(file_exist(#file));
	test_false(file_exist("foobar"));
}

fs_get_home_test :: fn () #test {
	tmp :: get_home();
	defer str_terminate(&tmp);
	test_neq(tmp, str_empty);
	test_true(file_exist(tmp));
	test_true(tmp[tmp.len-1] != '/');

	state, err :: is_directory(tmp);
	test_ok(err);
	test_true(state);
}

fs_get_tmp_test :: fn () #test {
	tmp :: get_tmp();
	defer str_terminate(&tmp);
	test_neq(tmp, str_empty);
	test_true(file_exist(tmp));
	test_true(tmp[tmp.len-1] != '/');

	state, err :: is_directory(tmp);
	test_ok(err);
	test_true(state);
}

fs_get_cwd_test :: fn () #test {
	tmp :: get_cwd();
	defer str_terminate(&tmp);
	test_neq(tmp, str_empty);
	test_true(file_exist(tmp));
	test_true(tmp[tmp.len-1] != '/');

	state, err :: is_directory(tmp);
	test_ok(err);
	test_true(state);
}

fs_file_create_test1 :: fn () #test {
	err :: create_file("");
	test_is_error(err, ERR_INVALID_HANDLE);
}

fs_open_stream_test1 :: fn () #test {
	stream, err :: open_file("");
	defer close_file(&stream);
	test_is_error(err, ERR_INVALID_HANDLE);
}

fs_open_stream_test2 :: fn () #test {
	stream, err :: open_file("foobar");
	defer close_file(&stream);
	test_is_error(err, ERR_NOT_FOUND);
}

fs_open_stream_test3 :: fn () #test {
	stream, err :: open_file(#file);
	defer close_file(&stream);
	test_ok(err);

	// Cannot write to file when Write or Append is not specified.
	written, err2 :: write_string(&stream, "Hello!");
	test_not_ok(err2);
	test_eq(written, 0);
}

fs_read_string_test :: fn () #test {
	stream, err1 :: open_file(#file, OpenFileMode.READ);
	defer close_file(&stream);
	test_ok(err1);
	tmp: string;
	defer str_terminate(&tmp);
	err2 := read_string(&stream, &tmp);
	test_ok(err2);
	test_true(tmp.len > 0);
}

fs_read_bytes_test :: fn () #test {
	stream, err1 :: open_file(#file, OpenFileMode.READ);
	defer close_file(&stream);
	test_ok(err1);
	data: [..]u8;
	defer array_terminate(&data);
	err2 :: read_data(&stream, &data);
	test_ok(err2);
	test_not_null(data.ptr);
}

fs_read_bytes_test_custom_buffer_size :: fn () #test {
	stream, err1 :: open_file(#file, OpenFileMode.READ);
	defer close_file(&stream);
	test_ok(err1);
	data: [..]u8;
	defer array_terminate(&data);
	err2 :: read_data(&stream, &data, S64_MAX, 32);
	test_ok(err2);
	test_not_null(data.ptr);
}

fs_file_stream_create_invalid :: fn () #test {
	stream, err :: open_file("", OpenFileMode.CREATE);
	defer close_file(&stream);
	test_is_error(err, ERR_INVALID_HANDLE);
}

fs_file_stream_create_invalid_write :: fn () #test {
	filepath :: get_dummy_filepath();
	defer str_terminate(&filepath);
	remove_file(filepath);
	stream, err :: open_file(filepath, OpenFileMode.CREATE);
	defer close_file(&stream);
	test_ok(err);
	// Cannot write to file when Write or Append is not specified.
	written, err2 :: write_string(&stream, "Hello!");
	test_not_ok(err2);
	test_eq(written, 0);
}

fs_file_stream_create_and_write :: fn () #test {
	filepath :: get_dummy_filepath();
	defer str_terminate(&filepath);
	remove_file(filepath);
	stream, err :: open_file(filepath, OpenFileMode.CREATE | OpenFileMode.WRITE);
	defer close_file(&stream);
	test_ok(err);
	written, err2 :: write_string(&stream, "Hello!");
	test_ok(err2);
	test_eq(written, 6);
}

fs_file_stream_create_and_reuse :: fn () #test {
	filepath :: get_dummy_filepath();
	defer str_terminate(&filepath);
	remove_file(filepath);

	{
		stream, err :: open_file(filepath, OpenFileMode.CREATE | OpenFileMode.WRITE);
		defer close_file(&stream);
		test_ok(err);
		written, err2 :: write_string(&stream, "Hello!");
		test_ok(err2);
		test_eq(written, 6);
	}
	{
		stream, err :: open_file(filepath, OpenFileMode.CREATE | OpenFileMode.APPEND);
		defer close_file(&stream);
		test_ok(err);
		written, err2 :: write_string(&stream, "Hello!");
		test_ok(err2);
		test_eq(written, 6);
	}
	{
		stream, err :: open_file(filepath);
		defer close_file(&stream);
		test_ok(err);
		tmp: string;
		defer str_terminate(&tmp);
		err2 :: read_string(&stream, &tmp);
		test_ok(err2);
		test_eq(tmp, "Hello!Hello!");
	}
}

fs_file_read_empty :: fn () #test {
	filepath :: get_dummy_filepath();
	defer str_terminate(&filepath);
	remove_file(filepath);
	err_create :: create_file(filepath);
	test_ok(err_create);
	stream, err :: open_file(filepath);
	defer close_file(&stream);
	test_ok(err);
	tmp: string;
	defer str_terminate(&tmp);
	err2 :: read_string(&stream, &tmp);
	test_ok(err2);
	test_eq(tmp, "");
}

fs_file_stream_create_twice_and_override :: fn () #test {
	filepath :: get_dummy_filepath();
	defer str_terminate(&filepath);
	remove_file(filepath);

	{
		stream, err :: open_file(filepath, OpenFileMode.CREATE | OpenFileMode.WRITE);
		defer close_file(&stream);
		test_ok(err);
		written, err2 :: write_string(&stream, "Hello!");
		test_ok(err2);
		test_eq(written, 6);
	}
	{
		stream, err :: open_file(filepath, OpenFileMode.CREATE | OpenFileMode.WRITE);
		defer close_file(&stream);
		test_ok(err);
		written, err2 :: write_string(&stream, "Hello!");
		test_ok(err2);
		test_eq(written, 6);
	}
	{
		stream, err :: open_file(filepath);
		defer close_file(&stream);
		test_ok(err);
		tmp: string;
		defer str_terminate(&tmp);
		err2 :: read_string(&stream, &tmp);
		test_ok(err2);
		test_eq(tmp, "Hello!");
	}
}

fs_read_exact_size :: fn () #test {
	stream, err_open :: open_file(#file);
	defer close_file(&stream);
	test_ok(err_open);
	buf: [1024]u8 #noinit;
	bytes, err_read :: read(&stream, buf.ptr, 100);
	test_ok(err_read);
	test_eq(bytes, 100);
}

fs_write_raw :: fn () #test {
	filepath :: get_dummy_filepath();
	defer str_terminate(&filepath);
	remove_file(filepath);
	content :: "Hello I'm cool file content!";

	{ // write
		stream :: open_file(filepath, OpenFileMode.CREATE | OpenFileMode.WRITE);
		defer close_file(&stream);
		written, err :: write(&stream, content.ptr, content.len);
		test_ok(err);
		test_eq(written, content.len);
	}
	{ // read
		stream :: open_file(filepath);
		defer close_file(&stream);
		tmp: string;
		defer str_terminate(&tmp);
		err :: read_string(&stream, &tmp);
		test_ok(err);
		test_eq(tmp, content);
	}
}

fs_write_string :: fn () #test {
	filepath :: get_dummy_filepath();
	defer str_terminate(&filepath);
	remove_file(filepath);
	content :: "Hello I'm cool file content!";

	{ // write
		stream :: open_file(filepath, OpenFileMode.CREATE | OpenFileMode.WRITE);
		defer close_file(&stream);
		written, err :: write_string(&stream, content);
		test_ok(err);
		test_eq(written, content.len);
	}
	{ // read
		stream :: open_file(filepath);
		defer close_file(&stream);
		tmp: string;
		defer str_terminate(&tmp);
		err :: read_string(&stream, &tmp);
		test_ok(err);
		test_eq(tmp, content);
	}
}

fs_seek_begin_end :: fn () #test {
	stream :: open_file(#file);
	defer close_file(&stream);

	{
		p, e :: seek(&stream);
		test_ok(e);
		test_eq(p, 0);
	}
	{
		p, e1 :: seek(&stream, StreamLocator.BEGIN);
		test_ok(e1);
		test_eq(p, 0);
	}
	{
		p, e1 :: seek(&stream, StreamLocator.CURRENT);
		test_ok(e1);
		test_eq(p, 0);
	}
	{
		p, e1 :: seek(&stream, StreamLocator.END);
		test_ok(e1);
		test_true(p > 0);
		size, e2 :: file_size(&stream);
		test_ok(e2);
		test_eq(p, size);
	}
	{
		size1, e1 :: seek(&stream, StreamLocator.END);
		test_ok(e1);
		seek(&stream, StreamLocator.BEGIN);

		tmp: [..]u8;
		defer array_terminate(&tmp);
		read_data(&stream, &tmp);
		test_eq(size1, tmp.len);
	}
}

fs_get_uid_test_from_filename :: fn () #test {
	filepath :: get_dummy_filepath();
	defer str_terminate(&filepath);
	remove_file(filepath);
	create_file(filepath);
	uid, err2 :: file_uid(filepath);
	test_ok(err2);
	test_true(uid > 0);
}

fs_get_uid_test_from_file :: fn () #test {
	filepath :: get_dummy_filepath();
	defer str_terminate(&filepath);
	remove_file(filepath);
	stream, err :: open_file(filepath, OpenFileMode.CREATE);
	defer close_file(&stream);
	test_ok(err);
	uid, err2 :: file_uid(&stream);
	test_ok(err2);
	test_true(uid > 0);
}

fs_validate_filename_test :: fn () #test {
	if PLATFORM == Platform.WINDOWS {
		test_false(validate_filename("<"));
		test_false(validate_filename(">"));
		test_false(validate_filename(":"));
		test_false(validate_filename("\""));
		test_false(validate_filename("/"));
		test_false(validate_filename("\\"));
		test_false(validate_filename("|"));
		test_false(validate_filename("?"));
		test_false(validate_filename("*"));
		test_false(validate_filename("\t"));
		test_false(validate_filename("foo<"));
		test_true(validate_filename("foo_bar-File.txt"));
	} else {
		test_false(validate_filename("foo/"));
		test_true(validate_filename("foo_bar-File.txt"));
	}
}

fs_normalize_1 :: fn () #test {
	cwd :: get_cwd();
	defer str_terminate(&cwd);
	parent: string_view;
	test_true(str_split_by_last(cwd, '/', &parent, null));
	filepath :: str_make("..");
	defer str_terminate(&filepath);
	status :: path_normalize(&filepath);
	test_ok(status);
	test_eq(filepath, parent);
}

fs_normalize_2 :: fn () #test {
	cwd :: get_cwd();
	defer str_terminate(&cwd);
	filepath :: str_make(".");
	defer str_terminate(&filepath);
	status :: path_normalize(&filepath);
	test_ok(status);
	test_eq(filepath, cwd);
}

fs_normalize_3 :: fn () #test {
	create_file("foo");
	defer remove_file("foo");
	cwd :: get_cwd();
	defer str_terminate(&cwd);
	filepath :: str_make("foo");
	str_concat(&cwd, "/", filepath);
	defer str_terminate(&filepath);
	status :: path_normalize(&filepath);
	test_ok(status);
	test_eq(filepath, cwd);
}

fs_remove_test :: fn () #test {
	filepath :: get_dummy_filepath();
	defer str_terminate(&filepath);
	remove_file(filepath);
	test_false(file_exist(filepath));
	err :: create_file(filepath);
	test_ok(err);
	test_true(file_exist(filepath));
	err2 :: remove_file(filepath);
	test_ok(err2);
	test_false(file_exist(filepath));
}

fs_copy_test :: fn () #test {
	filepath1 :: get_dummy_filepath(1);
	filepath2 :: get_dummy_filepath(2);
	defer str_terminate(&filepath1);
	defer str_terminate(&filepath2);
	remove_file(filepath1);
	remove_file(filepath2);

	create_file(filepath1);
	{ // copy
		err :: copy_file(filepath1, filepath2);
		test_ok(err);
		test_true(file_exist(filepath1));
		test_true(file_exist(filepath2));
	}
	{ // copy 2
		err :: copy_file(filepath1, filepath2, false);
		test_not_ok(err);
		test_true(file_exist(filepath1));
		test_true(file_exist(filepath2));
	}
	remove_file(filepath1);
	remove_file(filepath2);
}

VisitData :: struct {
	directory_count: s32;
	file_count: s32;
	include_ext: string_view;
}

visitor :: fn (info: *FileVisitInfo, data: *VisitData) Error {
	test_neq(info.filename, ".");
	test_neq(info.filename, "..");
	if info.is_directory {
		data.directory_count += 1;
	} else if data.include_ext.len == 0 {
		data.file_count += 1;
	} else {
		_, ext :: path_splitext(info.filename);
		if str_match(ext, data.include_ext) {
			data.file_count += 1;
		}
	}
	test_true(file_exist(info.filepath));
	return OK;
}

fs_dir_visit1 :: fn () #test {
	root :: make_test_files("root");
	defer str_terminate(&root);

	data: VisitData;
	err :: visit_files(root, VisitOpt.{}, &data, &visitor);
	test_ok(err);
	test_eq(data.file_count, 3);
	test_eq(data.directory_count, 3);
	remove_all_dir(root);
}

fs_dir_visit2 :: fn () #test {
	root :: make_test_files("root");
	defer str_terminate(&root);

	data: VisitData;
	err :: visit_files(root, VisitOpt.{ recursive = true }, &data, &visitor);
	test_ok(err);
	test_eq(data.file_count, 15);
	test_eq(data.directory_count, 5);
	remove_all_dir(root);
}

fs_dir_visit_only_txt :: fn () #test {
	root :: make_test_files("root");
	defer str_terminate(&root);

	data := VisitData.{ include_ext = ".txt" };
	err :: visit_files(root, VisitOpt.{ recursive = true }, &data, &visitor);
	test_ok(err);
	test_eq(data.file_count, 10);
	test_eq(data.directory_count, 5);
	remove_all_dir(root);
}

fs_is_directory_test1 :: fn () #test {
	tmp :: get_tmp();
	defer str_terminate(&tmp);
	state, err :: is_directory(tmp);
	test_ok(err);
	test_true(state);
}

fs_is_directory_test2 :: fn () #test {
	state, err :: is_directory(#file);
	test_ok(err);
	test_false(state);
}

fs_create_remove_dir_test1 :: fn () #test {
	dir :: get_tmp();
	defer str_terminate(&dir);
	str_append(&dir, "/__DELETE_ME__");

	remove_all_dir(dir);
	state1 :: create_dir(dir);
	test_ok(state1);

	state2 :: create_dir(dir);
	test_not_ok(state2);

	state3 :: remove_dir(dir);
	test_ok(state3);
}

fs_remove_all_dir_test1 :: fn () #test {
	dir :: get_tmp();
	defer str_terminate(&dir);
	str_append(&dir, "/__DELETE_ME__");

	print_log("PATH = %", dir);
	remove_all_dir(dir);
	{
		s :: create_dir(dir);
		test_ok(s);
	}

	{
		file :: str_make(dir);
		defer str_terminate(&file);
		str_append(&file, "/file.txt");
		err :: create_file(file);
		test_ok(err);
	}

	state :: remove_all_dir(dir);
	test_ok(state);
	test_false(file_exist(dir));
}

fs_create_all_dir_test1 :: fn () #test {
	dir :: get_tmp();
	defer str_terminate(&dir);
	str_append(&dir, "/foo");
	remove_all_dir(dir);
	str_append(&dir, "/bar/bazz");
	err :: create_all_dir(dir);
	test_ok(err);
}

fs_remove_all_dir :: fn () #test {
	root :: make_test_files("root");
	defer str_terminate(&root);
}

fs_path_split :: fn () #test {
	{
		d, f :: path_split("C:/Ahoj/Jak/Se/Vede/foo.txt.bak");
		test_eq(d, "C:/Ahoj/Jak/Se/Vede/");
		test_eq(f, "foo.txt.bak");
	}
	{
		d, f :: path_split("foo.txt.bak");
		test_eq(d, "");
		test_eq(f, "foo.txt.bak");
	}
	{
		d, f :: path_split(".txt.bak");
		test_eq(d, "");
		test_eq(f, ".txt.bak");
	}
	{
		d, f :: path_split("");
		test_eq(d, "");
		test_eq(f, "");
	}
	{
		d, f :: path_split(".");
		test_eq(d, "");
		test_eq(f, ".");
	}
	{
		d, f :: path_split(".txt");
		test_eq(d, "");
		test_eq(f, ".txt");
	}
	{
		d, f :: path_split("..txt");
		test_eq(d, "");
		test_eq(f, "..txt");
	}
	{
		d, f :: path_split("/home/usr/.hidden.file");
		test_eq(d, "/home/usr/");
		test_eq(f, ".hidden.file");
	}
	{
		d, f :: path_split("/");
		test_eq(d, "/");
		test_eq(f, "");
	}
	{
		d, f :: path_split("D:/");
		test_eq(d, "D:/");
		test_eq(f, "");
	}
	{
		d, f :: path_split("C:/foo/bar");
		test_eq(d, "C:/foo/");
		test_eq(f, "bar");
	}
	{
		d, f :: path_split("C:/foo/bar/");
		test_eq(d, "C:/foo/bar/");
		test_eq(f, "");
	}
}

fs_path_splitext :: fn () #test {
	{
		d, f :: path_splitext("C:/Ahoj/Jak/Se/Vede/foo.txt.bak");
		test_eq(d, "C:/Ahoj/Jak/Se/Vede/foo.txt");
		test_eq(f, ".bak");
	}
	{
		d, f :: path_splitext("");
		test_eq(d, "");
		test_eq(f, "");
	}
	{
		d, f :: path_splitext("foo.txt");
		test_eq(d, "foo");
		test_eq(f, ".txt");
	}
	{
		d, f :: path_splitext("foo");
		test_eq(d, "foo");
		test_eq(f, "");
	}
	{
		d, f :: path_splitext(".");
		test_eq(d, "");
		test_eq(f, ".");
	}
}

fs_read_write_entire_file :: fn () #test {
	filepath :: get_dummy_filepath();
	defer str_terminate(&filepath);
	remove_file(filepath);

	CONTENT :: "This is content of my file!";

	write_err :: write_entire_file(filepath, CONTENT);
	test_ok(write_err);

	content, read_err :: read_entire_file(filepath);
	test_ok(read_err);
	defer array_terminate(&content);

	test_eq(CONTENT, content);
}