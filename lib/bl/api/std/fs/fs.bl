//! # File System
//!
//! `#import "std/fs"`
//!
//! File system module for manipulation with files and directories. This module provides an
//! abstraction over operating system APIs such as creating files and directories, reading and
//! writing, and scanning the filesystem.

// =================================================================================================
// File utils
// =================================================================================================

FileStream :: struct #base io.Stream {
	handle: _File;
}

/// Invalid file handle. This can be used for file handle validation.
FILE_INVALID :: _FILE_INVALID;

/// Specify operation with opened file.
OpenFileMode :: enum #flags {
	/// Open file for reading.
	READ;
	/// Open file for writing and truncate its content.
	WRITE;
	/// Open file for appending (keeps current content).
	APPEND;
	/// Create file if it does not exist.
	CREATE;
}

/// Open an file specified by `filepath`. Function return file stream and `OK` status when file was
/// opened, otherwise return invalid stream and proper error. Stream must be closed by [close_file](#stdclose_file)
/// call.
///
/// File open `mode` is optional, any combination of `OpenFileMode` can be used. When `Create`
/// `mode` is specified, new file is created on `filepath` only if it does not exist, otherwise
/// already existing file is used. `Read` `mode` is used as default when neither `Read`, `Write` or
/// `Append` is specified.
///
/// ### Example
///
/// ```bl
/// @@@examples/open_file.bl
/// ```
///
open_file :: fn (filepath: string_view, mode: OpenFileMode = OpenFileMode.READ) (FileStream, Error) #inline {
	stream: FileStream #noinit;
	stream.vtable = &FILE_STREAM_VTABLE;
	stream.handle = FILE_INVALID;
	file, open_err :: _open(filepath, mode);
	if open_err { return stream, open_err; }
	stream.handle = file;
	return stream, OK;
}

/// Close previously openned file stream.
close_file :: fn (stream: *FileStream) #inline {
	_close(stream.handle);
	stream.handle = FILE_INVALID;
}

/// Create new file if it does not exists. Otherwise does nothing.
create_file :: fn (filepath: string_view) Error {
	stream, create_err :: open_file(filepath, OpenFileMode.CREATE);
	close_file(&stream);
	return create_err;
}

/// Try to remove file specified by `filepath` and return `OK` on success, otherwise return error.
remove_file :: fn (filepath: string_view) Error #inline {
	return _remove(filepath);
}

/// Reads content of entire file on `filepath` into array of bytes. Allocator can be specified optionally, in case it's null
/// default application context allocator will be used.
/// Returned array might require explicit destruction by calling `array_terminate` depenting on allocator being used.
/// Use `application_context.temporary_allocator` in case the resulting content is not supposed to be persistent.
read_entire_file :: fn (filepath: string_view, allocator : *Allocator = null) ([..]u8, Error) {
	content: [..]u8;
	array_init(&content, 0, allocator);
	stream, open_err :: open_file(filepath, OpenFileMode.READ);
	defer close_file(&stream);
	if open_err then return content, open_err;
	read_err :: io.read_whole(&stream, &content);
	if read_err {
		array_terminate(&content);
		return content, read_err;
	}
	return content, OK;
}

/// Write entire `content` into the file on `filepath`.
write_entire_file :: fn (filepath: string_view, content: []u8, mode := OpenFileMode.CREATE | OpenFileMode.WRITE) Error {
	if content.len == 0 then return OK;
	assert(content.ptr);
	stream, open_err :: open_file(filepath, mode);
	defer close_file(&stream);
	if open_err then return open_err;
	write_err :: io.write_all(&stream, content.ptr, content.len);
	if write_err then return write_err;
	return OK;
}

/// Copy existing file from `src` to `dest` and override existing file in destination if `override`
/// is true. Return `ok` or `error`.
///
/// The destination file is created if it does not exist.
///
/// !!! note
///     The `src` and `dest` path can be relative path to current working path set by
///     [set_cwd](#stdset_cwd).
copy_file :: fn (src: string_view, dest: string_view, override := false) Error #inline {
	return _copy(src, dest, override);
}

/// Returns file id.
file_uid :: fn {
	fn (stream: *FileStream) (u64, Error) {
		assert(stream);
		return _get_uid(stream.handle);
	};
	_get_uid_by_name;
}

/// Returns size in bytes of `stream` file or an error.
file_size :: fn (stream: *FileStream) (s64, Error) {
	original_position, e1 :: io.seek(stream);
	if e1 { return 0, e1; }
	size, e2 :: io.seek(stream, io.StreamLocator.END);
	if e2 { return 0, e2; }
	_, e3 :: io.seek(stream, io.StreamLocator.BEGIN, original_position);
	if e3 { return 0, e3; }
	return size, OK;
}

// =================================================================================================
// Directory utils
// =================================================================================================

/// Create new directory and return `OK` on success. This function does not create directories
/// recursively.
create_dir :: fn (dirpath: string_view) Error #inline {
	return _create_dir(dirpath);
}

create_all_dir :: fn (dirpath: string_view) Error {
	if str_is_empty(dirpath) { return error(ERR_INVALID_HANDLE, "Directory path is empty!"); }
	is_valid, err :: is_existing_directory(dirpath);
	if err      { return err; }
	if is_valid { return OK;  }

	Data :: struct {
		path: string;
		last_error: Error;
	};

	data: Data;
	data.path = str_new();
	defer str_delete(&data.path);
	// Handle unix root.
	assert(dirpath.len > 0);
	if dirpath[0] == '/' { str_append(&data.path, "/"); }

	str_tokenize(dirpath, '/', &data, &fn (sub_path: string_view, data: *Data) bool {
		if data.path.len > 0 && data.path[data.path.len] != '/' { str_append(&data.path, "/"); }
		str_append(&data.path, sub_path);
		existing, err :: is_existing_directory(data.path);
		if err {
			data.last_error = err;
			return false;
		}
		if !existing {
			create_err :: _create_dir(data.path);
			if create_err {
				data.last_error = create_err;
				return false;
			}
		}
		return true;
	});
	return data.last_error;
}

/// Remove directory specified by `dirpath` and return `OK` on success, otherwise return an error.
remove_dir :: fn (dirpath: string_view) Error #inline {
	return _remove_dir(dirpath);
}

/// Remove (even non-empty) directory specified by `dirpath` and return `OK` on success, otherwise return
/// an error. Root directory is removed if `remove_root` is `true`. Custom file `filter` function
/// can be specified as needed.
///
/// **Overloads:**
///
/// ```bl
/// fn (dirpath: string_view, remove_root := true) Error #inline
/// fn (dirpath: string_view, remove_root: bool, filter: *fn(info: *FileVisitInfo, ctx: *?T) bool, ctx: *T = null) Error
/// ```
///
/// When the `filter` callback is specified, it's called for each visited file or directory. Returning `true`
/// means the entry should be deleted.
///
/// !!! warning
///     When some files are excluded by the `filter` function the parent directory cannot be removed (it's not empty).
///     Be careful excluding directories.
///
/// !!! note
///     This function recursively remove all nested folders and files in specified sub tree
///     so it can be expensive.
///
remove_all_dir :: fn {
	impl_remove_all_dir;
	impl_remove_all_dir_with_filter;
	impl_remove_all_dir_with_filter_and_context;
}


/// Information about file entry.
FileVisitInfo :: struct {
	/// `True` in case the entry is a directory.
	is_directory: bool;
	/// File or directory name.
	filename: string_view;
	/// File or directory full path.
	filepath: string_view;
	/// In case the file visitor is in recursive mode the visitor callback might change this
	/// value to `false` in case the current directory should be ignored.
	///
	/// !!! note
	///     Does not take any effect in case the `leaf_first` is set in visit options.
	step_into_directory: bool;
}

/// Visit file options used in [visit_files](visit_files).
VisitOpt :: struct {
	/// Visit all subfolders when `true`.
	recursive: bool;
	/// Visit the most nested files first.
	leaf_first: bool;
}

/// Visit all files and directories in `dirpath` with specified `visitor` callback called for each found
/// file entry. Optional context `ctx` pointer can be passed into the function.
///
/// **Overloads:**
///
/// ```bl
/// fn (dirpath: string_view, opt: VisitOpt, ctx: *?T, visitor: *fn(info: *FileVisitInfo, ctx: *T) Error) Error #inline
/// fn (dirpath: string_view, opt: VisitOpt, visitor: *fn(info: *FileVisitInfo) Error) Error #inline
/// ```
///
/// ### Example
///
/// ```bl
/// @@@examples/visit_files.bl
/// ```
visit_files :: fn {
	fn (dirpath: string_view, opt: VisitOpt, ctx: *?T, visitor: *fn(info: *FileVisitInfo, ctx: *T) Error) Error #inline {
		assert(visitor);
		return _visit_files(dirpath, opt.recursive, opt.leaf_first, auto visitor, auto ctx);
	};

	fn (dirpath: string_view, opt: VisitOpt, visitor: *fn(info: *FileVisitInfo) Error) Error #inline {
		assert(visitor);
		// @Note: We use wrapper function instead of making the '_visit_files' generic.
		visitor_wrapper :: fn (info: *FileVisitInfo, ctx: *u8) Error {
			assert(ctx);
			orig_visitor :: cast(*fn(info: *FileVisitInfo) Error) ctx;
			return orig_visitor(info);
		};

		return _visit_files(dirpath, opt.recursive, opt.leaf_first, &visitor_wrapper, auto visitor);
	};
}

/// Check whether `path` points to valid directory. Returns error in case the check failed.
is_directory :: fn (path: string_view) (bool, Error) #inline {
	return _is_directory(path);
}

// =================================================================================================
// Other
// =================================================================================================

/// Checks whether `name` is valid file name on current platform.
validate_filename :: fn (name: string_view) bool #inline {
	return _validate_filename(name);
}

/// Check whether file or directory exists.
file_exist :: fn (filepath: string_view) bool #inline {
	return _exist(filepath);
}

/// Try to normalize `filepath`, basically try to remove all relative path nodes `..` and `.`. Path
/// must be valid path (existing) on system. Original `filepath` is extended with current working
/// directory. Function return `OK` on success or proper error on fail. Original string is not
/// modified when error occurs.
path_normalize :: fn (filepath: *string) Error #inline {
	return _normalize(filepath);
}

/// Split input `filepath` into head and tail components. The `tail` is the last `filepath` component
/// and the `head` is everything before. Only unix `/` path delimiters are supported. The `tail`
/// component never contains path separators.
///
/// ### Example
///
/// | filepath                | head        | tail         |
/// |-------------------------|-------------|--------------|
/// | C:/foo/bar/file.txt     | C:/foo/bar/ | file.txt     |
/// | file.txt                | -           | file.txt     |
/// | /usr/local/.hidden.file | /usr/local/ | .hidden.file |
/// | /                       | /           | -            |
/// | C:/                     | C:/         | -            |
///
/// !!! note
///     Returned components may not be zero terminated.
path_split :: fn (filepath: string_view) (head: string_view, tail: string_view) {
	if str_is_empty(filepath) { return str_empty, str_empty; }

	head, tail: string_view;
	if !str_split_by_last(filepath, '/', &head, &tail) {
		tail = head;
		head= str_empty;
	} else {
		head.len += 1;
	}
	return head, tail;
}

/// Split input `filepath` into `head` and `ext` components. The `ext` is the file extension  and the `head` is
/// everything before.
///
/// ### Example
///
/// | filepath                | head               | ext          |
/// |-------------------------|--------------------|--------------|
/// | C:/foo/bar/file.txt     | C:/foo/bar/file    | .txt         |
/// | file.txt                | file               | .txt         |
/// | /usr/local/.hidden.file | /usr/local/.hidden | .file        |
/// | /                       | /                  | -            |
/// | C:/                     | C:/                | -            |
///
/// !!! note
///     Returned components may not be zero terminated.
path_splitext :: fn (filepath: string_view) (head: string_view, ext: string_view) {
	if str_is_empty(filepath) { return str_empty, str_empty; }
	head, ext: string_view;
	index: s32;
	if str_split_by_last(filepath, '.', &head, &ext, &index) {
		ext.ptr = &filepath[index];
		ext.len += 1;
	}
	return head, ext;
}

// @Incomplete: use temporary allocator
/// Try to obtain current working directory, result must be released by `str_delete`. Path does
/// not contain last path separator.
get_cwd :: fn () string #inline {
	return _get_cwd();
}

/// Sets current working directory and return `OK` on success, otherwise return error.
set_cwd :: fn (path: string_view) Error #inline {
	return _set_cwd(path);
}

// @Incomplete: use temporary allocator
/// Try to obtain system home directory, result must be released by `str_delete`. Path does not
/// contain last path separator.
get_home :: fn () string #inline {
	return _get_home();
}

// @Incomplete: use temporary allocator
/// Try to obtain system temporary directory, result must be released by `str_delete`. Path does
/// not contain last path separator.
get_tmp :: fn () string #inline {
	return _get_tmp();
}

#scope_module
#import "std/string"
io :: #import "std/io";

#scope_private
#import "std/array"

FILE_STREAM_VTABLE :: io.StreamVTable.{
	read  = auto &_read,
	write = auto &_write,
	seek  = auto &_seek,
};

impl_remove_all_dir :: fn (dirpath: string_view, remove_root := true) Error #inline {
	dummy_ctx: *u8;
	return impl_remove_all_dir_with_filter_and_context(dirpath, remove_root, dummy_ctx, null);
}

impl_remove_all_dir_with_filter :: fn (dirpath: string_view, remove_root: bool, filter: *fn(info: *FileVisitInfo) bool) Error #inline {
	assert(filter);
	filter_wrapper :: fn (info: *FileVisitInfo, ctx: *fn(info: *FileVisitInfo) bool) bool {
		return ctx(info);
	};

	return impl_remove_all_dir_with_filter_and_context(dirpath, remove_root, filter, &filter_wrapper);
}

impl_remove_all_dir_with_filter_and_context :: fn (dirpath: string_view, remove_root: bool, ctx: *?T, filter: *fn(info: *FileVisitInfo, ctx: *T) bool) Error {
	if str_is_empty(dirpath) { return OK; }

	Data :: struct {
		filter: *fn(info: *FileVisitInfo, ctx: *T) bool;
		ctx: *T;
	};

	visitor :: fn (info: *FileVisitInfo, data: *Data) Error {
		if (!data.filter) || data.filter(info, data.ctx) {
			if (info.is_directory) {
				return _remove_dir(info.filepath);
			}
			return _remove(info.filepath);
		}
		return OK;
	};

	data :: Data.{ filter, ctx };
	err :: visit_files(dirpath, VisitOpt.{ recursive = true, leaf_first = true }, &data, &visitor);
	if err { return err; }
	if remove_root { return _remove_dir(dirpath); }
	return OK;
}

// Checks if the path points to an existing filesystem entry + checks if it's a directory.
is_existing_directory :: fn (path: string_view) (bool, Error) {
	if _exist(path) {
		is_valid, err :: _is_directory(path);
		if err { return false, err; }
		if !is_valid { return false, error("Not a directory '%'.", path); }
		return true, OK;
	}
	return false, OK;
}
