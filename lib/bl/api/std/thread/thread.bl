//! # Thread
//!
//! `#import "std/thread"`
//!
//! This module contains tools for managing multithreading. It's basically wrapper for Windows thread
//! system and pthread on posix systems.
//!
//! **warning**: This module is experimental and not fully supported across all platforms.

/// Thread entry function type.
ThreadEntryFn :: *fn (ctx: *u8) s32;

/// Thread handle.
Thread :: Handle;

/// Create and start new thread with specified `entry` function. Pointer to custom `ctx` can be
/// optionally passed to the entry function here.
thread_create :: fn (entry: ThreadEntryFn, ctx: *u8 = null) (Thread, Error) #inline {
	if IS_COMPTIME_RUN then panic("Multithreading is not supported in VM execution mode.");
	return create(entry, ctx);
}

/// Blocks until `thread` exits. Return value from worker function is returned as `exit_code`. When
/// execution is successful all thread resources are released.
thread_join :: fn (thread: Thread) (exit_code: s32, err: Error) #inline {
	return join(thread);
}

/// Blocks until all `threads` exits.
thread_join_all :: fn (threads: []Thread) Error #inline {
	loop i := 0; i < threads.len; i += 1 {
		_, err :: join(threads[i]);
		if err { return err; }
	}
	return OK;
}

/// Exit current thread with optional `exit_code` return value.
thread_exit :: fn (exit_code: s32 = 0) Error #inline {
	return exit(exit_code);
}

/// Gets current thread.
thread_current :: fn () Thread #inline {
	return current();
}

/// Gets current thread ID.
get_thread_id :: fn () u64 #inline {
	return current_id();
}
