//! # Array
//!
//! `#import "std/array"`
//!
//! Compiler builtin dynamic array is automatically growing memory storage allocated on heap. The
//! array allocated memory block groves over time when we push new values to the array. It's
//! guaranteed that all pushed elements are stored in single continuous block of memory. When there
//! is no space reminding in currently allocated block, new one is allocated and all already pushed
//! data are copied from old block to the new one.
//!
//! ### Example
//!
//! ```c
//! {% include "../examples/dynamic_arrays.bl" %}
//! ```

ARRAY_ALLOC_BLOCK_SIZE : usize = 32;
ARRAY_GROW_FACTOR      : f32   = 1.5f;

// Not direcly used internally, when layout of this structure is changed, internal compiler
// representation must be modified too.
_Array :: struct {
	len: s64;
	ptr: *u8;
	allocated_elems: usize;
	allocator: *Allocator;
}

/// Sets dynamic array to default state. If array contains already allocated memory `array_terminate`
/// must be called first.
///
/// Initial capacity can be specified by `n` (count of elements). If `n` is greater than 0, needed
/// memory is preallocated using specified `allocator`; otherwise no allocation is done.
///
/// It's usually enough to rely on default implicit initialization in case we don't need specify
/// custom allocator or preallocate storage to specified `n` of entries.
array_init :: fn (_arr: *[..]?T, n: s64 = 0, allocator: *Allocator = null) #inline {
	arr := cast(*_Array) _arr;
	arr.ptr = null;
	arr.len = 0;
	arr.allocated_elems = 0;
	arr.allocator = allocator;
	array_reserve(_arr, n);
}

/// Release memory allocated by dynamic array. This function is supposed to be called when dynamic
/// array is no longer needed. Passed dynamic array is set to default state also.
array_terminate :: fn (_arr: *[..]?T) #inline {
	arr := cast(*_Array) _arr;
	free(arr.ptr, arr.allocator);
	arr.ptr = null;
	arr.len = 0;
	arr.allocated_elems = 0;
}

/// Append new value at the dynamic array end. New heap allocation is done here only in cases when
/// there is not enough memory allocated to store all values.
/// Returns pointer to the new appended element.
///
/// !!! note
///     When there is no element to push provided, function will just allocate memory for
///     a new empty element without any initialization.
array_push :: fn { impl_push_empty; impl_push; }

/// Append all `data` at the dynamic array end. New heap allocation is done here only in cases when
/// there is not enough memory allocated to store all values.
/// Does nothing when `data.len < 1`.
array_push_all :: fn (_arr: *[..]?T, data: []T) {
	arr := cast(*_Array) _arr;
	if data.len < 1 { return; }
	elem_size :: sizeof(T);
	arr.len += data.len;
	_array_ensure_space(auto arr, elem_size, auto arr.len, alignof(T));
	dest_ptr :: _array_get_elem_ptr(auto arr, elem_size, arr.len - data.len);
	memcpy(dest_ptr, auto data.ptr, elem_size * auto data.len);
}

/// Duplicate the last array element into `out` argument (if not null) and reduce the array length by
/// one. Returns `true` in case the element was erased.
array_pop :: fn (_arr: *[..]?T, out: *T = null) bool #inline {
	arr := cast(*_Array) _arr;
	// Eventually assert?
	if arr.len == 0 { return false; }
	if out {
		elem :: _array_get_elem_ptr(arr, sizeof(T), arr.len - 1);
		memcpy(auto out, elem, sizeof(T));
	}
	arr.len -= 1;
	return true;
}

/// Duplicate first array element into `out` location (if not null) and shift all other elements by
/// one slot left (the ordeing is kept). Returns `true` in case the element was erased.
array_pop_first :: fn (_arr: *[..]?T, out: *T = null) bool #inline {
	arr := cast(*_Array) _arr;
	// Eventually assert?
	if arr.len == 0 { return false; }
	if out {
		elem :: _array_get_elem_ptr(arr, sizeof(T), 0);
		memcpy(auto out, elem, sizeof(T));
	}
	array_erase_keep_order(_arr, 0);
	return true;
}

/// Reserve heap memory for `n` elements in array. Does nothing in case the already allocated block is
/// large enough to hold `n` elements, the allocated memory block might be bigger then requested size.
array_reserve :: fn (_arr: *[..]?T, n: s64) #inline {
	arr := cast(*_Array) _arr;
	if n == 0 { return; }
	if n < 0 { panic("Invalid array capacity!"); }
	_array_ensure_space(arr, sizeof(T), auto n, alignof(T));
}

array_resize :: fn (_arr: *[..]?T, n: s64) #inline {
	array_reserve(_arr, n);
	_arr.len = n;
}

/// Erase element on index `i`. Call to this function can cause reordering of an dynamic array.
/// Allocated memory is kept even if we erase entire dynamic array. Function invoke panic in case
/// of index overflow.
array_erase :: fn (_arr: *[..]?T, i: s64) {
	arr := cast(*_Array) _arr;
	if i >= arr.len { panic("Index overflow!"); }
	if i == arr.len - 1 {
		arr.len -= 1;
		return;
	}
	elem_size :: sizeof(T);
	memcpy(
		_array_get_elem_ptr(arr, elem_size, i),
		_array_get_elem_ptr(arr, elem_size, arr.len - 1),
		elem_size
	);
	arr.len -= 1;
}

/// Erase element on index `i` and move all following elements left. This might be slow in case the array is
/// large.
array_erase_keep_order :: fn (_arr: *[..]?T, i: s64) {
	arr := cast(*_Array) _arr;
	if i >= arr.len { panic("Index overflow!"); }
	if i == arr.len - 1 {
		arr.len -= 1;
		return;
	}
	elem_size :: sizeof(T);
	size_to_move :: (arr.len - i - 1) * auto elem_size;
	memmove(_array_get_elem_ptr(arr, elem_size, i), _array_get_elem_ptr(arr, elem_size, i + 1), auto size_to_move);
	arr.len -= 1;
}

/// Erase element of the value `v` and return `true` in case element was erased. Note this might be expensive
/// since all elements in array might be visited in the worst case.
array_erase_value :: fn (arr: *[..]?T, v: T) bool {
	loop i := 0; i < arr.len; i += 1 {
		if (@arr)[i] == v {
			array_erase(arr, i);
			return true;
		}
	}
	return false;
}

/// Insert a new element into the array before position `before_index` and return index of the new
/// inserted element. All elements after the new one are moved in the memory by one slot.
///
/// Value of `before_index` must be in range <0, arr.len>. Inserting at `before_index` = 0 basically
/// adds a new element at the array begin; insering at `before_index` = arr.len is the same as
/// `array_push`.
///
/// Order of already existing elements is preserved.
array_insert :: fn (_arr: *[..]?T, before_index: s64, value: T) s64 {
	arr := cast(*_Array) _arr;
	assert(arr);
	assert(before_index >= 0 && before_index <= arr.len);
	if before_index == arr.len {
		// Last (insert before the end).
		array_push(_arr, value);
		return _arr.len - 1;
	}
	// Make room for one element at the end of the allocated block.
	array_push(_arr);
	elem_size :: sizeof(T);
	size_to_move :: (arr.len - before_index) * auto elem_size;
	memmove(_array_get_elem_ptr(arr, elem_size, before_index+1), _array_get_elem_ptr(arr, elem_size, before_index), auto size_to_move);
	dest_ptr :: _array_get_elem_ptr(auto arr, elem_size, before_index);
	memcpy(dest_ptr, auto &value, elem_size);
	return before_index;
}

// @Cleanup: We tend to use directly arr.len = 0 in our code base, so we can remove this function eventually...
/// Erase all elements in dynamic array but keep allocated memory.
array_clear :: fn (_arr: *[..]?T) #inline {
	arr := cast(*_Array) _arr;
	arr.len = 0;
}

array_allocated_bytes :: fn (_arr: *[..]?T) usize #inline {
	arr :: cast(*_Array) _arr;
	return arr.allocated_elems;
}

// Mostly implementation private stuff, this is not private because it might be useful in some rare cases.
// However it's preffered to use standard public api.

_array_get_elem_ptr :: fn (arr: *_Array, elem_size: usize, i: s64) *u8 #inline {
	if i >= arr.len then panic("Element index out of range, index is % but array size is %.", i, arr.len);
	return ptr_shift_bytes(arr.ptr, i * cast(s64) elem_size);
}

_array_ensure_space :: fn (arr: *_Array, elem_size: usize, needed_elems: usize, alignement: usize) {
	if needed_elems == 0                   { return; }
	if arr.allocated_elems >= needed_elems { return; }

	// Allocated larger block for later use.
	extended_needed_elems := needed_elems;
	if arr.allocated_elems == 0 {
		extended_needed_elems = std.max(ARRAY_ALLOC_BLOCK_SIZE, extended_needed_elems);
	} else {
		extended_needed_elems = auto (ARRAY_GROW_FACTOR * auto extended_needed_elems);
	}

	assert(extended_needed_elems >= needed_elems);

	needed_bytes :: extended_needed_elems * elem_size;
	mem, err :: realloc(arr.ptr, needed_bytes, alignement, arr.allocator);
	if err { panic(err); }

	arr.ptr = mem;
	arr.allocated_elems = extended_needed_elems;
}

#private

impl_push :: fn (arr: *[..]?T, v: T) *T #inline {
	data      :: v;
	elem_size :: sizeof(T);
	dest      :: impl_push_empty(arr);
	memcpy(auto dest, auto &data, elem_size);
	return dest;
}

impl_push_empty :: fn (arr: *[..]?T) *T {
	elem_size :: sizeof(T);
	arr.len += 1;
	_array_ensure_space(auto arr, elem_size, auto arr.len, alignof(T));
	return auto _array_get_elem_ptr(auto arr, elem_size, arr.len - 1);
}
