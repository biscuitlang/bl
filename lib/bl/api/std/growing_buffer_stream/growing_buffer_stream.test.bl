#scope_private
#import "std/growing_buffer_stream"

io :: #import "std/io";

init_1 :: fn () #test {
	s: GrowingBufferStream;
	growing_buffer_stream_init(&s);

	test_eq(s.data.len, 0);
	test_eq(s.position, 0);
	test_eq(s.end, 0);
}

init_2 :: fn () #test {
	s: GrowingBufferStream;
	growing_buffer_stream_init(&s, 256);
	defer growing_buffer_stream_terminate(&s);

	test_eq(s.data.len, 256);
	test_eq(s.position, 0);
	test_eq(s.end, 0);
}

simple_write_1 :: fn () #test {
	s: GrowingBufferStream;
	growing_buffer_stream_init(&s);
	defer growing_buffer_stream_terminate(&s);

	n :: 10;
	io.write_value(&s, &n);

	test_eq(s.data.len, 32);
	test_eq(s.position, 4);
	test_eq(s.end, 4);

	io.write_value(&s, &n);

	test_eq(s.data.len, 32);
	test_eq(s.position, 8);
	test_eq(s.end, 8);

	io.write_value(&s, &n);

	test_eq(s.data.len, 32);
	test_eq(s.position, 12);
	test_eq(s.end, 12);
}

simple_write_2 :: fn () #test {
	s: GrowingBufferStream;
	growing_buffer_stream_init(&s);
	defer growing_buffer_stream_terminate(&s);

	data: struct {
		a: [64]u8;
	};

	io.write_value(&s, &data);

	test_eq(s.data.len, 64);
	test_eq(s.position, auto sizeof(data));
	test_eq(s.end, auto sizeof(data));

	n := 10;
	io.write_value(&s, &n);

	test_eq(s.data.len, 96);
	test_eq(s.position, auto sizeof(data) + sizeof(s32));
	test_eq(s.end, auto sizeof(data) + sizeof(s32));

}

read_empty :: fn () #test {
	s: GrowingBufferStream;
	growing_buffer_stream_init(&s);

	tmp: [8]u8;
	r, err :: io.read(&s, tmp.ptr, tmp.len);
	test_ok(err);
	test_eq(r, 0);
}

read_over :: fn () #test {
	s: GrowingBufferStream;
	growing_buffer_stream_init(&s);
	defer growing_buffer_stream_terminate(&s);

	n := 10;
	io.write_value(&s, &n);

	io.seek(&s, io.StreamLocator.BEGIN, 0);

	tmp: [8]u8;
	r, err :: io.read(&s, tmp.ptr, tmp.len);
	test_ok(err);
	test_eq(r, 4);
}

simple_read_write_sequence :: fn () #test {
	s: GrowingBufferStream;
	growing_buffer_stream_init(&s);
	defer growing_buffer_stream_terminate(&s);

	n := 10;
	io.write_value(&s, &n);
	n = 20;
	io.write_value(&s, &n);
	n = 30;
	io.write_value(&s, &n);

	io.seek(&s, io.StreamLocator.BEGIN, 0);

	test_eq(s.data.len, 32);
	test_eq(s.position, 0);
	test_eq(s.end, 12);

	io.read_value(&s, &n);
	test_eq(n, 10);

	io.read_value(&s, &n);
	test_eq(n, 20);

	io.read_value(&s, &n);
	test_eq(n, 30);

	test_eq(s.data.len, 32);
	test_eq(s.position, 12);
	test_eq(s.end, 12);
}

seek_over :: fn () #test {
	s: GrowingBufferStream;
	growing_buffer_stream_init(&s);

	test_eq(s.data.len, 0);
	test_eq(s.position, 0);
	test_eq(s.end, 0);

	io.seek(&s, io.StreamLocator.BEGIN, 0);
	test_eq(s.position, 0);

	io.seek(&s, io.StreamLocator.BEGIN, 10);
	test_eq(s.position, 0);

	io.seek(&s, io.StreamLocator.END, 0);
	test_eq(s.position, 0);

	io.seek(&s, io.StreamLocator.END, 10);
	test_eq(s.position, 0);

	io.seek(&s);
	test_eq(s.position, 0);
}
