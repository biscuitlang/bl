#import "std/io"

#scope std

//! # Growing Buffer Stream
//!
//! `#import "std/growing_buffer_stream"`
//!
//! Growing Buffer Stream is dynamically allocated stream buffer reallocating internal memory block if it runs out
//! of space.
//!

GrowingBufferStream :: struct #base Stream {
	allocator: *Allocator;

	data: []u8;
	position: s64;
	end: s64;
}

growing_buffer_stream_init :: fn (stream: *GrowingBufferStream, size : usize = 0, allocator: *Allocator = null) {
	zeroinit(stream);
	stream.vtable = &STREAM_VTABLE;
	stream.allocator = allocator;

	if size > 0 {
		mem, err :: alloc(size, DEFAULT_ALIGNMENT, allocator);
		if err { panic(err); }
		stream.data.ptr = mem;
		stream.data.len = auto size;
	}
}

growing_buffer_stream_terminate :: fn (stream: *GrowingBufferStream) {
	free(stream.data.ptr, stream.allocator);
	zeroinit(stream);
}

#private

ALLOC_BLOCK_SIZE : usize : 32;
GROW_FACTOR      : f32   : 1.5f;

STREAM_VTABLE :: StreamVTable.{
	read  = auto &read,
	write = auto &write,
	seek = auto &seek,
};

read :: fn (stream: *GrowingBufferStream, dest: *u8, bytes_to_read: s64) (s64, Error) {
	size :: min(stream.end - stream.position, bytes_to_read);
	assert(size >= 0);
	memcpy(dest, &stream.data[stream.position], auto size);
	stream.position += size;
	assert(stream.position <= stream.end);
	return size, OK;
}

write :: fn (stream: *GrowingBufferStream, src: *u8, bytes_to_write: s64) (s64, Error) {
	next_position :: stream.position + bytes_to_write;
	if next_position > stream.data.len {
		// new_size :: cast(usize) (stream.data.len + bytes_to_write * 2);
		new_size : usize = 0;
		if stream.data.len == 0 {
			new_size = std.max(ALLOC_BLOCK_SIZE, auto bytes_to_write);
		} else {
			new_size = std.max(cast(usize) (GROW_FACTOR * auto stream.data.len), auto bytes_to_write + stream.data.len);
		}

		assert(new_size >= auto bytes_to_write);

		mem, err :: realloc(stream.data.ptr, new_size, DEFAULT_ALIGNMENT, stream.allocator);
		if err { return 0, err; }
		stream.data.ptr = mem;
		stream.data.len = auto new_size;
	}

	memcpy(&stream.data[stream.position], src, auto bytes_to_write);
	stream.position = next_position;
	stream.end = max(stream.position, stream.end);
	assert(stream.position <= stream.data.len);
	return bytes_to_write, OK;
}

seek :: fn (stream: *GrowingBufferStream, locator: StreamLocator, offset: s64) (position: s64, err: Error) {
	new_position : s64 = 0;
	using StreamLocator;
	switch locator {
		CURRENT { new_position = stream.position + offset; }
		BEGIN   { new_position = offset; }
		END     { new_position = stream.end + offset; }
	}
	stream.position = clamp(new_position, 0, stream.data.len);
	return stream.position, OK;
}
