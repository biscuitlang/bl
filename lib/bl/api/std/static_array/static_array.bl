//! # Static Array
//!
//! Simple API over static array buffer allocated on stack.
//!
//! ### Example
//!
//! ```bl
//! {% include "../examples/static_array.bl" %}
//! ```

#scope std

/// Create **Static Array** type.
///
/// ```bl
/// StaticArray :: struct {
///     data[elem_count]TElem;
///     len: s64;
/// }
/// ```
StaticArray :: fn (TElem: type #comptime, elem_count: s64 #comptime) type #comptime {
	return struct {
		data: [elem_count]TElem;
		len: s64;
	};
}

/// Push element at the end of the array and returns its address.
///
/// !!! warning
///     Asserts in case there is not enough space left in the storage.
sarray_push :: fn { impl_push_empty; impl_push; }

/// Pops the last element of the array into `out` destination and returns `true`
/// otherwise returns `false` and value of `out` stays unchanged.
sarray_pop :: fn (arr: *?TArr, out: *sarray_typeof_elem(TArr) = null) bool #inline {
	if arr.len == 0 { return false; }
	if out {
		memcpy(auto out, auto &arr.data[arr.len - 1], sizeof(@out));
	}
	arr.len -= 1;
	return true;
}

/// Errase element at the index `i`. The index value must be valid in range `0 <= i < len`.
sarray_erase :: fn (arr: *?TArr, i: s64) {
	if i >= arr.len { panic("Index overflow!"); }
	if i == arr.len - 1 {
		arr.len -= 1;
		return;
	}
	TElem :: sarray_typeof_elem(TArr);
	memcpy(auto &arr.data[i], auto &arr.data[arr.len - 1], sizeof(TElem));
	arr.len -= 1;
}

/// Clear the array.
sarray_clear :: fn (arr: *?TArr) #inline {
	arr.len = 0;
}

/// Get the content of static array as an slice.
sarray_get_slice :: fn (arr: *?TArr) []sarray_typeof_elem(TArr) #inline {
	TElem :: sarray_typeof_elem(TArr);
	return []TElem.{ arr.len, arr.data.ptr };
}

/// Return type of the element.
sarray_typeof_elem :: fn (TArr: type #comptime) type #comptime {
	return @TArr.data.ptr;
}

#private
impl_push :: fn (arr: *?TArr, value: sarray_typeof_elem(TArr)) *sarray_typeof_elem(TArr) #inline {
	elem :: impl_push_empty(arr);
	memcpy(auto elem, auto &value, sizeof(value));
	return elem;
}

impl_push_empty :: fn (arr: *?TArr) *sarray_typeof_elem(TArr) #inline {
	assert(arr.len + 1 <= arr.data.len);
	elem :: &arr.data[arr.len];
	arr.len += 1;
	return elem;
}
