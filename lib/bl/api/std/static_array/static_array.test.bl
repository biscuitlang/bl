#scope_private
#import "std/static_array"

test_basic_inserting_s32 :: fn () #test {
	arr: StaticArray(s32, 10);
	loop i := 0; i < 10; i += 1 {
		sarray_push(&arr, i);
	}
	loop i := 0; i < arr.len; i += 1 {
		test_eq(arr.data[i], i);
	}
}

test_clear :: fn () #test {
	arr: StaticArray(s32, 10);
	loop i := 0; i < 10; i += 1 {
		sarray_push(&arr, i);
	}
	test_eq(arr.len, 10);
	sarray_clear(&arr);
	test_eq(arr.len, 0);
}

test_erase :: fn () #test {
	arr: StaticArray(s32, 10);
	loop i := 0; i < 10; i += 1 {
		sarray_push(&arr, i);
	}
	test_eq(arr.len, 10);
	loop arr.len > 0 {
		sarray_erase(&arr, 0);
	}
	test_eq(arr.len, 0);
}

test_pop :: fn () #test {
	arr: StaticArray(s32, 10);
	loop i := 0; i < 10; i += 1 {
		sarray_push(&arr, i);
	}

	expected : s32 = auto arr.len - 1;
	value := 0;
	loop sarray_pop(&arr, &value) {
		test_true(expected >= 0);
		test_eq(value, expected);
		expected -= 1;
	}
	test_eq(arr.len, 0);
}

test_pop2 :: fn () #test {
	arr: StaticArray(s32, 10);
	test_false(sarray_pop(&arr));
	loop i := 0; i < 10; i += 1 {
		sarray_push(&arr, i);
	}

	loop sarray_pop(&arr) {
	}

	test_eq(arr.len, 0);
}

