#scope_private
#import "std/string"
#import "std/array"
#import "std/print"

multiline_str_literal :: fn () #test {
	FOO ::
	   "Hello "
	   "this "
	   "is "
	   "multiline "
	   "string"
	   "!";
	EXPECTED :: "Hello this is multiline string!";
	test_true(str_is_zero_terminated(FOO));
	test_eq(FOO, EXPECTED);
}

str_init_empty :: fn () #test {
	s: string;
	test_eq(s.len, 0);
	test_eq(s.allocated_elems, 0);
	test_null(s.ptr);
	test_null(s.allocator);
}

str_terminate_empty :: fn () #test {
	s: string;
	str_terminate(&s);
}

str_init_with_allocator :: fn () #test {
	s: string;
	str_init(&s, application_context.allocator);

	test_eq(s.len, 0);
	test_eq(s.allocated_elems, 0);
	test_null(s.ptr);
	test_eq(s.allocator, auto application_context.allocator);
}

str_init_with_reserve :: fn () #test {
	s: string;
	str_init(&s, 256);
	defer str_terminate(&s);

	test_eq(s.len, 0);
	test_eq(s.allocated_elems, 256);
	test_not_null(s.ptr);
	test_null(s.allocator);
}

str_init_with_string :: fn () #test {
	s: string;
	str_init(&s, "Hello");
	defer str_terminate(&s);

	test_eq(s, "Hello");
	test_eq(s.allocated_elems, ARRAY_ALLOC_BLOCK_SIZE);
	test_not_null(s.ptr);
	test_null(s.allocator);
}

str_init_with_cstring :: fn () #test {
	cstr :: [6]u8.{ 'H', 'e', 'l', 'l', 'o', 0 };

	s: string;
	str_init(&s, cast(*s8) cstr.ptr);
	defer str_terminate(&s);

	test_eq(s, "Hello");
	test_eq(s.allocated_elems, ARRAY_ALLOC_BLOCK_SIZE);
	test_not_null(s.ptr);
	test_null(s.allocator);
}

str_append_str :: fn () #test {
	s: string;
	defer str_terminate(&s);

	n := str_append(&s, "Hello");
	test_eq(n, 5);
	test_eq(s, "Hello");
	test_eq(s.allocated_elems, ARRAY_ALLOC_BLOCK_SIZE);
	test_null(s.allocator);

	n = str_append(&s, "World");
	test_eq(n, 5);
	test_eq(s, "HelloWorld");
	test_eq(s.allocated_elems, ARRAY_ALLOC_BLOCK_SIZE);
	test_null(s.allocator);
}

str_append_any :: fn () #test {
	s: string;
	defer str_terminate(&s);

	n := str_append(&s, 666);
	test_eq(n, 3);
	test_eq(s, "666");
	test_eq(s.allocated_elems, ARRAY_ALLOC_BLOCK_SIZE);
	test_null(s.allocator);

	n = str_append(&s, 999);
	test_eq(n, 3);
	test_eq(s, "666999");
	test_eq(s.allocated_elems, ARRAY_ALLOC_BLOCK_SIZE);
	test_null(s.allocator);
}

str_reserve_zero :: fn () #test {
	s: string;
	str_reserve(&s, 0);
	test_eq(s.allocated_elems, 0);
	test_eq(s.len, 0);
	test_null(s.ptr);
	test_null(s.allocator);
}

str_reserve_less_then_block :: fn () #test {
	s: string;
	defer str_terminate(&s);

	str_reserve(&s, 8);
	test_eq(s.allocated_elems, ARRAY_ALLOC_BLOCK_SIZE);
	test_eq(s.len, 0);
	test_not_null(s.ptr);
	test_null(s.allocator);
}

str_reserve_bigger :: fn () #test {
	s: string;
	defer str_terminate(&s);

	str_reserve(&s, 1024);
	test_eq(s.allocated_elems, 1024);
	test_eq(s.len, 0);
	test_not_null(s.ptr);
	test_null(s.allocator);
}

str_reserve_two_times :: fn () #test {
	s: string;
	defer str_terminate(&s);

	str_reserve(&s, 1024);
	test_eq(s.allocated_elems, 1024);
	test_eq(s.len, 0);
	test_not_null(s.ptr);
	test_null(s.allocator);

	str_reserve(&s, 8);
	test_eq(s.allocated_elems, 1024);
	test_eq(s.len, 0);
	test_not_null(s.ptr);
	test_null(s.allocator);
}

str_append_after_reserve :: fn () #test {
	s: string;
	defer str_terminate(&s);

	str_reserve(&s, 1024);
	test_eq(s.allocated_elems, 1024);
	test_eq(s.len, 0);
	test_not_null(s.ptr);
	test_null(s.allocator);

	str_append(&s, "Hello");
	test_eq(s.allocated_elems, 1024);
	test_eq(s.len, 5);
	test_not_null(s.ptr);
	test_null(s.allocator);
}

str_reserve_after_append :: fn () #test {
	s: string;
	defer str_terminate(&s);

	str_append(&s, "Hello");
	test_eq(s.allocated_elems, ARRAY_ALLOC_BLOCK_SIZE);
	test_eq(s, "Hello");
	test_not_null(s.ptr);
	test_null(s.allocator);

	str_reserve(&s, 1024);
	test_gt(s.allocated_elems, 1024);
	test_not_null(s.ptr);
	test_null(s.allocator);

	test_eq(s, "Hello");
}

str_resize_zero :: fn () #test {
	s: string;
	defer str_terminate(&s);

	str_resize(&s, 0);
	test_eq(s.allocated_elems, 0);
	test_eq(s.len, 0);
	test_null(s.ptr);
	test_null(s.allocator);
}

str_resize_grow :: fn () #test {
	s: string;
	defer str_terminate(&s);

	str_resize(&s, 64);
	test_eq(s.allocated_elems, 64);
	test_eq(s.len, 64);
	test_not_null(s.ptr);
	test_null(s.allocator);
}

str_resize_grow_keep_content :: fn () #test {
	s: string;
	defer str_terminate(&s);

	str_append(&s, "Hello");

	str_resize(&s, 64);
	test_eq(s.len, 64);
	test_not_null(s.ptr);
	test_null(s.allocator);

	test_eq(string_view.{ 5, s.ptr }, "Hello");
}

str_resize_shrink_keep_content :: fn () #test {
	s: string;
	defer str_terminate(&s);

	str_append(&s, "HelloWorld");

	prev_ptr :: s.ptr;

	str_resize(&s, 5);
	test_eq(s.len, 5);
	test_eq(s.ptr, prev_ptr);
	test_null(s.allocator);

	test_eq(s, "Hello");
}

str_concat_empty :: fn () #test {
	s: string;
	defer str_terminate(&s);

	str_concat(&s);
	test_eq(s.allocated_elems, 0);
	test_eq(s.len, 0);
	test_null(s.ptr);
	test_null(s.allocator);
}

str_concat_mixed :: fn () #test {
	s: string;
	defer str_terminate(&s);

	str_concat(&s, "Hello", 666);
	test_gt(s.allocated_elems, 0);
	test_eq(s, "Hello666");
	test_null(s.allocator);
}

str_concat_append :: fn () #test {
	s: string;
	defer str_terminate(&s);

	str_concat(&s, "Hello", 666);
	test_eq(s, "Hello666");

	str_concat(&s, "World", 999);
	test_eq(s, "Hello666World999");
}

str_concat_override :: fn () #test {
	s: string;
	defer str_terminate(&s);

	str_clear_concat(&s, "Hello", 666);
	test_eq(s, "Hello666");

	str_clear_concat(&s, "World", 999);
	test_eq(s, "World999");
}

str_erase1 :: fn () #test {
	s: string;
	defer str_terminate(&s);

	// @Incomplete 2025-02-12: We need long jump for this to work.
	/*
	test_expect_abort_begin(); {
		str_erase(&s, 0);
	} test_expect_abort_end();

	test_expect_abort_begin(); {
		str_erase(&s, 1);
	} test_expect_abort_end();

	test_expect_abort_begin(); {
		str_erase(&s, -1);
	} test_expect_abort_end();
	*/
}

str_erase2 :: fn () #test {
	s: string;
	str_init(&s, "aaa");
	defer str_terminate(&s);

	str_erase(&s, 2);
	str_erase(&s, 1);
	str_erase(&s, 0);

	test_eq(s.len, 0);
}

str_erase3 :: fn () #test {
	s: string;
	str_init(&s, "abcdef");
	defer str_terminate(&s);

	str_erase(&s, 5);
	str_erase(&s, 4);
	str_erase(&s, 3);
	test_eq(s.len, 3);
	test_eq(s, "abc");
}

str_erase4 :: fn () #test {
	s: string;
	str_init(&s, "abcdef");
	defer str_terminate(&s);

	str_erase(&s, 0);
	str_erase(&s, 0);
	str_erase(&s, 0);
	test_eq(s.len, 3);
	test_eq(s, "def");
}

str_erase5 :: fn () #test {
	s: string;
	str_init(&s, "abcdef");
	defer str_terminate(&s);

	str_erase(&s, 3);
	str_erase(&s, 3);
	str_erase(&s, 3);
	test_eq(s.len, 3);
	test_eq(s, "abc");
}

str_split_by_last_test :: fn () #test {
	lhs: string_view;
	rhs: string_view;

	if str_split_by_last("1234/1234", '/', &lhs, &rhs) {
		test_eq(lhs.len, 4);
		test_eq(rhs.len, 4);
	}

	if str_split_by_last("/12341234", '/', &lhs, &rhs) {
		test_eq(lhs.len, 0);
		test_eq(rhs.len, 8);
	}

	if str_split_by_last("12341234/", '/', &lhs, &rhs) {
		test_eq(lhs.len, 8);
		test_eq(rhs.len, 0);
	}

	if str_split_by_last("/", '/', &lhs, &rhs) {
		test_eq(lhs.len, 0);
		test_eq(rhs.len, 0);
	}

	test_false(str_split_by_last("12341234", '/', &lhs, &rhs));
	test_false(str_split_by_last("", '/', &lhs, &rhs));
}

str_split_by_first_test :: fn () #test {
	lhs: string_view;
	rhs: string_view;

	if str_split_by_first("1234/1234", '/', &lhs, &rhs) {
		test_eq(lhs.len, 4);
		test_eq(rhs.len, 4);
	}

	if str_split_by_first("/12341234", '/', &lhs, &rhs) {
		test_eq(lhs.len, 0);
		test_eq(rhs.len, 8);
	}

	if str_split_by_first("12341234/", '/', &lhs, &rhs) {
		test_eq(lhs.len, 8);
		test_eq(rhs.len, 0);
	}

	if str_split_by_first("/", '/', &lhs, &rhs) {
		test_eq(lhs.len, 0);
		test_eq(rhs.len, 0);
	}

	test_false(str_split_by_first("12341234", '/', &lhs, &rhs));
	test_false(str_split_by_first("", '/', &lhs, &rhs));
}

str_compare1 :: fn () #test {
	test_true(str_match("hello", "hello"));
	test_true(str_match("", ""));
	test_false(str_match("aaaa", "bb"));
	test_false(str_match("aa", "bbbb"));
	test_false(str_match("", "bbbb"));
	test_false(str_match("aa", ""));
}

str_compare2 :: fn () #test {
	test_true(str_match("", "", 0));
	test_true(str_match("", "", 10));
	test_true(str_match("hello", "hello", 0));
	test_true(str_match("hello", "hello", -1));
	test_true(str_match("hello", "hello", 3));
	test_true(str_match("bbaa", "bb", 2));
	test_true(str_match("b", "b", 100));
	test_true(str_match("b", "b", 0));
	test_true(str_match("bbbb", "b", 0));
	test_true(str_match("b", "bbbb", 0));
	test_true(str_match("bbbb", "b", 1));
	test_true(str_match("b", "bbbb", 1));
	test_true(str_match("", "b", 0));
	test_true(str_match("b", "", 0));
	test_false(str_match("", "b", 1));
	test_false(str_match("b", "", 1));
}

test_strtos64 :: fn () #test {
	using FmtIntBase;
	{
		v, err :: strtos64("");
		test_not_ok(err);
	}
	{
		v, err :: strtos64("", DEC, 0);
		test_ok(err);
		test_eq(v, 0);
	}
	{
		v, err :: strtos64("1");
		test_ok(err);
		test_eq(v, 1);
	}
	{
		v, err :: strtos64("654132");
		test_ok(err);
		test_eq(v, 654132);
	}
	{
		v, err :: strtos64("-654132");
		test_ok(err);
		test_eq(v, -654132);
	}
	{
		v, err :: strtos64("-654132.1");
		test_not_ok(err);
	}
	{
		v, err :: strtos64("-654132-2");
		test_not_ok(err);
	}
	{
		v, err :: strtos64("99999999999999999999999999999999999999999999");
		test_not_ok(err);
	}
	{
		v, err :: strtos64("-");
		test_not_ok(err);
	}
	{
		v, err :: strtos64("1010011010", BIN);
		test_ok(err);
		test_eq(v, 666);
	}
	{
		v, err :: strtos64("-1010011010", BIN);
		test_ok(err);
		test_eq(v, -666);
	}
	{
		v, err :: strtos64("29A", HEX);
		test_ok(err);
		test_eq(v, 0x29A);
	}
	{
		v, err :: strtos64("AaBbCcDd", HEX);
		test_ok(err);
		test_eq(v, 0xaabbccdd);
	}
	{
		v, err :: strtos64("EeFf", HEX);
		test_ok(err);
		test_eq(v, 0xeeff);
	}
}

test_strtof64 :: fn () #test {
	{
		v, err :: strtof64("");
		test_not_ok(err);
	}
	{
		v, err :: strtof64("", 0);
		test_ok(err);
		test_eq(v, 0.);
	}
	{
		v, err :: strtof64("1");
		test_ok(err);
		test_eq(v, 1.);
	}
	{
		v, err :: strtof64(".1");
		test_ok(err);
		test_eq(v, 0.1);
	}
	{
		v, err :: strtof64("654132");
		test_ok(err);
		test_eq(v, 654132.);
	}
	{
		v, err :: strtof64("-654132");
		test_ok(err);
		test_eq(v, -654132.);
	}
	{
		v, err :: strtof64("-654132.1");
		test_ok(err);
		test_eq(v, -654132.1);
	}
	{
		v, err :: strtos64("-654132-2");
		test_not_ok(err);
	}
	{
		v, err :: strtof64("-654132.2.");
		test_not_ok(err);
	}
	{
		v, err :: strtof64(".");
		test_not_ok(err);
	}
	{
		v, err :: strtof64("-");
		test_not_ok(err);
	}
	{
		v, err :: strtof64("-.");
		test_not_ok(err);
	}
}

str_replace1 :: fn () #test {
	tmp: string;
	defer str_terminate(&tmp);

	tmp.len = 0;
	str_append(&tmp, "");
	test_eq(str_replace_all(&tmp, ' ', ','), 0);
	test_eq(tmp, "");

	tmp.len = 0;
	str_append(&tmp, "1 23 456 7 89 ");
	test_eq(str_replace_all(&tmp, ' ', ','), 5);
	test_eq(tmp, "1,23,456,7,89,");

	tmp.len = 0;
	str_append(&tmp, "     ");
	test_eq(str_replace_all(&tmp, ' ', ','), 5);
	test_eq(tmp, ",,,,,");
}

str_replace2 :: fn () #test {
	tmp: string;
	defer str_terminate(&tmp);

	tmp.len = 0;
	str_append(&tmp, "");
	test_eq(str_replace_all(&tmp, ' '), 0);
	test_eq(tmp.len, 0);
	test_eq(tmp, "");

	tmp.len = 0;
	str_append(&tmp, "     ");
	test_eq(str_replace_all(&tmp, ' '), 5);
	test_eq(tmp.len, 0);
	test_eq(tmp, "");

	tmp.len = 0;
	str_append(&tmp, " 12  345 6 789     ");
	test_eq(str_replace_all(&tmp, ' '), 10);
	test_eq(tmp.len, 9);
	test_eq(tmp, "123456789");

	tmp.len = 0;
	str_append(&tmp, " 12  345 6 78     9");
	test_eq(str_replace_all(&tmp, ' '), 10);
	test_eq(tmp.len, 9);
	test_eq(tmp, "123456789");

	tmp.len = 0;
	str_append(&tmp, "d, d");
	test_eq(str_replace_all(&tmp, ' '), 1);
	test_eq(tmp.len, 3);
	test_eq(tmp, "d,d");
}

test_str_count :: fn () #test {
	test_eq(str_count_of("", ','), 0);
	test_eq(str_count_of("dfa, asfdas, fq,, fas ,", ','), 5);
	test_eq(str_count_of("dfa, asfdas, fq,, fas ,", ':'), 0);
}

test_str_split_by1 :: fn () #test {
	s :: str_split_by("this,is,cool,string", ',');
	defer array_terminate(&s);
	test_eq(s.len, 4);
	test_eq(s[0], "this");
	test_eq(s[1], "is");
	test_eq(s[2], "cool");
	test_eq(s[3], "string");
}

test_str_split_by2 :: fn () #test {
	s :: str_split_by(",", ',');
	defer array_terminate(&s);
	test_eq(s.len, 2);
	test_eq(s[0], "");
	test_eq(s[1], "");
}

test_str_split_by3 :: fn () #test {
	s :: str_split_by(",,,", ',');
	defer array_terminate(&s);
	test_eq(s.len, 4);
	test_eq(s[0], "");
	test_eq(s[1], "");
	test_eq(s[2], "");
	test_eq(s[3], "");
}

test_str_split_by4 :: fn () #test {
	s :: str_split_by("abc", ':');
	defer array_terminate(&s);
	test_eq(s.len, 1);
	test_eq(s[0], "abc");
}

test_str_split_by5 :: fn () #test {
	s :: str_split_by("", ':');
	defer array_terminate(&s);
	test_eq(s.len, 0);
}

test_str_split_by6 :: fn () #test {
	s :: str_split_by("d,d", ',');
	defer array_terminate(&s);
	test_eq(s.len, 2);
	test_eq(s[0], "d");
	test_eq(s[1], "d");
}

str_insert_into_empty :: fn () #test {
	s: string;
	defer str_terminate(&s);

	test_eq(str_insert(&s, 0, "hello"), 0);
	test_eq(s.len, 5);
	test_eq(s, "hello");
}

str_insert_in_middle :: fn () #test {
	s: string;
	defer str_terminate(&s);
	str_append(&s, "hworld");
	test_eq(str_insert(&s, 1, "ello"), 1);
	test_eq(s, "helloworld");
}

str_insert_non_empty_at_the_end :: fn () #test {
	s: string;
	defer str_terminate(&s);
	str_append(&s, "foo");
	test_eq(str_insert(&s, 3, "bar"), 3);
	test_eq(s.len, 6);
	test_eq(s, "foobar");
}

str_insert_non_empty_at_the_beginning :: fn () #test {
	s: string;
	defer str_terminate(&s);
	str_append(&s, "bar");
	test_eq(str_insert(&s, 0, "foo"), 0);
	test_eq(s.len, 6);
	test_eq(s, "foobar");
}

test_str_count1 :: fn () #test {
	s: string;
	defer str_terminate(&s);
	test_eq(str_count_of(s, ' '), 0);
}

test_str_count2 :: fn () #test {
	s: string;
	str_init(&s, "abba ab abba abbaa  abbba");
	defer str_terminate(&s);
	test_eq(str_count_of(s, ' '), 5);
}

test_str_sub_default_len :: fn () #test {
	s :: str_sub("hello world", 0);
	test_eq(s.len, 11);
	test_eq(s, "hello world");
}

test_str_sub_empty :: fn () #test {
	s :: str_sub(str_empty, 0);
	test_eq(s.len, 0);
	test_eq(s, str_empty);
}

test_str_sub_empty2 :: fn () #test {
	s :: str_sub("hello world", 0, 0);
	test_eq(s.len, 0);
	test_eq(s, str_empty);
}

test_str_sub_full :: fn () #test {
	s :: str_sub("hello world", 0, 11);
	test_eq(s.len, 11);
	test_eq(s, "hello world");
}

test_str_sub_1 :: fn () #test {
	s :: str_sub("hello world", 0, 5);
	test_eq(s.len, 5);
	test_eq(s, "hello");
}

test_str_sub_2 :: fn () #test {
	s :: str_sub("hello world", 6, 5);
	test_eq(s.len, 5);
	test_eq(s, "world");
}

test_str_sub_3 :: fn () #test {
	s :: str_sub("hello world", 10, 1);
	test_eq(s.len, 1);
	test_eq(s, "d");
}

test_str_sub_4 :: fn () #test {
	s :: str_sub("hello world", 10);
	test_eq(s.len, 1);
	test_eq(s, "d");
}

test_str_sub_5 :: fn () #test {
	s :: str_sub("hello world", 6);
	test_eq(s.len, 5);
	test_eq(s, "world");
}

test_str_sub_6 :: fn () #test {
	s :: str_sub("hello world", 11);
	test_eq(s.len, 0);
	test_eq(s, str_empty);
}

test_tokenize_0 :: fn () #test {
	path := "";
	Data :: struct {
		token_count: s32;
	};
	data: Data;
	str_tokenize(path, '/', &data, &fn (token: string_view, data: *Data) bool {
		data.token_count += 1;
		return true;
	});
	test_eq(data.token_count, 0);
}

test_tokenize_1 :: fn () #test {
	path := "/home/travis/develop/foo";
	Data :: struct {
		token_count: s32;
	};
	data: Data;
	str_tokenize(path, '/', &data, &fn (token: string_view, data: *Data) bool {
		tokens :: [4]string_view.{ "home", "travis", "develop", "foo" };
		test_eq(token, tokens[data.token_count]);
		data.token_count += 1;
		return true;
	});
	test_eq(data.token_count, 4);
}

test_tokenize_2 :: fn () #test {
	path := "////";
	Data :: struct {
		token_count: s32;
	};
	data: Data;
	str_tokenize(path, '/', &data, &fn (token: string_view, data: *Data) bool {
		data.token_count += 1;
		return true;
	});
	test_eq(data.token_count, 0);
}

test_tokenize_3 :: fn () #test {
	path := "/";
	Data :: struct {
		token_count: s32;
	};
	data: Data;
	str_tokenize(path, '/', &data, &fn (token: string_view, data: *Data) bool {
		data.token_count += 1;
		return true;
	});
	test_eq(data.token_count, 0);
}
