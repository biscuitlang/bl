/*

TODO
- overload to_string?
- erase range?

 */

//! # String
//!
//! `#import "std/string"`
//!
//! Builtin UTF-8 encoded dynamic string container.
//!
//! ```bl
//! string :: struct {
//!     len: s64;
//!     ptr: *u8;
//! }
//!
//!
//! // Compile-time string literal
//! my_string :: "This is my string!";
//!
//!
//! // Dynamic string allocated on heap.
//! // New dynamic string can be created from string literal.
//! my_string :: str_new("This is my string!");
//! defer str_delete(&my_string);
//! ```
//!
//! BL strings are zero terminated except of sub-string view function (terminator cannot be added
//! because we cannot modify original string).
//!
//! !!! note
//!     String manipulation functions are related only to dynamic strings and cannot be used
//!     with string literals since those are constants allocated on stack.

/// Overloaded function creating new dynamic string instance. Created string is guaranteed to be
/// zero terminated.
///
/// **Overloads:**
/// ```bl
/// fn (allocator: *Allocator = null) string
/// fn (size: s64, allocator: *Allocator = null) string
/// fn (v: string_view, allocator: *Allocator = null) string
/// fn (cstr: *u8, allocator: *Allocator = null) string
/// ```
str_new :: fn {
	fn (allocator: *Allocator = null) string {
		return make_string(string_view.{}, 0, allocator);
	};
	fn (size: s64, allocator: *Allocator = null) string {
		assert(size > 0);
		return make_string(string_view.{}, size, allocator);
	};
	fn (v: string_view, allocator: *Allocator = null) string {
		return make_string(v, v.len, allocator);
	};
	fn (cstr: *u8, allocator: *Allocator = null) string {
		len :: C.strlen(auto cstr);
		return make_string(string_view.{
			len = auto len,
			ptr = cstr
		}, auto len, allocator);
	};
}

/// Delete dynamic string.
str_delete :: fn (v: *string) {
	if !v.ptr { return; }
	free_block(v.ptr);
	v.len = 0;
	v.ptr = null;
};

/// Ensure that string's underlying buffer is capable to hold `count` of characters and eventually
/// do preallocation if buffer is too small. The reserve does not take in account if the string's
/// buffer is full or not. The function does nothing if buffer size is enough.
str_reserve :: fn (v: *string, count: s64) {
	v.ptr = make_more_room_if_needed(v.ptr, cast(usize)count);
}

/// Get currently allocated memory used by the string in bytes.
str_get_allocated_bytes :: fn (v: string) usize #inline {
	if !v.ptr { return 0; }
	head :: get_block_head(v.ptr);
	return head.allocated_size;
}

/// Clear dynamic string but keep allocated storage.
str_clear :: fn (v: *string) {
	v.len = 0;
	set_terminator(v);
};

/// Append dynamic string with any value. Allocation is done in case there is not enough space
/// reminding in string. The `v` string is supposed to be allocated on heap.
///
/// Returns count of characters appended to the string excluding zero terminator.
str_append :: fn {
	_str_append_str;
	_str_append_any;
}

_str_append_str :: fn (v: *string, other: string_view) s32 {
	new_len :: v.len + other.len;
	v.ptr = make_more_room_if_needed(v.ptr, auto new_len);
	memcpy(ptr_shift_bytes(v.ptr, auto v.len), other.ptr, auto other.len);
	v.len = new_len;
	set_terminator(v);
	return auto other.len;
}

_str_append_any :: fn (v: *string, add: Any) s32 #inline {
	addition := add;
	return _print_impl(v, "%", []Any.{ 1, &addition }, auto v.len);
}

/// Append string with multiple values passed as `args` and return `@v`. New allocation is done in
/// case there is space no left in currently allocated string's memory to append `args`.
str_concat :: fn (v: *string, args: ...) string {
	loop i := 0; i < args.len; i += 1 {
		str_append(v, args[i]);
	}
	return @v;
}

/// Clear the `v` string and append multiple values passed as `args`. Returned value is dereference
/// of the original `v` string after new values are appended. New allocation is done in case there
/// is space no left in currently allocated
/// string's memory to append `args`.
///
/// **hint**: Use this function in case you need create only temporary string i.e. file path.
///
/// ```bl
/// #import "std/string"
///
/// VERSION :: "1.0.0";
///
/// path := str_new();
/// defer str_delete(path);
/// set_cwd(str_clear_concat(&path, "my-dir/project-", VERSION));
/// ```
str_clear_concat :: fn (v: *string, args: ...) string {
	str_clear(v);
	loop i := 0; i < args.len; i += 1 {
		str_append(v, args[i]);
	}
	return @v;
}

/// Compare `first` and `second` strings in specified range `n` and return `true` if they are the same
/// otherwise return `false`.
///
/// Range value `n` is optional and ignored when it's less than 0.
str_match :: fn (first: string_view, second: string_view, n := -1) bool {
	// @CLEANUP: simplify this
	range := n;
	if range < 0 {
		if first.len != second.len { return false; }
		range = auto max(first.len, second.len);
	} else if first.len != second.len {
		if first.len < range { return false; }
		if second.len < range { return false; }
	}
	loop i := 0; i < range && i < first.len && i < second.len; i += 1 {
		if first[i] != second[i] { return false; }
	}
	return true;
}

str_compare :: fn (first: string_view, second: string_view) s32 {
	len :: max(first.len, second.len);
	loop i := 0; i < len; i += 1 {
		f: u8; s: u8;
		if i < first.len  { f = first[i]; }
		if i < second.len { s = second[i]; }
		diff :: s - f;
		if diff != 0 { return auto diff; }
	}
	return 0;
}

/// Returns `true` in case the input string `str` is matching exactly one of strings in the `list`.
str_match_one_of :: fn (str: string_view, list: []string_view) bool {
	loop i := 0; i < list.len; i += 1 {
		if str_match(str, list[i]) { return true; }
	}
	return false;
}

/// Returns index of the first matching string in the input list or -1 if there is no match.
str_first_match :: fn (str: string_view, list: []string_view) s32 {
	loop i := 0; i < list.len; i += 1 {
		if str_match(str, list[i]) { return i; }
	}
	return -1;
}

/// Converts the first `count` of characters from `str` to `s64` number and return OK on success. Whole string
/// will be used in case the `count` is less than zero. The base of expected number can be specified as `base`
/// argument. Note that in case of binary, octal and hex encoding, we do not expect any prefixes as `0b`, `0`
/// and `0x`.
///
/// Negative values can be converted too.
///
/// Returns error when:
///
///     - The input string is empty and `count` greater than zero.
///     - Converted number cause overflow of s64.
///     - The input string contains invalid characters.
strtos64 :: fn (str: string_view, base := FmtIntBase.DEC, count := -1) (s64, Error) {
	c := count;
	s := str;

	if c == 0         { return 0, OK;   }
	if c < 0          { c = auto s.len; }
	else if c > s.len { c = auto s.len; }

	if c == 0 { return 0, error("Cannot convert string to number, the input string is empty."); }

	n: s64;
	b: s64 = auto base;
	is_negative := false;
	got_numbers := false;
	loop c > 0 {
		char :: s[0];
		if char == '-' && is_negative == false {
			is_negative = true;
		} else if is_digit(char, base) {
			got_numbers = true;
			prev_n :: n;
			digit : s64 #noinit;
			if      char <= '9' { digit = auto char - '0'; }
			else if char <= 'F' { digit = auto char - 55;  }
			else if char <= 'f' { digit = auto char - 87;  }
			else                { panic();                 }

			n = n * b + digit;
			if n < prev_n {
				return n, error("Cannot convert string to number, the input number is out of s64 range.");
			}
		} else {
			return n, error("Cannot convert string to number, the input string contains invalid characters.");
		}

		consume_char(&s);
		c -= 1;
	}
	if is_negative { n = -n; }
	if got_numbers == false {
		return n, error("Cannot convert string to number, the input string is invalid.");
	}
	return n, OK;
}

/// Converts the first `count` of characters from `str` to `f64` and return OK on success. Use the whole
/// string in case the `count` is not specified.
///
/// Returns error when:
///
///     - The input string is empty and `count` greater than zero.
///     - The input string contains invalid characters.
strtof64 :: fn (str: string_view, count := -1) (f64, Error) {
	c := count;
	s := str;

	if c == 0         { return 0., OK;  }
	if c < 0          { c = auto s.len; }
	else if c > s.len { c = auto s.len; }

	if c == 0 { return 0., error("Cannot convert string to floating point number, the input string is empty."); }

	n := 0;
	e := 1;
	is_negative := false;
	is_after_comma := false;
	is_invalid := false;
	got_numbers := false;

	loop c > 0 {
		char :: s[0];
		if char == '-' {
			is_negative = true;
		} else if char == '.' && is_after_comma == false {
			is_after_comma = true;
		} else if char >= '0' && char <= '9' {
			got_numbers = true;
			n = n * 10 + (auto char - '0');
			if is_after_comma {
				e *= 10;
			}
		} else {
			is_invalid = true;
			break;
		}

		consume_char(&s);
		c -= 1;
	}

	v := cast(f64) n / cast(f64) e;
	if is_negative { v = -v; }
	if is_invalid || got_numbers == false {
		return v, error("Cannot convert string to floating point number, the input string is invalid.");
	}
	return v, OK;
}

/// Split input string `str` into two tokens based on the last occurrence of `delimiter`. Delimiter
/// is not included in resulting tokens. Result tokens only points into original memory of the
/// `str`, they are not supposed to be freed.
///
/// When delimiter is not present in the input string function return `false`, `lhs` is set to the
/// original `str` string, `rhs` value is unchanged.
///
/// Token destination pointers `lhs` and `rhs` are optional. The `di` output variable is set to
/// index of the split position when it's not `null`.
///
/// !!! warning
///     `lhs` and `rhs` sub strings are not guaranteed to be zero terminated.
///
/// ### Example
///
/// ```bl
/// #import "std/string"
/// #import "std/print"
///
/// main :: fn () s32 {
///     lhs: string_view;
///     rhs: string_view;
///     if str_split_by_last("this/is/my/epic/path", '/', &lhs, &rhs) {
///         print("lhs = %\n", lhs);
///         print("rhs = %\n", rhs);
///     }
///
///     return 0;
/// }
/// ```
str_split_by_last :: fn (str: string_view, delimiter: u8, lhs: *string_view, rhs: *string_view = null, di: *s32 = null) bool {
	i := str.len - 1;
	loop ; i >= 0 && str[i] != delimiter; i -= 1 {}

	if i < 0 { // not found
		if lhs { (@lhs) = str;   }
		if di  { (@di) = auto i; }
		return false;
	}

	if lhs {
		lhs.len = i;
		lhs.ptr = str.ptr;
	}

	if rhs {
		rhs.len = str.len - i - 1;
		rhs.ptr = ptr_shift_bytes(str.ptr, auto sizeof(u8) * auto i + 1);
	}

	if di { (@di) = auto i; }
	return true;
}

/// Split input string `str` at index position and return true when split was done. Result tokens
/// only points into original memory of the `str`, they are not supposed to be freed. When index is
/// out of `str` range function return `false`, `lhs` and `rhs` buffers are not modified.
///
/// Token destination pointers `lhs` and `rhs` are optional.
///
/// !!! warning
///     `lhs` and `rhs` sub strings are not guaranteed to be zero terminated.
///
/// ### Example
///
/// ```bl
/// #import "std/string"
/// #import "std/print"
///
/// main :: fn () s32 {
///     lhs: string_view;
///     rhs: string_view;
///     if str_split_at_index("foobar", 3, &lhs, &rhs) {
///         print("lhs = %\n", lhs);
///         print("rhs = %\n", rhs);
///     }
///
///     return 0;
/// }
/// ```
str_split_at_index :: fn (str: string_view, index: s32, lhs: *string_view = null, rhs: *string_view = null) bool {
	if index > str.len { return false; }
	if index < 0 { return false; }
	lhsc :: cast(s64) index;
	rhsc :: cast(s64) str.len - index;
	if lhs { @lhs = string_view.{ lhsc, str.ptr }; }
	if rhs { @rhs = string_view.{ rhsc, ptr_shift_bytes(str.ptr, lhsc) }; }
	return true;
}

/// Split input string `str` into two tokens based on the first occurrence of `delimiter`. Delimiter
/// is not included in resulting tokens. Result tokens only points into original memory of the
/// `str`, they are not supposed to be freed.
///
/// When delimiter is not present in the input string function return `false`, `lhs` is set to the
/// original `str` string, `rhs` value is unchanged.
///
/// Token destination pointers `lhs` and `rhs` are optional.
///
/// !!! warning
///     `lhs` and `rhs` sub strings are not guaranteed to be zero terminated.
///
/// ### Example
///
/// ```bl
/// #import "std/string"
/// #import "std/print"
///
/// main :: fn () s32 {
///     lhs: string_view;
///     rhs: string_view;
///     if str_split_by_first("this/is/my/epic/path", '/', &lhs, &rhs) {
///         print("lhs = %\n", lhs);
///         print("rhs = %\n", rhs);
///     }
///
///     return 0;
/// }
/// ```
str_split_by_first :: fn (str: string_view, delimiter: u8, lhs: *string_view, rhs: *string_view = null, di: *s32 = null) bool {
	i := 0;
	loop ; i < str.len && str[i] != delimiter; i += 1 {}

	if i >= str.len { // not found
		if lhs { @lhs = str; }
		if di { (@di) = auto i; }
		return false;
	}

	if lhs {
		lhs.len = i;
		lhs.ptr = str.ptr;
	}

	if rhs {
		rhs.len = str.len - i - 1;
		rhs.ptr = ptr_shift_bytes(str.ptr, auto sizeof(u8) * auto i + 1);
	}

	if di { (@di) = auto i; }
	return true;
}

/// Overloaded function inserting one character or other string at desired position.
///
/// **Overloads:**
/// ```bl
/// fn (str: *string, index: s32, v: u8) bool #inline
/// fn (str: *string, index: s32, v: string_view) bool
/// ```
///
/// !!! note
///     Function does nothing (return `false`) when `v` string is empty.
str_insert :: fn { _string_insert; _char_insert; };

/// Erase one character at `index` position and return true when character was erased. The '`index`
/// value is checked to fit in string bounds.
str_erase :: fn (str: *string, index: s32) bool {
	i := index;
	if str.len == 0 { return false; }
	if i >= str.len { return false; }
	// @Performance: memmove here?
	i += 1;
	loop ; i < str.len; i += 1 {
		(@str)[i-1] = (@str)[i];
	}
	str.len -= 1;
	set_terminator(str);

	return true;
}

/// Split the `str` input string by delimiter and return new slice containing all found sub-strings.
/// In case input string is empty, returs empty slice.
///
/// !!! warning
///     String array should be terminated by `array_terminate` call.
///
/// !!! warning
///     Slice elements are not guaranteed to be zero terminated.
str_split_by :: fn (str: string_view, delimiter: u8, allocator: *Allocator = null) [..]string_view {
	ret: [..]string_view;
	array_init(&ret, 0, allocator);
	if str.len == 0 { return ret; }

	lhs, rhs: string_view;
	rest := str;
	loop str_split_by_first(rest, delimiter, &lhs, &rhs) {
		array_push(&ret, lhs);
		rest = rhs;
	}
	if ret.len == 0 { array_push(&ret, lhs); }
	else            { array_push(&ret, rhs); }
	return ret;
}

/// Call the `visitor` callback for each token in the `str` input split by `delimiter`. When the `visitor`
/// callback returns `false` parsing is stopped.
///
/// **Overloads:**
/// ```bl
/// fn (str: string_view, delimiter: u8, ctx: *?T, visitor: *fn(token: string_view, ctx: *T) bool)
/// fn (str: string_view, delimiter: u8, visitor: *fn(token: string_view) bool)
/// ```
///
/// ### Example
///
/// ```bl
/// #import "std/string"
/// #import "std/print"
///
/// main :: fn () s32 {
///     path := "/home/travis/develop/foo";
///     str_tokenize(path, '/', &fn (token: string_view) bool {
///         print("TOKEN: %\n", token);
///         return true;
///     });
///
///     return 0;
/// }
/// ```
///
/// !!! note
///     Callback is not called for empty tokens.
str_tokenize :: fn {
	fn (str: string_view, delimiter: u8, ctx: *?T, visitor: *fn(token: string_view, ctx: *T) bool) {
		assert(visitor);
		lhs, rhs: string_view;
		rest := str;
		loop str_split_by_first(rest, delimiter, &lhs, &rhs) {
			if lhs.len > 0 {
				if !visitor(lhs, ctx) { return; }
			}
			rest = rhs;
		}
		if rhs.len > 0 {
			visitor(rhs, ctx);
		}
	};

	fn (str: string_view, delimiter: u8, visitor: *fn(token: string_view) bool) {
		assert(visitor);
		lhs, rhs: string_view;
		rest := str;
		loop str_split_by_first(rest, delimiter, &lhs, &rhs) {
			if lhs.len > 0 {
				if !visitor(lhs) { return; }
			}
			rest = rhs;
		}
		if rhs.len > 0 {
			visitor(rhs);
		}
	};
}

/// Counts desired character occurrence in the input string.
str_count_of :: fn (str: string_view, c: u8) s32 #inline {
	count := 0;
	loop i := 0; i < str.len; i += 1 {
		if str[i] == c { count += 1; }
	}
	return count;
}

/// Converts ascii input string to lower case and returns count of changed characters.
str_lower :: fn (str: *string) s32 #inline {
	assert(str);
	s :: @str;
	changed_num: s32;
	loop i := 0; i < s.len; i += 1 {
		c :: s[i];
		s[i] = auto C.tolower(auto c);
		if c != s[i] { changed_num += 1; }
	}
	return changed_num;
}

/// Converts single character from the `str` at index `index` to lower case. String `str` must be
/// valid string pointer and `index` must be in range <0, str.len).
str_lower_single_character :: fn (str: *string, index: s64) #inline {
	assert(str);
	assert(index >= 0 && index < str.len);
	(@str)[index] = auto C.tolower(auto (@str)[index]);
}

/// Converts ascii input string to upper case and returns count of changed characters.
str_upper :: fn (str: *string) s32 #inline {
	assert(str);
	s :: @str;
	changed_num: s32;
	loop i := 0; i < (@str).len; i += 1 {
		c :: s[i];
		s[i] = auto C.toupper(auto s[i]);
		if c != s[i] { changed_num += 1; }
	}
	return changed_num;
}

/// Converts single character from the `str` at index `index` to upper case. String `str` must be
/// valid string pointer and `index` must be in range <0, str.len).
str_upper_single_character :: fn (str: *string, index: s64) #inline {
	assert(str);
	assert(index >= 0 && index < str.len);
	(@str)[index] = auto C.toupper(auto (@str)[index]);
}

/// Replace all found occurrences of character `c` in the input string with `with` character and
/// return count of replacements made. This function cannot be used with constant string literals
/// as input.
///
/// If `with` replacement is 0 character, all `c` occurrences will be erased from the string.
///
/// Function return count of replaced characters or zero.
str_replace_all :: fn (str: *string, c: u8, with := '\0') s32 { // 2024-10-06 Why not to use string_view here?
	replaced := 0;
	loop i := 0; i < (@str).len; i += 1 {
		if (@str)[i] == c {
			replaced += 1;
			(@str)[i] = with;
		}
	}
	if with == '\0' {
		shrink_by(str);
	}
	return replaced;
}

/// Calculates string `u32` hash.
str_hash :: fn (str: string_view) u32 {
	hash : u32 = 5381;
	loop i := 0; i < str.len; i += 1 {
		c :: cast(u32) str[i];
		hash = ((hash << 5) + hash) + c;
	}
	return hash;
}

/// Helper inline function returning `true` when string is null. In such case string `len` could be
/// any value.
str_is_null  :: fn (s: string_view) bool #inline { return s.ptr == null; }

/// Helper inline function returning `true` when string is empty. In such case string `ptr` could
/// be any pointer.
str_is_empty :: fn (s: string_view) bool #inline { return s.len == 0; }

str_empty :: string.{};
str_view_empty :: string_view.{};

/// Helper inline function returning `true` when string is empty and null.
str_is_null_or_empty :: fn (s: string_view) bool #inline { return s.ptr == null || s.len == 0; }


/// Creates substring from passed string starting at `start` index of input string and ending at
/// `start` + `len` index.
///
/// Starting index `start` must be greater than 0 and less than `str.len`. `len` specifies optional
/// length of substring. When not specified, length from `start` to the end of the `str` is used.
///
/// !!! warning
///     Result sub-string is not guaranteed to be zero terminated.
str_sub :: fn (str: string_view, start: s64, len : s64 = -1) string_view #inline {
	s := str;
	l := len;
	// Validation.
	if l < -1        { panic("Invalid substring len %", len);           }
	if start < 0     { panic("Invalid substring start %", start);       }
	if start > s.len { panic("Invalid substring start index %", start); }

	if l == -1  { l = s.len - start; }
	if l ==  0  { return str_empty;  }

	return string_view.{ l, &s[start] };
}

/// Checks whether string is zero terminated.
str_is_zero_terminated :: fn (str: string_view) bool #inline {
	// THIS MIGHT NOT BE SAFE? What about empty string view?
	extend := str;
	extend.len += 1;
	return extend[extend.len-1] == '\0';
}

/// Converts string view into C string representation. The original string `str` must be zero-terminated
/// (checked by assert).
strtoc :: fn (str: string_view) *C.char #inline {
	assert(str_is_zero_terminated(str));
	return auto str.ptr;
}

/// Converts C string into string view. The `len` argument is optional and is used as string length if
/// it's greater than -1, otherwise the strlen is used.
///
/// Empty string view is returned when the input C string is null.
ctostr :: fn (cstr: *C.char, len : s64 = -1) string_view #inline {
	l := len;
	if !cstr { return str_view_empty; }
	if l < 0 { l = auto C.strlen(cstr); }
	return string_view.{ l, auto cstr };
}

/// Check whether the input ascii character is an alphabet.
is_alpha :: fn (c: u8) bool #inline {
	if c >= 'a' && c <= 'z' { return true; }
	if c >= 'A' && c <= 'Z' { return true; }
	return false;
}

/// Check wheter the input character represents a digit of number of `base`.
is_digit :: fn (c: u8, base := FmtIntBase.DEC) bool #inline {
	using FmtIntBase;
	switch base {
		BIN  { return c == '0' || c == '1'; }
		OCT  { return c >= '0' && c <= '7'; }
		DEC  { return c >= '0' && c <= '9'; }
		HEX {
			if c >= '0' && c <= '9' { return true; }
			if c >= 'a' && c <= 'f' { return true; }
			if c >= 'A' && c <= 'F' { return true; }
		}
		default { panic(); }
	}
	return false;
}


#scope_private
#import "std/print"
#import "std/math"
#import "std/array"

C :: #import "libc";

make_string :: fn (data: string_view, cap: s64, allocator: *Allocator) string {
	tmp : string #noinit;
	tmp.ptr = realloc_block(null, auto cap, allocator);
	tmp.len = data.len;
	memcpy(tmp.ptr, data.ptr, auto data.len);
	set_terminator(&tmp);
	return tmp;
}

STRING_BLOCK_SIZE :: 32 - sizeof(BlockHead);

BlockHead :: struct {
	allocated_size: usize;
	allocator: *Allocator;
}

// Get size needed for allocation.
get_allocation_size :: fn (size: usize) usize #inline {
	if size == 0 { return size; }
	return size + sizeof(BlockHead) + sizeof(u8); // + terminator
}

// Get address of real allocated memory.
get_allocation_ptr :: fn (ptr: *u8) *u8 {
	if !ptr { return ptr; }
	return cast(*u8) ((cast(usize) ptr) - sizeof(BlockHead));
}

// Get allocation header.
get_block_head :: fn (ptr: *u8) *BlockHead #inline {
	assert(ptr);
	return cast(*BlockHead) get_allocation_ptr(ptr);
}

make_more_room_if_needed :: fn (orig_ptr: *u8, size: usize) *u8 {
	allocated: usize;
	allocator: *Allocator;

	// Allocated the string in case it hasn not been allocated yet.
	if orig_ptr {
		head :: get_block_head(orig_ptr);
		allocated = head.allocated_size;
		allocator = head.allocator;
	}

	if size > allocated {
		return realloc_block(orig_ptr, size, allocator);
	}
	return orig_ptr;
}

realloc_block :: fn (ptr: *u8, size: usize, allocator: *Allocator) *u8 {
	d             :: size / STRING_BLOCK_SIZE + 1;
	extended_size :: d * STRING_BLOCK_SIZE;

	mem, err :: realloc(
		get_allocation_ptr(ptr),
		get_allocation_size(extended_size),
		alignof(u8),
		allocator
	);

	if err { panic(err); }
	tmp := cast(*BlockHead) mem;
	tmp.allocated_size = extended_size;
	tmp.allocator      = allocator;

	return cast(*u8) (cast(usize) tmp + sizeof(BlockHead));
}

free_block :: fn (ptr: *u8) {
	head :: get_block_head(ptr);
	allocator :: head.allocator;
	free(get_allocation_ptr(ptr), allocator);
}

set_terminator :: fn (v: *string) {
	if !v.ptr { return; }
	v.len += 1;
	(@v)[v.len - 1] = 0;
	v.len -= 1;
}

consume_char :: fn (s: *string_view) u8 #inline {
	c :: (@s)[0];
	if s.len > 1 { s.ptr = &(@s)[1]; }
	s.len -= 1;

	return c;
}

shrink_by :: fn (str: *string, c := '\0') {
	tmp := @str;
	n := 0;
	is := -1;
	loop i := 0; i < tmp.len; i += 1 {
		if tmp[i] == c {
			if is < 0 { is = i; }
			n += 1;
		} else if is > -1 {
			buf :: tmp[is];
			tmp[is] = tmp[i];
			tmp[i] = buf;
			is = -1;
			i = is + 1;
			n = 0;
		}
	}
	tmp.len -= n;
	@str = tmp;
}

_char_insert :: fn (str: *string, index: s32, char: u8) bool #inline {
	return _string_insert(str, index, string_view.{ 1, &char });
}

_string_insert :: fn (str: *string, index: s32, v: string_view) bool {
	if !str { panic("Input string is null!"); }
	if v.len == 0 { return false; }
	if index > str.len { return false; }
	if index == str.len { // appending
		str_append(str, v);
		return true;
	}

	orig_len :: str.len;
	new_len :: str.len + v.len;
	str.ptr = make_more_room_if_needed(str.ptr, auto new_len);
	str.len = new_len;
	loop i := orig_len-1; i >= index; i -= 1 {
		(@str)[i+v.len] = (@str)[i];
	}
	loop i := 0; i < v.len; i += 1 {
		(@str)[i+index] = v[i];
	}
	set_terminator(str);
	return true;
}
