//! # String
//!
//! `#import "std/string"`
//!
//! Builtin UTF-8 encoded automatically growing string container. Essentially wrapper over dynamic
//! array with some additional functionality and semantics.
//!
//! ### Memory Layout
//!
//! ```bl
//! string :: struct {
//!     // Count of characters in the string.
//!     len:             s64;
//!     // Pointer to the first string character.
//!     ptr:            *u8;
//!     // Number of bytes allocated to hold string data (grows automatically).
//!     allocated_elems: usize;
//!     // Memory allocator being used to allocate string storage.
//!     allocator:      *Allocator;
//! }
//! ```
//!
//! ### String vs String View
//!
//! As you may notice, there is `string` and `string_view` type in the language. Where `string`
//! represents dynamically allocated sequence of characters, and `string_view` is lightweight
//! "view" into the `string`. While `string` can be appended, shrinked and modified in general,
//! the `string_view` is supposed to provide only read/write access to memory managed by dynamic
//! strings.
//!
//! ```bl
//! string_view :: []u8;
//! ```
//!
//! As you can see the `string_view` is just a slice of `u8` characters, thus we have only pointer
//! to the string data and length of the string (Read more about [slice](manual.html#Slice)).
//!
//! You might ask why we need string views:
//!
//! - While `string` needs to hold some additional data it's not suitable for passing by value
//!   into functions, on the other hand `string_view` is just 16 bytes. It's preferred to pass
//!   `string_view`s by value.
//! - The `string_view` might help to reduce amount of allocations and copying, consider following
//!   function doing split of the input string by delimiter:
//!
//!   ```bl
//!   split :: fn (str: string, delim: u8) (left: string, right: string) {...}
//!   ```
//!
//!   When delimiter is found in the input string `str` we have to allocate two new strings for
//!   the *left* and *right* substring and populate them with data comming from the original string.
//!   Since *left* and *right* substrings are allocated on the heap, we need to call `str_terminate`
//!   on each one after use.
//!
//!   Same function with `string_view`:
//!
//!   ```bl
//!   split :: fn (str: string_view, delim: u8) (left: string_view, right: string_view) {...}
//!   ```
//!
//!   In this case no allocation and string copying is needed, *left* and *right* substrings
//!   are just a "view" of the original string memory.
//!
//! One important thing about string views is that they are in fact just pointers with length,
//! thus there is no explicit ownership of "viewed" data. It's not a good idea to store them, unless
//! you're sure that the "view" lifetime does not exceeds lifetime of the "viewed" string.
//!
//! ### String and String View Conversions
//!
//! Strings can be implicitly converted to string views, but not other way around. This makes
//! the string API more flexible, any function taking `string_view` can directly operate on
//! strings too.
//!
//! ### Zero Termination
//!
//! BL strings are **NOT** zero terminated. Key point behind this decision is possible inconsistency
//! where `string_view` naturally might or might not be zero terminated. Another issues comes from the
//! rules of initialization, where *zero initialized* structures should be valid by default; so in
//! case of strings (allocated on stack and initialized to 0) we cannot guarantee the string buffer
//! to be zero-terminated since such a string does not hold any allocation.
//!
//! In case of interaction with C API or any other API requiring zero-terminated strings, use
//! [strtoc](modules_string.html#strtoc) function to do the conversion.

/// Set of functions for string initialization.
///
/// Note that no memory is preallocated unless required capacity is greater than zero or string is
/// initialized with some data.
///
/// By default, *zero-initialized* string is valid.
str_init :: fn {
	fn (str: *string, allocator: *Allocator) #inline {
		assert(str, "Passed string is invalid.");
		array_init(str_to_arr(str), 0, allocator);
	};

	fn (str: *string, capacity: s64, allocator: *Allocator = null) #inline {
		assert(str, "Passed string is invalid.");
		array_init(str_to_arr(str), capacity, allocator);
	};

	fn (str: *string, text: string_view, allocator: *Allocator = null) #inline {
		assert(str, "Passed string is invalid.");

		array_init(str_to_arr(str), text.len, allocator);
		str_append(str, text);
	};

	fn (str: *string, cstr: *C.char, allocator: *Allocator = null) #inline {
		assert(str, "Passed string is invalid.");
		assert(cstr, "Invalid C string.");

		tmp :: string_view.{
			len = auto C.strlen(cstr),
			ptr = auto cstr,
		};

		array_init(str_to_arr(str), tmp.len, allocator);
		str_append(str, tmp);
	};
}

/// Release all memory allocated by string using internally stored allocator if any, and
/// resets the string to default state.
str_terminate :: fn (str: *string) #inline {
	assert(str, "Passed string is invalid.");
	array_terminate(str_to_arr(str));
}

/// Append string with a new data. Underlying preallocated memory block might grow in case there
/// is not enough space to hold appended string (See [Preallocation Rules](modules_array.html#Preallocation-Rules)).
///
/// It's possible to append values convertible to `Any` type:
///
/// ```bl
/// str: string;
///
/// str_append(&str, "Hello");
/// str_append(&str, 10);
/// str_append(&str, s32);
/// ```
///
/// Does nothing in case the input string is empty.
///
/// Returns number of bytes appended to the string.
str_append :: fn {
	_str_append_str;
	_str_append_any;
}

_str_append_str :: fn (str: *string, other: string_view) s32 #inline {
	assert(str, "Passed string is invalid.");

	array_push_all(str_to_arr(str), other);
	return auto other.len;
}

_str_append_any :: fn (str: *string, v: Any) s32 #inline {
	assert(str, "Passed string is invalid.");

	cursor_start :: cast(s32) str.len;
	cursor_end   :: _print_impl(str, "%", []Any.{ 1, &v }, cursor_start);
	return cursor_end - cursor_start;
}

/// Reserve at least required `capacity` bytes in the string, new allocation is done in case te
/// underlying buffer is not large enough.
///
/// Function does nothing in case required `capacity` is zero, and issues panic in case required
/// `capacity` is negative.
///
/// The capacity specifies total size in bytes required to be available for later use.
///
/// Already existing string content is preserved.
///
/// String length is not changed.
str_reserve :: fn (str: *string, capacity: s64) #inline {
	assert(str, "Passed string is invalid.");
	array_reserve(str_to_arr(str), capacity);
}

/// Resize string to required `len`. Behaviour of this function is similar to `str_reserve` except
/// the string length is changed.
///
/// Buffer reallocation occours in case the current allocated buffer it's not capable to handle
/// requested length.
///
/// Setting the length to smaller values then length of current string content will shrink the
/// string content, minimal possible length value is zero; setting negative value will cause
/// panic. On the other hand, when string content is smaller then required length, the string is
/// extended, but newly occupied buffer range remains uninitialized.
str_resize :: fn (str: *string, len: s64) #inline {
	assert(str, "Passed string is invalid.");
	array_resize(str_to_arr(str), len);
}

/// Append string with multiple values passed as `args` and returns `str`. New allocation is done in case
/// there is not enough space left in currently allocated string buffer to hold append args.
str_concat :: fn (str: *string, args: ...) string_view {
	assert(str, "Passed string is invalid.");
	loop i := 0; i < args.len; i += 1 {
		str_append(str, args[i]);
	}
	return @str;
}

/// Clears and append string with multiple values passed as `args` and returns `str`. New allocation
/// is done in case there is not enough space left in currently allocated string buffer to hold append
/// args.
str_clear_concat :: fn (str: *string, args: ...) string_view {
	assert(str, "Passed string is invalid.");
	str.len = 0;
	loop i := 0; i < args.len; i += 1 {
		str_append(str, args[i]);
	}
	return @str;
}

/// Inserts single character or whole string at desired position. The position is defined as
/// `before_index` pointing to the character in the input string before which the new content
/// will be inserted, or simply defining position of the fist character of the  inserted string
/// in the original string after the modification is done.
///
/// Valid range for the `before_index` is `<0, str.len>`, values out of the range cause panic.
///
/// ```bl
/// @@@examples/str_insert.bl
/// ```
///
/// Function does nothing in case empty string is inserted.
///
/// Returns index of the first character of inserted string.
str_insert :: fn { _string_insert; _char_insert; };

#scope_private

_char_insert :: fn (str: *string, before_index: s64, char: u8) s64 #inline {
	assert(str, "Passed string is invalid.");
	return array_insert(str_to_arr(str), before_index, char);
}

_string_insert :: fn (str: *string, before_index: s64, v: string_view) s64 {
	assert(str, "Passed string is invalid.");
	return array_insert_all(str_to_arr(str), before_index, v);
}

#scope_public

/// Erase character at `index` position in the string. Provided index must be in range <0, str.len) otherwise
/// panic is issued.
str_erase :: fn (str: *string, index: s32) {
	assert(str, "Passed string is invalid.");
	array_erase_keep_order(str_to_arr(str), index);
}

/// Replace all found occurrences of character `c` in the input string with `with` character and
/// return count of replacements made. This function cannot be used with constant string literals
/// as input.
///
/// If `with` replacement is 0 character, all `c` occurrences will be erased from the string.
///
/// Function return count of replaced characters or zero.
str_replace_all :: fn (str: *string, c: u8, with := '\0') s32 { // 2024-10-06 Why not to use string_view here?
	replaced := 0;
	loop i := 0; i < (@str).len; i += 1 {
		if (@str)[i] == c {
			replaced += 1;
			(@str)[i] = with;
		}
	}
	if with == '\0' {
		shrink_by(str);
	}
	return replaced;
}

/// Converts ascii input string to lower case and returns count of changed characters.
str_lower :: fn (str: *string) s32 #inline {
	assert(str);
	s :: @str;
	changed_num: s32;
	loop i := 0; i < s.len; i += 1 {
		c :: s[i];
		s[i] = auto C.tolower(auto c);
		if c != s[i] { changed_num += 1; }
	}
	return changed_num;
}

/// Converts single character from the `str` at index `index` to lower case. String `str` must be
/// valid string pointer and `index` must be in range <0, str.len).
str_lower_single_character :: fn (str: *string, index: s64) #inline {
	assert(str);
	assert(index >= 0 && index < str.len);
	(@str)[index] = auto C.tolower(auto (@str)[index]);
}

/// Converts ascii input string to upper case and returns count of changed characters.
str_upper :: fn (str: *string) s32 #inline {
	assert(str);
	s :: @str;
	changed_num: s32;
	loop i := 0; i < (@str).len; i += 1 {
		c :: s[i];
		s[i] = auto C.toupper(auto s[i]);
		if c != s[i] { changed_num += 1; }
	}
	return changed_num;
}

/// Converts single character from the `str` at index `index` to upper case. String `str` must be
/// valid string pointer and `index` must be in range <0, str.len).
str_upper_single_character :: fn (str: *string, index: s64) #inline {
	assert(str);
	assert(index >= 0 && index < str.len);
	(@str)[index] = auto C.toupper(auto (@str)[index]);
}




//
// Following API is deprecated.
//

/// Overloaded function creating new dynamic string instance.
///
/// **Overloads:**
/// ```bl
/// fn () string;
/// fn (allocator: *Allocator) string
/// fn (size: s64, allocator: *Allocator = null) string
/// fn (v: string_view, allocator: *Allocator = null) string
/// fn (cstr: *u8, allocator: *Allocator = null) string
/// ```
str_new :: fn {
	new_empty;
	new_allocator;
	new_size;
	new_dup;
	new_dup_c_str;
}

#scope_private

new_empty :: fn () string #obsolete "Use default initialization 'string.{}'. [Since 0.13.0]" {
	return .{};
}

new_allocator :: fn (allocator: *Allocator) string #obsolete "Use 'str_init' instead. [Since 0.13.0]" {
	str: string;
	str_init(&str, 0, allocator);
	return str;
}

new_size :: fn (size: s64, allocator: *Allocator = null) string #obsolete "Use 'str_init' instead. [Since 0.13.0]" {
	str: string;
	str_init(&str, size, allocator);
	return str;
}

new_dup :: fn (v: string_view, allocator: *Allocator = null) string #obsolete "Use 'str_init' instead. [Since 0.13.0]" {
	str: string;
	str_init(&str, v, allocator);
	return str;
}

new_dup_c_str :: fn (cstr: *u8, allocator: *Allocator = null) string #obsolete "Use 'str_init' instead. [Since 0.13.0]" {
	str: string;
	str_init(&str, cast(*C.char) cstr, allocator);
	return str;
}

#scope_public

/// Delete dynamic string.
str_delete :: fn (v: *string) #obsolete "Use 'str_terminate' instead'. [Since 0.13.0]" {
	str_terminate(v);
}

/// Clear dynamic string but keep allocated storage.
str_clear :: fn (str: *string) #inline #obsolete "Use 'str.len = 0' instead. [Since 0.13.0]" {
	str.len = 0;
}



//
// Utility functions
//

/// Compare `first` and `second` strings in specified range `n` and return `true` if they are the same
/// otherwise return `false`.
///
/// Range value `n` is optional and ignored when it's less than 0.
str_match :: fn (first: string_view, second: string_view, n := -1) bool {
	// @CLEANUP: simplify this
	range := n;
	if range < 0 {
		if first.len != second.len { return false; }
		range = auto max(first.len, second.len);
	} else if first.len != second.len {
		if first.len < range { return false; }
		if second.len < range { return false; }
	}
	loop i := 0; i < range && i < first.len && i < second.len; i += 1 {
		if first[i] != second[i] { return false; }
	}
	return true;
}

str_compare :: fn (first: string_view, second: string_view) s32 {
	len :: max(first.len, second.len);
	loop i := 0; i < len; i += 1 {
		f: u8; s: u8;
		if i < first.len  { f = first[i]; }
		if i < second.len { s = second[i]; }
		diff :: s - f;
		if diff != 0 { return auto diff; }
	}
	return 0;
}

/// Returns `true` in case the input string `str` is matching exactly one of strings in the `list`.
str_match_one_of :: fn (str: string_view, list: []string_view) bool {
	loop i := 0; i < list.len; i += 1 {
		if str_match(str, list[i]) { return true; }
	}
	return false;
}

/// Returns index of the first matching string in the input list or -1 if there is no match.
str_first_match :: fn (str: string_view, list: []string_view) s32 {
	loop i := 0; i < list.len; i += 1 {
		if str_match(str, list[i]) { return i; }
	}
	return -1;
}

/// Converts the first `count` of characters from `str` to `s64` number and return OK on success. Whole string
/// will be used in case the `count` is less than zero. The base of expected number can be specified as `base`
/// argument. Note that in case of binary, octal and hex encoding, we do not expect any prefixes as `0b`, `0`
/// and `0x`.
///
/// Negative values can be converted too.
///
/// Returns error when:
///
///     - The input string is empty and `count` greater than zero.
///     - Converted number cause overflow of s64.
///     - The input string contains invalid characters.
strtos64 :: fn (str: string_view, base := FmtIntBase.DEC, count := -1) (s64, Error) {
	c := count;
	s := str;

	if c == 0         { return 0, OK;   }
	if c < 0          { c = auto s.len; }
	else if c > s.len { c = auto s.len; }

	if c == 0 { return 0, error("Cannot convert string to number, the input string is empty."); }

	n: s64;
	b: s64 = auto base;
	is_negative := false;
	got_numbers := false;
	loop c > 0 {
		char :: s[0];
		if char == '-' && is_negative == false {
			is_negative = true;
		} else if is_digit(char, base) {
			got_numbers = true;
			prev_n :: n;
			digit : s64 #noinit;
			if      char <= '9' { digit = auto char - '0'; }
			else if char <= 'F' { digit = auto char - 55;  }
			else if char <= 'f' { digit = auto char - 87;  }
			else                { panic();                 }

			n = n * b + digit;
			if n < prev_n {
				return n, error("Cannot convert string to number, the input number is out of s64 range.");
			}
		} else {
			return n, error("Cannot convert string to number, the input string contains invalid characters.");
		}

		consume_char(&s);
		c -= 1;
	}
	if is_negative { n = -n; }
	if got_numbers == false {
		return n, error("Cannot convert string to number, the input string is invalid.");
	}
	return n, OK;
}

/// Converts the first `count` of characters from `str` to `f64` and return OK on success. Use the whole
/// string in case the `count` is not specified.
///
/// Returns error when:
///
///     - The input string is empty and `count` greater than zero.
///     - The input string contains invalid characters.
strtof64 :: fn (str: string_view, count := -1) (f64, Error) {
	c := count;
	s := str;

	if c == 0         { return 0., OK;  }
	if c < 0          { c = auto s.len; }
	else if c > s.len { c = auto s.len; }

	if c == 0 { return 0., error("Cannot convert string to floating point number, the input string is empty."); }

	n := 0;
	e := 1;
	is_negative := false;
	is_after_comma := false;
	is_invalid := false;
	got_numbers := false;

	loop c > 0 {
		char :: s[0];
		if char == '-' {
			is_negative = true;
		} else if char == '.' && is_after_comma == false {
			is_after_comma = true;
		} else if char >= '0' && char <= '9' {
			got_numbers = true;
			n = n * 10 + (auto char - '0');
			if is_after_comma {
				e *= 10;
			}
		} else {
			is_invalid = true;
			break;
		}

		consume_char(&s);
		c -= 1;
	}

	v := cast(f64) n / cast(f64) e;
	if is_negative { v = -v; }
	if is_invalid || got_numbers == false {
		return v, error("Cannot convert string to floating point number, the input string is invalid.");
	}
	return v, OK;
}

/// Split input string `str` into two tokens based on the last occurrence of `delimiter`. Delimiter
/// is not included in resulting tokens. Result tokens only points into original memory of the
/// `str`, they are not supposed to be freed.
///
/// When delimiter is not present in the input string function return `false`, `lhs` is set to the
/// original `str` string, `rhs` value is unchanged.
///
/// Token destination pointers `lhs` and `rhs` are optional. The `di` output variable is set to
/// index of the split position when it's not `null`.
///
/// ### Example
///
/// ```bl
/// #import "std/string"
/// #import "std/print"
///
/// main :: fn () s32 {
///     lhs: string_view;
///     rhs: string_view;
///     if str_split_by_last("this/is/my/epic/path", '/', &lhs, &rhs) {
///         print("lhs = %\n", lhs);
///         print("rhs = %\n", rhs);
///     }
///
///     return 0;
/// }
/// ```
str_split_by_last :: fn (str: string_view, delimiter: u8, lhs: *string_view, rhs: *string_view = null, di: *s32 = null) bool {
	i := str.len - 1;
	loop ; i >= 0 && str[i] != delimiter; i -= 1 {}

	if i < 0 { // not found
		if lhs { (@lhs) = str;   }
		if di  { (@di) = auto i; }
		return false;
	}

	if lhs {
		lhs.len = i;
		lhs.ptr = str.ptr;
	}

	if rhs {
		rhs.len = str.len - i - 1;
		rhs.ptr = ptr_shift_bytes(str.ptr, auto sizeof(u8) * auto i + 1);
	}

	if di { (@di) = auto i; }
	return true;
}

/// Split input string `str` at index position and return true when split was done. Result tokens
/// only points into original memory of the `str`, they are not supposed to be freed. When index is
/// out of `str` range function return `false`, `lhs` and `rhs` buffers are not modified.
///
/// Token destination pointers `lhs` and `rhs` are optional.
///
/// ### Example
///
/// ```bl
/// #import "std/string"
/// #import "std/print"
///
/// main :: fn () s32 {
///     lhs: string_view;
///     rhs: string_view;
///     if str_split_at_index("foobar", 3, &lhs, &rhs) {
///         print("lhs = %\n", lhs);
///         print("rhs = %\n", rhs);
///     }
///
///     return 0;
/// }
/// ```
str_split_at_index :: fn (str: string_view, index: s32, lhs: *string_view = null, rhs: *string_view = null) bool {
	if index > str.len { return false; }
	if index < 0 { return false; }
	lhsc :: cast(s64) index;
	rhsc :: cast(s64) str.len - index;
	if lhs { @lhs = string_view.{ lhsc, str.ptr }; }
	if rhs { @rhs = string_view.{ rhsc, ptr_shift_bytes(str.ptr, lhsc) }; }
	return true;
}

/// Split input string `str` into two tokens based on the first occurrence of `delimiter`. Delimiter
/// is not included in resulting tokens. Result tokens only points into original memory of the
/// `str`, they are not supposed to be freed.
///
/// When delimiter is not present in the input string function return `false`, `lhs` is set to the
/// original `str` string, `rhs` value is unchanged.
///
/// Token destination pointers `lhs` and `rhs` are optional.
///
/// ### Example
///
/// ```bl
/// #import "std/string"
/// #import "std/print"
///
/// main :: fn () s32 {
///     lhs: string_view;
///     rhs: string_view;
///     if str_split_by_first("this/is/my/epic/path", '/', &lhs, &rhs) {
///         print("lhs = %\n", lhs);
///         print("rhs = %\n", rhs);
///     }
///
///     return 0;
/// }
/// ```
str_split_by_first :: fn (str: string_view, delimiter: u8, lhs: *string_view, rhs: *string_view = null, di: *s32 = null) bool {
	i := 0;
	loop ; i < str.len && str[i] != delimiter; i += 1 {}

	if i >= str.len { // not found
		if lhs { @lhs = str; }
		if di { (@di) = auto i; }
		return false;
	}

	if lhs {
		lhs.len = i;
		lhs.ptr = str.ptr;
	}

	if rhs {
		rhs.len = str.len - i - 1;
		rhs.ptr = ptr_shift_bytes(str.ptr, auto sizeof(u8) * auto i + 1);
	}

	if di { (@di) = auto i; }
	return true;
}

/// Split the `str` input string by delimiter and return new array allocated using `allocator` containing
/// all found sub-strings. In case input string is empty, returs empty slice.
///
/// !!! warning
///     String array should be terminated by `array_terminate` call.
str_split_by :: fn (str: string_view, delimiter: u8, allocator: *Allocator = null) [..]string_view {
	ret: [..]string_view;
	array_init(&ret, 0, allocator);
	if str.len == 0 { return ret; }

	lhs, rhs: string_view;
	rest := str;
	loop str_split_by_first(rest, delimiter, &lhs, &rhs) {
		array_push(&ret, lhs);
		rest = rhs;
	}
	if ret.len == 0 { array_push(&ret, lhs); }
	else            { array_push(&ret, rhs); }
	return ret;
}

/// Call the `visitor` callback for each token in the `str` input split by `delimiter`. When the `visitor`
/// callback returns `false` parsing is stopped.
///
/// **Overloads:**
/// ```bl
/// fn (str: string_view, delimiter: u8, ctx: *?T, visitor: *fn(token: string_view, ctx: *T) bool)
/// fn (str: string_view, delimiter: u8, visitor: *fn(token: string_view) bool)
/// ```
///
/// ### Example
///
/// ```bl
/// #import "std/string"
/// #import "std/print"
///
/// main :: fn () s32 {
///     path := "/home/travis/develop/foo";
///     str_tokenize(path, '/', &fn (token: string_view) bool {
///         print("TOKEN: %\n", token);
///         return true;
///     });
///
///     return 0;
/// }
/// ```
///
/// !!! note
///     Callback is not called for empty tokens.
str_tokenize :: fn {
	fn (str: string_view, delimiter: u8, ctx: *?T, visitor: *fn(token: string_view, ctx: *T) bool) {
		assert(visitor);
		lhs, rhs: string_view;
		rest := str;
		loop str_split_by_first(rest, delimiter, &lhs, &rhs) {
			if lhs.len > 0 {
				if !visitor(lhs, ctx) { return; }
			}
			rest = rhs;
		}
		if rhs.len > 0 {
			visitor(rhs, ctx);
		}
	};

	fn (str: string_view, delimiter: u8, visitor: *fn(token: string_view) bool) {
		assert(visitor);
		lhs, rhs: string_view;
		rest := str;
		loop str_split_by_first(rest, delimiter, &lhs, &rhs) {
			if lhs.len > 0 {
				if !visitor(lhs) { return; }
			}
			rest = rhs;
		}
		if rhs.len > 0 {
			visitor(rhs);
		}
	};
}

/// Returns number of `c` characters in the string.
str_count_of :: fn (str: string_view, c: u8) s32 #inline {
	count := 0;
	loop i := 0; i < str.len; i += 1 {
		if str[i] == c { count += 1; }
	}
	return count;
}

/// Calculates string `u32` hash.
str_hash :: fn (str: string_view) u32 {
	hash : u32 = 5381;
	loop i := 0; i < str.len; i += 1 {
		c :: cast(u32) str[i];
		hash = ((hash << 5) + hash) + c;
	}
	return hash;
}

/// Helper inline function returning `true` when string is null. In such case string `len` could be
/// any value.
str_is_null  :: fn (str: string_view) bool #inline #obsolete "Use 'str.ptr != null' instead. [Since 0.13.0]" {
	return str.ptr == null;
}

/// Helper inline function returning `true` when string is empty. In such case string `ptr` could
/// be any pointer.
str_is_empty :: fn (str: string_view) bool #inline #obsolete "Use 'str.len != 0' instead. [Since 0.13.0]" {
	return str.len == 0;
}

str_empty :: string.{};
str_view_empty :: string_view.{};

/// Helper inline function returning `true` when string is empty and null.
str_is_null_or_empty :: fn (s: string_view) bool #inline #obsolete "Use 'str.len != 0 || str.ptr' instead. [Since 0.13.0]" {
	return s.ptr == null || s.len == 0;
}


/// Creates substring from passed string starting at `start` index of input string and ending at
/// `start` + `len` index.
///
/// Starting index `start` must be greater than 0 and less than `str.len`. `len` specifies optional
/// length of substring. When not specified, length from `start` to the end of the `str` is used.
///
/// !!! warning
///     Result sub-string is not guaranteed to be zero terminated.
str_sub :: fn (str: string_view, start: s64, len : s64 = -1) string_view #inline {
	s := str;
	l := len;
	// Validation.
	if l < -1        { panic("Invalid substring len %", len);           }
	if start < 0     { panic("Invalid substring start %", start);       }
	if start > s.len { panic("Invalid substring start index %", start); }

	if l == -1  { l = s.len - start; }
	if l ==  0  { return str_empty;  }

	return string_view.{ l, &s[start] };
}

/// Checks whether string view is zero terminated. Returns `false` In case the string view does not point
/// to any valid data (`str.ptr == null`).
str_is_zero_terminated :: fn (str: string_view) bool #inline #obsolete "Will be removed, BL strings are no longer zero-terminated. [Since 0.13.0]" {
	if !str.ptr then return false;
	extend := str;
	extend.len += 1;
	return extend[extend.len-1] == '\0';
}

/// Converts BL string to C zero-terminated string. This function internally allocates memory in order to
/// put the zero terminator at the end of the string duplicate. In case the `_allocator` is not specified,
/// `application_context.temporary_allocator` is used.
///
/// Empty strings are valid input and are converted to C string as "\0".
strtoc :: fn (str: string_view, _allocator : *Allocator = null) *C.char #inline {
	allocator :: if !_allocator then application_context.temporary_allocator else _allocator;
	mem, err :: alloc(auto str.len + 1, alignof(C.char), allocator);
	if err then panic(err);
	cstr :: []C.char.{ str.len + 1, auto mem };
	memcpy(auto cstr.ptr, str.ptr, auto str.len);
	cstr[cstr.len - 1] = 0;
	return cstr.ptr;
}

/// Converts string view into C string representation. This function first checks if the input string
/// is zero terminated, in case it's not, the temporary allocator is used to create zero terminated
/// copy which is returned. Otherwise returns pointer to data of original string without any allocations.
tstrtoc :: fn (str: string_view) *C.char #inline #obsolete "Use 'strtoc' instead. [Since 0.13.0]" {
	return strtoc(str, application_context.temporary_allocator);
}

/// Converts C string into string view. The `len` argument is optional and is used as string length if
/// it's greater than -1, otherwise the `C.strlen` is used.
///
/// Empty string view is returned when the input C string is null.
ctostr :: fn (cstr: *C.char, len : s64 = -1) string_view #inline {
	l := len;
	if !cstr { return str_view_empty; }
	if l < 0 { l = auto C.strlen(cstr); }
	return string_view.{ l, auto cstr };
}

/// Check whether the input ascii character is an alphabet.
is_alpha :: fn (c: u8) bool #inline {
	if c >= 'a' && c <= 'z' { return true; }
	if c >= 'A' && c <= 'Z' { return true; }
	return false;
}

/// Check wheter the input character represents a digit of number of `base`.
is_digit :: fn (c: u8, base := FmtIntBase.DEC) bool #inline {
	using FmtIntBase;
	switch base {
		BIN  { return c == '0' || c == '1'; }
		OCT  { return c >= '0' && c <= '7'; }
		DEC  { return c >= '0' && c <= '9'; }
		HEX {
			if c >= '0' && c <= '9' { return true; }
			if c >= 'a' && c <= 'f' { return true; }
			if c >= 'A' && c <= 'F' { return true; }
		}
		default { panic(); }
	}
	return false;
}

#scope_private
#import "std/print"
#import "std/math"
#import "std/array"

C :: #import "libc";

str_to_arr :: fn (str: *string) *[..]u8 #inline {
	return auto str;
}

consume_char :: fn (s: *string_view) u8 #inline {
	c :: (@s)[0];
	if s.len > 1 { s.ptr = &(@s)[1]; }
	s.len -= 1;

	return c;
}

shrink_by :: fn (str: *string, c := '\0') {
	tmp := @str;
	n := 0;
	is := -1;
	loop i := 0; i < tmp.len; i += 1 {
		if tmp[i] == c {
			if is < 0 { is = i; }
			n += 1;
		} else if is > -1 {
			buf :: tmp[is];
			tmp[is] = tmp[i];
			tmp[i] = buf;
			is = -1;
			i = is + 1;
			n = 0;
		}
	}
	tmp.len -= n;
	@str = tmp;
}
