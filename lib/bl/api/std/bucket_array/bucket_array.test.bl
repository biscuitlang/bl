#scope_private
#import "std/bucket_array"
#import "std/array"

TEST_COUNT :: 1000;

Data :: struct {
	mem: [64]u8;
	i: s32;
}

push_and_erase :: fn () #test {
	arr: BucketArray(Data);
	defer bucket_array_terminate(&arr);

	tmp: [..]*Data;
	defer array_terminate(&tmp);
	loop i := 0; i < TEST_COUNT; i += 1 {
		data := bucket_array_push(&arr);
		data.i = i;
		array_push(&tmp, data);
	}
	test_eq(arr.len, TEST_COUNT);

	loop i := 0; i < tmp.len; i += 1 {
		data :: tmp[i];
		test_eq(data.i, i);
		bucket_array_erase(&arr, data);
	}
	test_eq(arr.len, 0);
}

iteration :: fn () #test {
	arr: BucketArray(Data);
	defer bucket_array_terminate(&arr);

	loop i := 0; i < TEST_COUNT; i += 1 {
		data := bucket_array_push(&arr);
		data.i = i;
	}
	test_eq(arr.len, TEST_COUNT);

	count := 0;
	loop it := bucket_array_begin(&arr); it; it = bucket_array_iter_next(&arr, it) {
		test_eq(it.value.i, count);
		count += 1;
	}
	test_eq(count, auto arr.len);
}

iteration_on_empty :: fn () #test {
	arr: BucketArray(Data);
	defer bucket_array_terminate(&arr);

	count := 0;
	loop it := bucket_array_begin(&arr); it; it = bucket_array_iter_next(&arr, it) {
		count += 1;
	}
	test_eq(count, 0);
}

iteration_on_single_value :: fn () #test {
	arr: BucketArray(Data);
	defer bucket_array_terminate(&arr);

	my_data: Data;
	my_data.i = 666;
	bucket_array_push(&arr, my_data);

	count := 0;
	loop it := bucket_array_begin(&arr); it; it = bucket_array_iter_next(&arr, it) {
		test_eq(it.value.i, 666);
		count += 1;
	}
	test_eq(count, 1);
}

clearing :: fn () #test {
	arr: BucketArray(Data);
	defer bucket_array_terminate(&arr);

	loop i := 0; i < TEST_COUNT; i += 1 {
		data := bucket_array_push(&arr);
		data.i = i;
	}
	test_eq(arr.len, TEST_COUNT);

	bucket_count :: arr.buckets.len;

	bucket_array_clear(&arr);
	test_eq(arr.len, 0);

	loop i := 0; i < TEST_COUNT; i += 1 {
		data := bucket_array_push(&arr);
		data.i = i;
	}
	test_eq(arr.buckets.len, bucket_count);
	test_eq(arr.len, TEST_COUNT);
}
