//! # Input/Ouput
//!
//! `#import "std/io"`
//!
//! Input and output is handled by generic stream interface containing callbacks for read, write and
//! seek operations. The stream itself can contain any data needed (i.e. memory buffer, handle to file,
//! etc.), generic functionality is handled via virtual table containing pointers to the implementation
//! of all needed (supported) stream API functions.
//!
//! ### Example
//!
//! ```bl
//! @@@examples/streams.bl
//! ```

Stream :: struct {
	vtable: *StreamVTable;
}

StreamVTable :: struct {
	read:  *fn(stream: *Stream, dest: *u8, bytes_to_write: s64) (bytes_read: s64, err: Error);
	write: *fn(stream: *Stream, src: *u8, bytes_to_read: s64) (bytes: s64, err: Error);
	seek:  *fn(stream: *Stream, locator: StreamLocator, offset: s64) (position: s64, err: Error);
	flush: *fn(stream: *Stream) Error;
}

/// Stream seek offset locator.
StreamLocator :: enum {
	CURRENT;
	BEGIN;
	END;
}

// =================================================================================================
// Writing
// =================================================================================================

/// Write `bytes_to_write` count of bytes from the `str` into the stream. Returns
/// count of actually written bytes or an error.
write :: fn (stream: *Stream, src: *u8, bytes_to_write: s64) (s64, Error) #inline {
	assert(stream);
	assert(stream.vtable);
	if !stream.vtable.write { panic("Stream does not support writing."); }
	if bytes_to_write < 1 { return 0, OK; }
	return stream.vtable.write(stream, src, bytes_to_write);
}

/// Write the data slice into the stream, the `bytes_to_write` can be specified to limit count
/// of written bytes. Returns count of actually written bytes or an error.
write_data :: fn (stream: *Stream, data: []u8, bytes_to_write := S64_MAX) (s64, Error) #inline {
	return write(stream, data.ptr, min(data.len, bytes_to_write));
}

/// Write the data string into the stream, the `bytes_to_write` can be specified to limit count
/// of written bytes. Returns count of actually written bytes or an error.
write_string :: fn (stream: *Stream, str: string_view, bytes_to_write := S64_MAX) (s64, Error) #inline {
	return write(stream, str.ptr, min(str.len, bytes_to_write));
}

write_all :: fn (stream: *Stream, src: *u8, bytes_to_write: s64) Error {
	tmp :: []u8.{ bytes_to_write, src };
	written_bytes: s64;
	loop written_bytes < bytes_to_write {
		bytes, err :: write(stream, &tmp[written_bytes], tmp.len - written_bytes);
		if err { return err; }
		if bytes == 0 {
			return error("Unable to write all data!");
		}
		written_bytes += bytes;
	}
	assert(written_bytes == bytes_to_write);
	return OK;
}

write_value :: fn (stream: *Stream, v: *?T) Error #inline {
	return write_all(stream, auto v, auto sizeof(T));
}

// TODO: write_fmt

// =================================================================================================
// Reading
// =================================================================================================

/// Read `bytes_to_read` count of bytes from the stream into `dest` memory. Returns count of actually
/// read bytes or an error.
read :: fn (stream: *Stream, dest: *u8, bytes_to_read: s64) (s64, Error) #inline {
	assert(stream);
	assert(stream.vtable);
	if !stream.vtable.read { panic("Stream does not support reading."); }
	if bytes_to_read < 1 { return 0, OK; }
	return stream.vtable.read(stream, dest, bytes_to_read);
}

/// Read `bytes_to_read` count of bytes from the stream into `dest` dynamic array. Internal buffer size may
/// be customized by `buffer_size` argument.
/// Return an error in case reading failed.
read_data :: fn (stream: *Stream, dest: *[..]u8, bytes_to_read: s64 = S64_MAX, buffer_size := 512 #comptime) Error {
	tmp: [buffer_size]u8 #noinit;
	processed_bytes := bytes_to_read;
	loop processed_bytes > 0 {
		bytes, err :: read(stream, tmp.ptr, min(tmp.len, processed_bytes));
		if err { return err; }
		if bytes == 0 { break; }
		processed_bytes -= bytes;
		array_push_all(dest, []u8.{ ptr = tmp.ptr, len = bytes });
	}
	return OK;
}

/// Read `bytes_to_read` count of bytes from the stream into `dest`. Internal buffer size may be
/// customized by `buffer_size` argument.
/// Return and error in case reading failed.
read_string :: fn (stream: *Stream, dest: *string, bytes_to_read: s64 = S64_MAX, buffer_size := 512 #comptime) Error {
	tmp: [buffer_size]u8 #noinit;
	processed_bytes := bytes_to_read;
	loop processed_bytes > 0 {
		bytes, err :: read(stream, tmp.ptr, min(tmp.len, processed_bytes));
		if err { return err; }
		if bytes == 0 { break; }
		processed_bytes -= bytes;
		str :: string_view.{ ptr = tmp.ptr, len = bytes };
		str_append(dest, str);
	}
	return OK;
}

read_all :: fn (stream: *Stream, dest: *u8, bytes_to_read: s64, buffer_size := 512 #comptime) Error {
	dest_buf :: []u8.{ bytes_to_read, dest };
	tmp: [buffer_size]u8 #noinit;
	read_bytes: s64;
	loop read_bytes < bytes_to_read {
		bytes, err :: read(stream, tmp.ptr, min(tmp.len, bytes_to_read - read_bytes));
		if err { return err; }
		if bytes == 0 { break; }
		memcpy(&dest_buf[read_bytes], tmp.ptr, auto bytes);
		read_bytes += bytes;
	}
	assert(read_bytes == bytes_to_read);
	return OK;
}

/// Loads context of the whole (from BEGIN locator to END) stream into `dest` dynamic array. The input stream must
/// be readable and seekable.
///
/// The `size_limit_bytes` might be specified to limit the maximum allowed count of bytes to read. Error is generated
/// in case the stream content is bigger then the limit, and no reading is done in such a case. The `size_limit_bytes`
/// is ignored when set to -1 (default).
///
/// Stream locator position is preserved.
read_whole :: fn (stream: *Stream, dest: *[..]u8, size_limit_bytes : s64 = -1) Error {
	using StreamLocator;

	prev_location, err1  :: seek(stream, CURRENT);
	if err1 { return err1; }
	defer seek(stream, CURRENT, prev_location);

	_, err2 :: seek(stream, BEGIN);
	if err2 { return err2; }

	size, err3 :: seek(stream, END);
	if err3 { return err3; }

	_, err4 :: seek(stream, BEGIN);
	if err4 { return err4; }

	if size_limit_bytes != -1 && size > size_limit_bytes {
		return error(-1, "File bigger than specified limit %B.", size_limit_bytes);
	}

	array_resize(dest, size);
	return read_all(stream, dest.ptr, size, 2048);
}

read_value :: fn (stream: *Stream, v: *?T) Error #inline {
	assert(v);
	return read_all(stream, auto v, auto sizeof(T));
}

// =================================================================================================
// Other
// =================================================================================================

/// Set the stream pointer position to the `offset` value relative to the stream `locator`. Returns
/// the pointer position or an error.
seek :: fn (stream: *Stream, locator := StreamLocator.CURRENT, offset: s64 = 0) (position: s64, err: Error) {
	assert(stream);
	assert(stream.vtable);
	if !stream.vtable.seek { panic("Stream does not support position seeking."); }
	return stream.vtable.seek(stream, locator, offset);
}

/// Flush all buffered stream data.
flush :: fn (stream: *Stream) Error {
	assert(stream);
	assert(stream.vtable);
	if !stream.vtable.flush { panic("Stream does not support flushing."); }
	return stream.vtable.flush(stream);
}

/// Copy the whole content from current position in stream `src` to the stream `dest` (starting at current position in `dest`).
/// If copying was successful, `src` stream position should points to the `src` stream end otherwise error is returned.
copy_stream :: fn (dest: *Stream, src: *Stream, buffer_size := 512 #comptime) Error {
	tmp: [buffer_size]u8 #noinit;
	state := OK;
	loop {
		bytes, err :: read(src, tmp.ptr, tmp.len);
		if err {
			state = err;
			break;
		}
		if bytes == 0 { break; }
		write_err :: write_all(dest, tmp.ptr, bytes);
		if write_err {
			state = write_err;
			break;
		}
	}
	return state;
}

#scope_private
#import "std/math";
#import "std/array"