//! # Table
//!
//! `#import "std/table"`
//!
//! Table is generic data container aka hash table or hash map storing data entries
//! as pairs of Key and Value. Table provides fast lookup on large amount of data.
//! 
//! Internally, the table is implemented as preallocated array of `slots` and dynamic array of `keys`
//! and `values`. The `slots` array holds information about mapping of each key-value pair (inserted into `keys`
//! and `values` arrays) and corresponding 32 bit hash value calculated from the `key` value.
//!
//! The `kays` and `values` arrays are actually regular dynamic arrays holding inserted keys and values,
//! so it can be iterated as usual. The ordering of arrays is unstable after erase operation.
//! 
//! Performance of insert and lookup is getting worse when the table is starting to be full, to minimize
//! this problem, the table grows when the maximum **load factor** is reached (i.e. 70%). In such a situation
//! only the `slots` array is reallocated and whole table mapping is recalculated. This operation can be
//! expensive on large tables. However, `keys` and `values` arrays stays as it is and reallocates as regular
//! dynamic arrays (in case there is no preallocated space left).
//!
//! !!! warning
//!     Table data array ordering corresponds to the order of inserts until any element is erased from the table.
//!
//! !!! warning
//!     The key types are limited to numbers, strings and pointers (this may change in the future).
//!
//! ### Example
//!
//! ```bl
//! @@@examples/table.bl
//! ```
//!

// The implementation is partially based on Jonathan Blow's hash table https://www.youtube.com/watch?v=k9MBMvR2IvI.

#scope std

/// Create a new **Table** type. The `TKey` must be a number, string or pointer type.
///
/// ```bl
/// Table :: struct {
///     keys: [..]TKey;
///     values: [..]TValue;
///     len: s64;
/// }
/// ```
Table :: fn (TKey: type #comptime, TValue: type #comptime) type #comptime {
	if TKey != string  && TKey != string_view && (!is_number(TKey)) && (!is_pointer(TKey)) {
		panic("Table key value must be string, string_view, number or pointer type!");
	}
	return struct {
		slots: []Slot;
		// @Performance: Maybe we don't want to use dynamic arrays here to reduce redundant values (i.e. len).
		keys: [..]TKey;
		values: [..]TValue;
		len: s64;

		allocator: *Allocator;
	};
}

/// Initialize the `tbl` table. It's not necessary to call this method in case the table is
/// already zero-initialized. The `expected_size` can be specified as hint telling the table how many
/// elements we're going to store. Memory preallocation is performed using `allocator`. 
tbl_init :: fn (tbl: *?T, expected_size := DEFAULT_ENTRIES_COUNT, allocator: *Allocator = null) {
	assert(tbl);
	tbl.allocator = allocator;
	tbl.len = 0;
	array_init(&tbl.keys, expected_size, tbl.allocator);
	array_init(&tbl.values, expected_size, tbl.allocator);
	resize(tbl, expected_size);
}

/// Release all memory resources used by the table and set the `tbl` instance to the default state.
tbl_terminate :: fn (tbl: *?T) {
	assert(tbl);
	array_terminate(&tbl.keys);
	array_terminate(&tbl.values);
	free_slice(&tbl.slots, tbl.allocator);
	zeromem(auto tbl, sizeof(T));
}

/// Resolve type of key from table type in compile-time.
tbl_typeof_key :: fn (TTable: type #comptime) type #comptime {
	return @TTable.keys.ptr;
}

/// Resolve type of value from table type in compile-time.
tbl_typeof_value :: fn (TTable: type #comptime) type #comptime {
	return @TTable.values.ptr;
}

/// Overloaded table insert function adding a new element (associated with the `key`) into the table.
/// The `key` value must be unique (not already existing in the table), this is checked in debug
/// mode and panic is invoked in case of collision.
///
/// **Overloads:**
/// ```bl
/// fn (tbl: *?T, key: tbl_typeof_key(T), value: tbl_typeof_value(T)) *tbl_typeof_value(T) #inline
/// fn (tbl: *?T, key: tbl_typeof_key(T)) *tbl_typeof_value(T) #inline
/// ```
///
/// Function returns pointer to the newly inserted value in the `values` array.
///
/// !!! note
///     When no value is explicitly inserted, returned pointer points to non-initialized memory.
tbl_insert :: fn { impl_insert_empty; impl_insert; }

/// Lookup entry associated with the `key` and returns pointer its value or `null` when no such `key`
/// was found.
tbl_lookup_ptr :: fn (tbl: *?T, key: tbl_typeof_key(T)) *tbl_typeof_value(T) #inline {
	assert(tbl);
	if !tbl.slots.ptr { return null; }
	_, entry_index :: lookup_indices(tbl, calculate_hash(key), key);
	if entry_index < 0 { return null; }
	return &tbl.values[entry_index];
}

/// Lookup entry associated with the `key` and returns its value and `true` or uninitialized value of type TValue
/// and `false` when no such `key` was found in the table.
tbl_lookup :: fn (tbl: *?T, key: tbl_typeof_key(T)) (value: tbl_typeof_value(T), found: bool) #inline {
	assert(tbl);
	value_ptr :: tbl_lookup_ptr(tbl, key);
	if value_ptr { return @value_ptr, true; }
	empty: tbl_typeof_value(T) #noinit;
	return empty, false;
}

/// Lookup entry associated with the `key` and returns index of found element (appliable to `keys` or `values`
/// arrays) or `-1` when no such `key` was found.
tbl_lookup_index :: fn (tbl: *?T, key: tbl_typeof_key(T)) s32 #inline {
	assert(tbl);
	if !tbl.slots.ptr { return -1; }
	_, entry_index :: lookup_indices(tbl, calculate_hash(key), key);
	return entry_index;
}

/// Erase an entry associated with `key` from the table and returns `true` in case the entry was
/// found.
///
/// !!! note
///     Ordering of the values and keys may change.
tbl_erase :: fn (tbl: *?T, key: tbl_typeof_key(T)) bool #inline {
	assert(tbl);
	erase_slot_index, erase_entry_index :: lookup_indices(tbl, calculate_hash(key), key);
	if erase_entry_index < 0 { return false; }
	if tbl.len > 1 {
		// Array erase internaly swaps the last element with erased one, so we need to remap
		// slots here.
		last_entry_key :: tbl.keys[tbl.len-1];
		last_entry_slot_index :: lookup_indices(tbl, calculate_hash(last_entry_key), last_entry_key);
		assert(last_entry_slot_index >= 0);
		tbl.slots[last_entry_slot_index].index = erase_entry_index + 1;
	}
	array_erase(&tbl.keys, erase_entry_index);
	array_erase(&tbl.values, erase_entry_index);
	tbl.slots[erase_slot_index].index = DELETED_INDEX;
	tbl.len -= 1;
	return true;
}

/// Checks whether the table `tbl` contains the `key`.
tbl_contains :: fn (tbl: *?T, key: tbl_typeof_key(T)) bool #inline {
	assert(tbl);
	_, entry_index :: lookup_indices(tbl, calculate_hash(key), key);
	return entry_index >= 0;
}

/// Clears the table, but keeps allocated memory.
tbl_clear :: fn (tbl: *?T) #inline {
	assert(tbl);
	loop i := 0; i < tbl.slots.len; i += 1 {
		tbl.slots[i].index = EMPTY_INDEX;
	}
	tbl.keys.len = 0;
	tbl.values.len = 0;
	tbl.len = 0;
}

#private
DEFAULT_ENTRIES_COUNT :: 64;
LOAD_FACTOR :: 70 #maybe_unused;
EMPTY_INDEX : s32 : 0 #maybe_unused;
DELETED_INDEX : s32 : -1 #maybe_unused;

Slot :: struct #maybe_unused {
	index: s32;
	hash: u32;
}

calculate_hash :: fn (key: ?T) u32 #inline {
	is_string :: T == string || T == string_view;
	hash: u32;
	#if is_string {
		hash = auto std.str_hash(key);
	} else {
		// copy-paste from stack overflow, is it good or not???
		// https://stackoverflow.com/questions/664014/what-integer-hash-function-are-good-that-accepts-an-integer-hash-key
#if true {
		x: u32 = auto key;
		x = ((x >> 16) ^ x) * 0x45d9f3b;
		x = ((x >> 16) ^ x) * 0x45d9f3b;
		x = (x >> 16) ^ x;
		hash = x;
} else {
		x: u32 = auto key;
		x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
		x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
		x = x ^ (x >> 31);
		hash = x;
}
	}
	return hash;
}

compare_keys :: fn (a: ?T, b: T) bool #inline {
	is_string :: T == string || T == string_view;
	match: bool;
	#if is_string {
		match = std.str_match(a, b);
	} else {
		match = a == b;
	}
	return match;
}

impl_insert :: fn (tbl: *?T, key: tbl_typeof_key(T), value: tbl_typeof_value(T)) *tbl_typeof_value(T) #inline {
	assert(tbl);
	entry_value := insert(tbl, calculate_hash(key), key);
#if sizeof(value) > 16 {
	memcpy(auto entry_value, auto &value, sizeof(value));
} else {
	@entry_value = value;
}
	return entry_value;
}

impl_insert_empty :: fn (tbl: *?T, key: tbl_typeof_key(T)) *tbl_typeof_value(T) #inline {
	assert(tbl);
	return insert(tbl, calculate_hash(key), key);
}

initial_increment :: fn (tbl: *?T, hash: u32) s32 #inline {
	return auto 1 + hash % (cast(u32) tbl.slots.len - 1);
}

insert :: fn (tbl: *?T, hash: u32, key: tbl_typeof_key(T)) *tbl_typeof_value(T) #inline {
	if !tbl.slots.ptr { resize(tbl); }
#if IS_DEBUG {
	slot_index :: lookup_indices(tbl, hash, key);
	if slot_index >= 0 { panic("Duplicate key entry '%' in table!", key); }
}
	slot_index :: free_slot_index(tbl, hash);
	array_push(&tbl.keys, key);
	value_ptr := array_push(&tbl.values);
	assert(tbl.keys.len == tbl.values.len);
	tbl.len += 1;
	tbl.slots[slot_index].index = cast(s32) tbl.len; // NO -1 (0 is free slot)
	tbl.slots[slot_index].hash  = hash;
	return value_ptr;
}

free_slot_index :: fn (tbl: *?T, hash: u32) s32 {
	assert(tbl);
	assert(tbl.slots.ptr);
	if (tbl.len + 1)*100 >= tbl.slots.len*LOAD_FACTOR {
		resize(tbl, auto next_pow_2(auto tbl.slots.len));
	}
	index := cast(s32) (hash % auto tbl.slots.len);
	increment := initial_increment(tbl, hash);
	loop {
		entry_index :: tbl.slots[index].index;
		if entry_index == EMPTY_INDEX || entry_index == DELETED_INDEX {
			break;
		}
		index += increment;
		increment += 1;
		if index >= tbl.slots.len { index -= cast(s32) tbl.slots.len; }
	}
	return index;
}

lookup_indices :: fn (tbl: *?T, hash: u32, key: tbl_typeof_key(T)) (slot_index: s32, entry_index: s32) {
	if !tbl.slots.ptr { return -1, -1; }
	slots :: tbl.slots;
	index := cast(s32) (hash % auto slots.len);
	increment := initial_increment(tbl, hash);
	loop {
		slot :: &slots[index];
		if slot.index == EMPTY_INDEX { break; }
		if slot.hash == hash && compare_keys(tbl.keys[slot.index-1], key) {
			return index, slot.index-1;
		}
		index += increment;
		increment += 1;
		if index >= tbl.slots.len { index -= cast(s32) tbl.slots.len; }
	}
	return -1, -1;
}

resize :: fn (tbl: *?T, new_size : s32 = DEFAULT_ENTRIES_COUNT) {
	assert(new_size > 32);
	old_slots :: tbl.slots;
	alloc_slice(&tbl.slots, new_size, false, tbl.allocator);
	loop i := 0; i < tbl.slots.len; i += 1 {
		tbl.slots[i].index = EMPTY_INDEX;
	}

	used_count := tbl.len;
	loop i := 0; i < old_slots.len && used_count >= 0; i += 1 {
		slot :: &old_slots[i];
		if slot.index == EMPTY_INDEX || slot.index == DELETED_INDEX { continue; }
		new_slot_index :: free_slot_index(tbl, slot.hash);
		tbl.slots[new_slot_index].index = slot.index;
		tbl.slots[new_slot_index].hash  = slot.hash;
		used_count -= 1;
	}

	free_slice(&old_slots, tbl.allocator);
}
