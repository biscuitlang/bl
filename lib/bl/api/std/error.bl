// =================================================================================================
// bl
//
// File:   error.bl
// Author: Martin Dorazil
// Date:   19/11/20
//
// Copyright 2020 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// =================================================================================================

//! # Error Handling
//!
//! Available by default.
//!
//! There is no support for *exceptions* of any kind in BL, however, there are a few features in the
//! language helping with error handling such as [defer](manual.html#Defer) and
//! [multiple return values](manual.html#Return-Value). In general, every possibly failing
//! function should return an error state in case of failure containing an error code and some
//! message describing the problem. This style is widely adopted by the *standard library* and may
//! be used in the *user* code as well.
//!
//! The error state is represented by the following data structure:
//!
//! ```bl
//! _Error :: struct {
//!     msg: string_view;
//!     code: s32;
//! }
//!
//! Error :: *_Error;
//! ```
//!
//! Where `Error` is just pointer to thread-local allocated storage (shared for all error states) used
//! as temporary storage for the actual `_Error` data.
//!
//! The `null` pointer to `Error` means *no* error, we can use `OK` constant instead typing `null` every
//! time.
//!
//! ### Catch
//!
//! You can grab the error value as any other returned value on a function call-side and check if
//! error is present by a simple `if` statement.
//!
//! ```bl
//! err :: open_file(filepath);
//! if err then print_err(err);
//!
//! // Or invoke panic?
//! if err then panic(err);
//! ```
//!
//! Other option to handle error on call-side is using the `catch` statement, which implicitly does
//! error presence check for you. The error value is captured in `$` builtin variable. The `catch` statement
//! checks the last member in returned value; meaning, when function returns multiple values, the
//! error state is supposed to be the last.
//!
//! ### Example
//!
//! ```bl
//! @@@examples/error_handling.bl
//! ```
//!
//! As already mentioned, the [defer](manual.html#Defer) statement may be helpful in situations
//! where we need to free some memory or do any kind of resource cleanup before the failing function
//! returns the error state.

_Error :: struct #compiler {
	msg: string_view;
	code: s32;
}

Error :: *_Error;

/// No error.
OK : Error = null;

/// Check whether `err` is representing error `code`. Returns `false` when `err` is `null`.
is_error :: fn (err: Error, code: s32) bool #inline {
	if !err { return false; }
	return err.code == code;
}

/// Overloaded function setting up error state. Error state is global variable holding [Error](#error)
/// instance, `error` function sets desired values and return pointer to this global. That means
/// the `Error` must be handled immediately after it's returned from failing function since every
/// `Error` state points to the same memory.
///
/// Error creating does not require any HEAP memory alocations.
///
/// **Overloads:**
/// ```bl
/// fn (code: s32) Error #inline
/// fn (format: string, args: ...) Error #inline
/// fn (code: s32, format: string, args: ...) Error #inline
/// ```
///
/// Sets error state with `code` and formatted message.
error :: fn {  impl_error1; impl_error2; impl_error3; }

#scope_private
#import "std/print"
#import "std/string"

_last_error_msg_buffer: [1024]u8 #thread_local;
_last_error: _Error #thread_local;

impl_error1 :: fn (code: s32) Error #inline {
	return impl_error3(code, str_empty);
}

impl_error2 :: fn (format: string_view, args: ...) Error #inline {
	return impl_error3(ERR_UNKNOWN, format, args);
}

impl_error3 :: fn (code: s32, format: string_view, args: ...) Error #inline {
	e := &_last_error;
	msg_size :: bprint(_last_error_msg_buffer, format, args);
	e.code      = code;
	e.msg       = string_view.{ msg_size, _last_error_msg_buffer.ptr };
	return e;
}
