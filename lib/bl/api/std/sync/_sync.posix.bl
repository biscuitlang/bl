#scope_module

_Mutex     :: pthread_mutex_t;
_Condition :: pthread_cond_t;

_mutex_init :: fn (mutex: *_Mutex, kind: MutexKind) Error #inline {
	pthread_kind: PTHREAD_MUTEX;

	using MutexKind;
	switch kind {
		NORMAL    { pthread_kind = PTHREAD_MUTEX.NORMAL;    }
		RECURSIVE { pthread_kind = PTHREAD_MUTEX.RECURSIVE; }
		default   { panic("Invalid mutex kind.");           }
	}

	attribute: pthread_mutexattr_t #noinit;
	pthread_mutexattr_settype(&attribute, pthread_kind);

	state :: pthread_mutex_init(mutex, &attribute);
	if state != 0 {
		estr :: cast(*u8) C.strerror(state);
		return error("Cannot init mutex: '%' (%).", estr, state);
	}
	return OK;
}

_mutex_terminate :: fn (mutex: *_Mutex) Error #inline {
	state :: pthread_mutex_destroy(mutex);
	if state != 0 {
		estr :: cast(*u8) C.strerror(state);
		return error("Cannot terminate mutex: '%' (%).", estr, state);
	}
	return OK;
}

_mutex_lock :: fn (mutex: *_Mutex) Error #inline {
	state :: pthread_mutex_lock(mutex);
	if state != 0 {
		estr :: cast(*u8) C.strerror(state);
		return error("Cannot lock mutex: '%' (%).", estr, state);
	}
	return OK;
}

_mutex_try_lock :: fn (mutex: *_Mutex) (bool, Error) #inline {
	state :: pthread_mutex_lock(mutex);
	if state == 0 {
		return true, OK;
	}
	if state == C.EBUSY {
		return false, OK;
	}
	estr :: cast(*u8) C.strerror(state);
	return false, error("Cannot lock mutex: '%' (%).", estr, state);
}

_mutex_unlock :: fn (mutex: *_Mutex) Error #inline {
	state :: pthread_mutex_unlock(mutex);
	if state != 0 {
		estr :: cast(*u8) C.strerror(state);
		return error("Cannot unlock mutex: '%' (%).", estr, state);
	}
	return OK;
}

_condition_init :: fn (condition: *_Condition) Error #inline {
	state :: pthread_cond_init(condition, null);
	if state != 0 {
		estr :: cast(*u8) C.strerror(state);
		return error("Cannot initialize condition variable: '%' (%).", estr, state);
	}
	return OK;
}

_condition_wait :: fn (condition: *_Condition, mutex: *_Mutex) Error #inline {
	state :: pthread_cond_wait(condition, mutex);
	if state != 0 {
		estr :: cast(*u8) C.strerror(state);
		return error("Cannot wait for condition variable: '%' (%).", estr, state);
	}
	return OK;
}

_condition_signal :: fn (condition: *_Condition) Error #inline {
	state :: pthread_cond_signal(condition);
	if state != 0 {
		estr :: cast(*u8) C.strerror(state);
		return error("Cannot signal condition variable: '%' (%).", estr, state);
	}
	return OK;
}

#scope_private

#import "os/posix/pthread"
#import "os/posix/semaphore"

C :: #import "libc";