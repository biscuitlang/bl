#scope_module

_Mutex :: RTL_CRITICAL_SECTION;
_Condition :: CONDITION_VARIABLE;

_mutex_init :: fn (mutex: *_Mutex) Error #inline {
	InitializeCriticalSection(mutex);
	return OK;
}

_mutex_terminate :: fn (mutex: *_Mutex) Error #inline {
	DeleteCriticalSection(mutex);
	return OK;
}

_mutex_lock :: fn (mutex: *_Mutex) Error #inline {
	EnterCriticalSection(mutex);
	return OK;
}

_mutex_try_lock :: fn (mutex: *_Mutex) (bool, Error) #inline {
	return TryEnterCriticalSection(mutex) != 0, OK;
}

_mutex_unlock :: fn (mutex: *_Mutex) Error #inline {
	LeaveCriticalSection(mutex);
	return OK;
}

_condition_init :: fn (condition: *_Condition) Error #inline {
	InitializeConditionVariable(condition);
	return OK;
}

_condition_wait :: fn (condition: *_Condition, mutex: *_Mutex) Error #inline {
	SleepConditionVariableCS(condition, mutex, INFINITE);
	return OK;
}

_condition_signal :: fn (condition: *_Condition) Error #inline {
	WakeConditionVariable(condition);
	return OK;
}

#scope_private
#import "os/windows"
