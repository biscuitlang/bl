#scope_module

_Mutex :: struct {
	data: union {
		cs:  RTL_CRITICAL_SECTION;
		srw: SRWLOCK;
	};
	kind: MutexKind;
}

_Condition :: CONDITION_VARIABLE;

_mutex_init :: fn (mutex: *_Mutex, kind: MutexKind) Error #inline {
	using MutexKind;
	switch kind {
		NORMAL {
			InitializeSRWLock(&mutex.data.srw);
		}
		RECURSIVE {
			InitializeCriticalSection(&mutex.data.cs);
		}
	}
	mutex.kind = kind;
	return OK;
}

_mutex_terminate :: fn (mutex: *_Mutex) Error #inline {
	using MutexKind;
	switch mutex.kind {
		NORMAL;
		RECURSIVE {
			DeleteCriticalSection(&mutex.data.cs);
		}
	}
	zeroinit(mutex);
	return OK;
}

_mutex_lock :: fn (mutex: *_Mutex) Error #inline {
	using MutexKind;
	switch mutex.kind {
		NORMAL {
			if TryAcquireSRWLockExclusive(&mutex.data.srw) == 0 {
				panic("The mutex is already locked on the same thread.");
			}
		}
		RECURSIVE {
			EnterCriticalSection(&mutex.data.cs);
		}
	}
	return OK;
}

_mutex_try_lock :: fn (mutex: *_Mutex) (bool, Error) #inline {
	using MutexKind;
	switch mutex.kind {
		NORMAL {
			return TryAcquireSRWLockExclusive(&mutex.data.srw) != 0, OK;
		}
		RECURSIVE {
			return TryEnterCriticalSection(&mutex.data.cs) != 0, OK;
		}
	}
	return false, error("Invalid mutex kind.");
}

_mutex_unlock :: fn (mutex: *_Mutex) Error #inline {
	using MutexKind;
	switch mutex.kind {
		NORMAL {
			ReleaseSRWLockExclusive(&mutex.data.srw);
		}
		RECURSIVE {
			LeaveCriticalSection(&mutex.data.cs);
		}
	}
	return OK;
}

_condition_init :: fn (condition: *_Condition) Error #inline {
	InitializeConditionVariable(condition);
	return OK;
}

_condition_wait :: fn (condition: *_Condition, mutex: *_Mutex) Error #inline {
	using MutexKind;
	switch mutex.kind {
		NORMAL {
			panic();
		}
		RECURSIVE {
			SleepConditionVariableCS(condition, &mutex.data.cs, INFINITE);
		}
	}
	return OK;
}

_condition_signal :: fn (condition: *_Condition) Error #inline {
	WakeConditionVariable(condition);
	return OK;
}

#scope_private
#import "os/windows"
