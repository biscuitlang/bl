#scope_private

#import "std/dlib"
#import "std/fs"
#import "std/string"

dl_open_test1 :: fn () #test {
	lib, err :: library_open("foobar");
	test_not_ok(err);
}

dl_open_test2 :: fn () #test {
	lib, err :: library_open();
	defer library_close(lib);
	test_ok(err);
	test_not_null(lib);
}

dl_sym_test1 :: fn () #test {
	lib, err1 :: library_open();
	defer library_close(lib);
	sym, err2 :: library_get_symbol(lib, "foobar");
	test_not_ok(err2);
}

dl_test_lib :: fn () #test {
	head :: path_split(#file);
	lib_name :: str_make(head);
	defer str_terminate(&lib_name);
	// @Incomplete: Platform specific
	using Platform;
	switch PLATFORM {
		WINDOWS {
			str_append(&lib_name, "_test/test.dll");
		}
		LINUX {
			str_append(&lib_name, "_test/libtest.so");
		}
		DARWIN {
			str_append(&lib_name, "_test/libtest.dylib");
		}
		UNKNOWN { panic(); }
	}

	lib, err :: library_open(lib_name);
	defer library_close(lib);
	test_ok(err);

	{
		sym, err :: library_get_symbol(lib, "simple");
		test_ok(err);
		f :: cast(*fn()) sym;
		f();
	}

	{
		sym, err :: library_get_symbol(lib, "pass_s32");
		test_ok(err);
		f :: cast(*fn(s32) s32) sym;
		test_eq(10, f(10));
	}

	{
		sym, err :: library_get_symbol(lib, "pass_f32");
		test_ok(err);
		f :: cast(*fn(f32) f32) sym;
		test_eq(10.1f, f(10.1f));
	}

	{
		sym, err :: library_get_symbol(lib, "add");
		test_ok(err);
		f :: cast(*fn(s32, s32) s32) sym;
		test_eq(30, f(10, 20));
	}
}
