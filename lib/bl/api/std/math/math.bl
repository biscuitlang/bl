//! # Math
//!
//! `#load "std/math.bl"`

PI          :: 3.141592653589793;
TWO_PI      :: 6.283185307179587;
HALF_PI     :: 1.570796326794897;
F32_PI      :: cast(f32) PI;
F32_TWO_PI  :: cast(f32) TWO_PI;
F32_HALF_PI :: cast(f32) HALF_PI;

F32_EPSILON :: 0.00001f;
F64_EPSILON :: 0.00001;

F32_MAX :: 3.402823466e+38f;
F32_MIN :: 1.175494351e-38f;
F64_MAX :: 1.7976931348623158e+308;
F64_MIN :: 2.2250738585072014e-308;

S8_MIN  : s8 : -128;
S8_MAX  : s8 : 127;
S16_MIN : s16 : -32768;
S16_MAX : s16 : 32767;
S32_MIN : s32 : -2147483648;
S32_MAX : s32 : 2147483647;
S64_MIN : s64 : -9223372036854775808;
S64_MAX : s64 : 9223372036854775807;

U8_MIN  : u8 : 0;
U8_MAX  : u8 : 255;
U16_MIN : u16 : 0;
U16_MAX : u16 : 65535;
U32_MIN : u32 : 0;
U32_MAX : u32 : 4294967295;
U64_MIN : u64 : 0;
U64_MAX : u64 : 18446744073709551615;

/// Returns NaN for given type `T`.
nan :: fn (T: type #comptime) T #comptime {
	static_assert(is_real(T));
#if T == f32 {
	return 0.f/0.f;
} else {
	return 0./0.;
}
}

/// Returns positive infinity value for given type `T`.
inf :: fn (T: type #comptime) T #comptime {
	static_assert(is_real(T));
#if T == f32 {
	return 1.f/0.f;
} else {
	return 1./0.;
}
}

/// Returns `true` in case the input real number is NaN (i.e. result of operation 0./0.).
is_nan :: fn (n: ?T) bool #inline {
	static_assert(is_real(T));
	return n != n;
}

/// Returns `true` in case the input real number is positive infinity number (i.e. result of operation 1./0.).
is_inf :: fn (n: ?T) bool #inline {
	static_assert(is_real(T));
	return n == inf(T);
}

/// Returns `true` in case the input real number is negative infinity number (i.e. result of operation -1./0.).
is_ninf :: fn (n: ?T) bool #inline {
	static_assert(is_real(T));
	return n == -inf(T);
}

sin       :: fn { f32_sin; f64_sin; }
cos       :: fn { f32_cos; f64_cos; }
floor     :: fn { f32_floor; f64_floor; }
round     :: fn { f32_round; f64_round; }
pow       :: fn { f32_pow; f64_pow; }
exp       :: fn { f32_exp; f64_exp; }
log       :: fn { f32_log; f64_log; }
log2      :: fn { f32_log2; f64_log2; }
log10     :: fn { f32_log10; f64_log10; }
sqrt      :: fn { f32_sqrt; f64_sqrt; }
ceil      :: fn { f32_ceil; f64_ceil; }
trunc     :: fn { f32_trunc; f64_trunc; }
atan2     :: fn { C.atan2f; C.atan2; }
copysign  :: fn { C.copysignf; C.copysign; }
asin      :: fn { C.asinf; C.asin; }
acos      :: fn { C.acosf; C.acos; }
tan       :: fn { C.tanf; C.tan; }
atan      :: fn { C.atanf; C.atan; }

fmod :: fn {
	fn (x: f32, y: f32) f32 {
		return x - f32_trunc(x / y) * y;
	};
	fn (x: f64, y: f64) f64 {
		return x - f64_trunc(x / y) * y;
	};
}

abs :: fn { f32_abs; f64_abs; s64_abs; }
compare :: fn { f32_compare; f64_compare; }
degtorad :: fn { f32_degtorad; f64_degtorad; }
radtodeg :: fn { f32_radtodeg; f64_radtodeg; }

max :: fn (a: ?T, b: T) T  #inline {
	if b > a { return b; }
	return a;
}

min :: fn (a: ?T, b: T) T #inline {
	if b < a { return b; }
	return a;
}

lerp :: fn (a: ?T, b: T, fraction: T) T  #inline {
	return a + fraction * (b - a);
}

smooth_step :: fn (a: ?T, b: T, fraction: T) T  #inline {
	two: T : auto 2;
	three: T : auto 3;
	return lerp(a, b, fraction * fraction * (three - two * fraction));
}

clamp :: fn (v: ?T, minimum: T, maximum: T) T {
	if v <= minimum { return minimum; }
	if v >= maximum { return maximum; }

	return v;
}

map :: fn (value: ?T, min1: T, max1: T, min2: T, max2: T) T #inline {
	return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

#scope_private
C :: #import "libc";

// Compiler intrinsics
f32_sin   :: fn (n: f32) f32 #intrinsic "sin.f32";
f64_sin   :: fn (n: f64) f64 #intrinsic "sin.f64";
f32_cos   :: fn (n: f32) f32 #intrinsic "cos.f32";
f64_cos   :: fn (n: f64) f64 #intrinsic "cos.f64";
f32_floor :: fn (n: f32) f32 #intrinsic "floor.f32";
f64_floor :: fn (n: f64) f64 #intrinsic "floor.f64";
f32_round :: fn (n: f32) f32 #intrinsic "round.f32";
f64_round :: fn (n: f64) f64 #intrinsic "round.f64";
f32_pow   :: fn (base: f32, exponent: f32) f32 #intrinsic "pow.f32";
f64_pow   :: fn (base: f64, exponent: f64) f64 #intrinsic "pow.f64";
f32_exp   :: fn (n: f32) f32 #intrinsic "exp.f32";
f64_exp   :: fn (n: f64) f64 #intrinsic "exp.f64";
f32_log   :: fn (n: f32) f32 #intrinsic "log.f32";
f64_log   :: fn (n: f64) f64 #intrinsic "log.f64";
f32_log2  :: fn (n: f32) f32 #intrinsic "log2.f32";
f64_log2  :: fn (n: f64) f64 #intrinsic "log2.f64";
f32_log10 :: fn (n: f32) f32 #intrinsic "log10.f32";
f64_log10 :: fn (n: f64) f64 #intrinsic "log10.f64";
f32_sqrt  :: fn (n: f32) f32 #intrinsic "sqrt.f32";
f64_sqrt  :: fn (n: f64) f64 #intrinsic "sqrt.f64";
f32_ceil  :: fn (x: f32) f32 #intrinsic "ceil.f32";
f64_ceil  :: fn (x: f64) f64 #intrinsic "ceil.f64";
f32_trunc :: fn (x: f32) f32 #intrinsic "trunc.f32";
f64_trunc :: fn (x: f64) f64 #intrinsic "trunc.f64";

s64_abs :: fn (v: s64) s64 {
	if v < 0 { return -v; }
	return v;
}

f32_abs :: fn (v: f32) f32 #inline {
	if v < 0.f { return -v; }
	return v;
}

f64_abs :: fn (v: f64) f64 #inline {
	if v < 0. { return -v; }
	return v;
}

f32_compare :: fn (a: f32, b: f32, epsilon := F32_EPSILON) bool #inline {
	return abs(a - b) < epsilon;
};

f64_compare :: fn (a: f64, b: f64, epsilon := F64_EPSILON) bool #inline {
	return abs(a - b) < epsilon;
};

f32_degtorad :: fn (deg: f32) f32 #inline {
	return deg / 180.f * cast(f32) PI;
};

f32_radtodeg :: fn (rad: f32) f32 #inline {
	return (180.f * rad) / cast(f32) PI;
};

f64_degtorad :: fn (deg: f64) f64 #inline {
	return deg / 180. * PI;
};

f64_radtodeg :: fn (rad: f64) f64 #inline {
	return (180. * rad) / PI;
};

